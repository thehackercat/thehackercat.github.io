<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：django | TheHackerCat's blog]]></title>
  <link href="http://thehackercat.me/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://thehackercat.me/"/>
  <updated>2015-12-19T10:43:09+08:00</updated>
  <id>http://thehackercat.me/</id>
  <author>
    <name><![CDATA[TheHackerCat]]></name>
    <email><![CDATA[lexuscyborg103@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django 高级 views 和 URLconf 配置]]></title>
    <link href="http://thehackercat.me/blog/2015/12/08/django-learning-4/"/>
    <updated>2015-12-08T15:08:35+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/08/django-learning-4</id>
    <content type="html"><![CDATA[<p>由于官网教程讲得迷迷糊糊的，所以我提炼了下代码，发现便于理解很多。</p>

<h2>URLconf 技巧</h2>

<pre><code class="python urls.py"># 在模块开始导入关联的视图函数，直接传递函数对象
from django.conf.urls import include, url
from django.contrib import admin
from mysite.views import hello, current_datetime, hours_ahead

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^hello/$', hello),
    url(r'^time/$', current_datetime),
    url(r'^time/plus/(\d{1,2})/$', hours_ahead),
]
</code></pre>

<pre><code class="python urls.py"># 在模块开始导入 views 模块，传递 views.视图函数
from django.conf.urls import include, url
from django.contrib import admin
from mysite import views

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^hello/$', views.hello),
    url(r'^time/$', views.current_datetime),
    url(r'^time/plus/(\d{1,2})/$', views.hours_ahead),
]
</code></pre>

<pre><code class="python urls.py"># 传入一个包含模块名+函数名的对象
from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^hello/$', 'mysite.views.hello'),
    url(r'^time/$', 'mysite.views.current_datetime'),
    url(r'^time/plus/(\d{1,2})/$', 'mysite.views.hours_ahead'),
]
</code></pre>

<pre><code class="python urls.py"># 开启 URLconf 调试模式
from django.conf.urls import include, url
from django.contrib import admin
from mysite import views

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^hello/$', views.hello),
    url(r'^time/$', views.current_datetime),
    url(r'^time/plus/(\d{1,2})/$', views.hours_ahead),
]

if settings.DEBUG:
    urlpatterns += url(r'^debuginfo/$', views.debug),
    )
</code></pre>

<h2>命名组</h2>

<p>我觉得命名组的模式增加了代码冗余度，且语义化也不好。对于我这种懒人完全不需要 ：D <del>(其实就是我懒的借口)</del></p>

<p>而它的目的在于，将变量以<strong>位置参数</strong>的方式传递给视图函数变为以<strong>关键字参数</strong>的方式传递。</p>

<pre><code class="python urls.py"># 无名组，以位置参数传递变量
from django.conf.urls import include, url
from django.contrib import admin
from mysite import views

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^articles/(\d{4})/$'， view.year_archive),
    url(r'^articles/(\d{4})/(\d{2})/$', views.month_archive),
]
</code></pre>

<pre><code class="python urls.py"># 命名组，以关键字参数传递变量
from django.conf.urls import include, url
from django.contrib import admin
from mysite import views

urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'^articles/(?P&lt;year&gt;\d{4})/$'， view.year_archive),
    url(r'^articles/(?P&lt;year&gt;\d{4})/(?&lt;month&gt;\d{2})/$', views.month_archive),
]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解 Python 装饰器]]></title>
    <link href="http://thehackercat.me/blog/2015/12/07/python-decorator-learning/"/>
    <updated>2015-12-07T14:12:24+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/07/python-decorator-learning</id>
    <content type="html"><![CDATA[<p>最近在写 Python+Django 的时候发现，有时候封装 API 的时候经常会遗失一些重复的装饰信息，但是直接封装到方法里是比较差劲的写法，因为有多个模块可能同时需要这些装饰信息，所以我希望使用一种可以迭代的装饰器。于是我在 <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484">Stack Overflow</a> 上找到了相应的解答。下面以这篇解答为引写下我理解 Python decorator 的思路过程。</p>

<h2>装饰器是做什么用的？</h2>

<p>装饰器实现对一个已有的模块做一些“修饰工作”，所谓修饰工作就是想给现有的模块加上一些小装饰（一些小功能，这些小功能可能好多模块都会用到），但又不让这个小装饰（小功能）侵入到原有的模块中的代码里去。</p>

<h2>装饰器的定义</h2>

<p>首先，你需要知道 <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000">Python 的闭包</a>，接着发现3点 Python 的特性在装饰器中运用：
1. 函数可以赋值给一个变量。
2. 函数可以定义在另一个函数内部。
3. 函数名可以作为函数返回值。
辣么，先来看一段代码:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getTalk</span><span class="p">(</span><span class="nb">type</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">shout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># 定义函数</span>
</span><span class='line'><span class="k">def</span> <span class="nf">shout</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s">&quot;yes&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span><span class="o">+</span><span class="s">&quot;!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s">&quot;yes&quot;</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">+</span><span class="s">&quot;...&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 返回函数</span>
</span><span class='line'><span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="s">&quot;shout&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># 没有使用&quot;()&quot;, 并不是要调用函数，而是要返回函数对象</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">shout</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">whisper</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">如何使用？</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">将函数返回值赋值给一个变量</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">talk</span> <span class="o">=</span> <span class="n">getTalk</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">我们可以打印下这个函数对象</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">talk</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">outputs</span> <span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">shout</span> <span class="n">at</span> <span class="mh">0xb7ea817c</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">这个对象是函数的返回值</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">talk</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">outputs</span> <span class="p">:</span> <span class="n">Yes</span><span class="err">!</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">不仅如此，你还可以直接使用之</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">getTalk</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">whisper</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">outputs</span> <span class="p">:</span> <span class="n">yes</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">既然函数可以作为返回值，是不是函数也可以作为参数传递呢</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">doSomethingBefore</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">I</span> <span class="n">do</span> <span class="n">something</span> <span class="n">before</span> <span class="n">then</span> <span class="n">I</span> <span class="n">call</span> <span class="n">the</span> <span class="n">function</span> <span class="n">you</span> <span class="n">gave</span> <span class="n">me</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">func</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">doSomethingBefore</span><span class="p">(</span><span class="n">scream</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">outputs</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">do</span> <span class="n">something</span> <span class="n">before</span> <span class="n">then</span> <span class="n">I</span> <span class="n">call</span> <span class="n">the</span> <span class="n">function</span> <span class="n">you</span> <span class="n">gave</span> <span class="n">me</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Yes</span><span class="err">!</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="err">所以看过这两段代码，你一定明白了，装饰器的定义。</span>
</span><span class='line'>
</span><span class='line'><span class="err">装饰器就是封装器，可以让你在被装饰函数之前或之后执行代码，而不必修改函数本身代码。</span>
</span><span class='line'>
</span><span class='line'><span class="c">## 怎么写封装器：</span>
</span><span class='line'><span class="err">首先，我们来手写一个封装器：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">new_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">before</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">after</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">alone</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">decorated_along_func</span> <span class="o">=</span> <span class="n">new_decorator</span><span class="p">(</span><span class="n">along_func</span><span class="p">)</span>
</span><span class='line'><span class="n">decorated_along_func</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">outputs</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">before</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">alone</span> <span class="n">function</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">after</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">这里每次调用</span> <span class="n">decorated_along_func</span> <span class="err">函数时，都会将</span> <span class="n">along_func</span> <span class="err">函数传入到装饰函数</span> <span class="n">new_decorator</span> <span class="err">中，完成封装。</span>
</span><span class='line'>
</span><span class='line'><span class="c">## 怎么写装饰器：</span>
</span><span class='line'><span class="err">那将上例代码稍微进行修改：</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">new_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">before</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">after</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@new_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">alone</span> <span class="n">function</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">along_func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>
就会发现会得到相同的结果，这就是装饰器！</p>

<p>那么回到我最初的问题，装饰器能否迭代呢？</p>

<p>可以！</p>

<pre><code class="python ">def decorator1(func):
    def wrapper():
        print("before the function runs")
        func()
        print("after the function runs")
    return wrapper

def decorator2(func):
    def wrapper():
        print("before the decorator1 runs")
        func()
        print("after the decorator1 runs")
    return wrapper

@decorator2
@decorator1
def along_func():
    print("I am a alone function")

along_func()

#outpus:
#before the decorator1 runs
#before the function runs
#I am a alone function
#after the function runs
#after the decorator1 runs
</code></pre>

<p>这种特性十分的便捷，但是必须注意装饰器的顺序。</p>

<p>如果上例代码写成：
<code>python
@decorator1
@decorator2
def along_func():
    print("I am a alone function")
</code>
那么结果将变为
<code>python
before the function runs
before the decorator1 runs
I am a alone function
after the decorator1 runs
after the function runs
</code></p>

<h2>一些迭代装饰器的用法</h2>

<pre><code class="python "># bold装饰器
def makebold(fn):
    def wrapper():
        # 在前后加入标签
        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
    return wrapper

# italic装饰器
def makeitalic(fn):
    def wrapper():
        # 加入标签
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapper

@makebold
@makeitalic
def say():
    return "hello"

print say()
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;

# 等价的代码
def say():
    return "hello"
say = makebold(makeitalic(say))

print say()
#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;
</code></pre>

<p>是不是灰常炫酷。</p>

<h2>高级用法</h2>

<p>关于更多装饰器的高级用法，你可以戳以下链接：</p>

<p><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">戳我</a></p>

<p>关于 Python Decroator 的各种提案，可以参看：</p>

<p><a href="https://wiki.python.org/moin/PythonDecoratorProposals">Python Decorator Proposals</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记3-- Models ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/21/django-learning3/"/>
    <updated>2015-11-21T13:17:57+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/21/django-learning3</id>
    <content type="html"><![CDATA[<h2>MTV vs MVC</h2>

<p>正如在之前<a href="http://thehackercat.me/blog/2015/11/14/django-learning1/">这篇文章</a>所提到的， 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller ( MVC )模式。 在这个模式中， Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。</p>

<p>而 Django 使用的更多的则是模型( Model )、模板( Template )和视图( Views )的软件设计模式，称为 MTV 模式。我在 Stack Overflow 的<a href="http://stackoverflow.com/questions/6621653/django-vs-model-view-controller">这个回答</a>里找到了对于 MTV vs MVC 两种设计模式间的微妙的差别。</p>

<p>其中提到，不能简单的把 Django 视图认为是 MVC 控制器，把 Django 模板认为是 MVC 视图。</p>

<p>两者之间的差别在于，在 Django 中，视图( Views )不处理用户输入，而是用来选择要展示的哪些数据，而不是要如何展示数据。而 Django 模板 仅仅决定如何展现Django视图指定的数据。</p>

<p>或者说, Django 将 MVC 中的视图进一步分解为 Django 视图 和 Django 模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得 Django 的模板可以根据需要随时替换，而不仅仅限制于内置的模板。至于 MVC 控制器部分，由 Django 框架的 URLconf 来实现。</p>

<h2>模型练手</h2>

<p>为了深入了解 Django Models 对数据的操作，我写了一个简单的博客模型作为练手。</p>

<p>在新建模型时遇到了一个 App migrations 问题如下：</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/model%20error%201.png" alt="Model CommandError" /></p>

<p>后来发现是由于 Django 版本问题，在最近版本把 migrations 移出了所创建的 App 的根目录，只需要执行<code>python manage.py makemigration</code>接着再执行<code>python manage.py migrate</code>即可解决。</p>

<p>写了个简单的博客的增删改查，代码如下：
<figure class='code'><figcaption><span>#view.py</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;-&lt;</span><span class="n">em</span><span class="o">&gt;-</span><span class="n">coding</span><span class="p">:</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span> <span class="o">-&lt;/</span><span class="n">em</span><span class="o">&gt;-&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">blog.models</span> <span class="kn">import</span> <span class="n">Blog</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">blog</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">RequestContext</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">blog_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blog_list</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blog_list</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">blog_list</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog_list</span><span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">blog_form</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">POST</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">cleaned_data</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;id&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>            <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span><span class="n">author</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;author&#39;</span><span class="p">],</span><span class="n">content</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">])</span>
</span><span class='line'>            <span class="n">blog</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>            <span class="n">blog</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">blog</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">date</span><span class="p">[</span><span class="s">&#39;author&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">blog</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">]</span>
</span><span class='line'>            <span class="n">blog</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="s">&#39;/blog/list&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_form.html&quot;</span><span class="p">,</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">blog_del</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'>        <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">fileter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">blog</span><span class="o">/</span><span class="nb">list</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">blog_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'>        <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span>
</span><span class='line'>            <span class="n">initial</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">title</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">author</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">author</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">content</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blog_form</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">form</span><span class="p">},</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">errors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">参数异常请刷新后重试</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blog_list</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">errors</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">errors</span><span class="p">})</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">blog_edit</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'>        <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span>
</span><span class='line'>                <span class="n">initial</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">title</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">author</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">author</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">content</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blog_form</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">form</span><span class="p">},</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">errors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">参数异常请刷新后重试</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blog_list</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,{</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">errors</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span><span class="n">errors</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code class="python #form.py">#!/usr/bin/python
#-*-coding:utf-8 -*-
from django import forms

class BlogForm(forms.Form):
    title =  forms.CharField(label='标题')
    author = forms.CharField(label='作者')
    content = forms.CharField(label='正文',widget=forms.Textarea)
</code></pre>

<p>其中 CharField() 相当于赋予了 title 表段 varchar 的属性。</p>

<p>object.all() 相当于执行了一条<code>select * from blog</code>的 sql 语句。</p>

<p>object.get() 相当于执行了一条<code>select * from blog where id='bid_'</code>的获取单个对象的 sql 语句。</p>

<p>object.save() 相当于执行了<code>UPDATE blog SET ...</code>的 sql 语句。</p>

<p>并用 errors[] 列表来捕捉错误信息，一般防止出现错误的 sql 语句时增加了 blog 表段中的 id 号而其余属性值为空的情况。</p>

<p>感觉相比于 ThinkinPHP 操作表单 GET/POST 请求以及处理数据库方面要方便得多。</p>

<h2>疑惑</h2>

<p>MVC 框架大大缩小了开发者对数据存储的直接操作，框架自动生成 sql 语句并空值数据的存取等。以后写 sql 感觉就跟 Excel 一样了，那应该怎么优化 sql 呢。</p>

<p>顺便吐槽一下，最近 GitHub Repositorie 换新的布局，天热噜，怎么能这么丑！</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/dontstudyCS.jpg" alt="Dont learn CS" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记2-- Templates ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/16/django-learning2/"/>
    <updated>2015-11-16T15:15:55+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/16/django-learning2</id>
    <content type="html"><![CDATA[<p>虽然 Django 中 Html 可以直接硬编码到 Python 中，但是这种行为并不利于前端开发人员进行维护。所以 Django 有了<a href="http://liquidmarkup.org/">流模板</a> ( Liquid Templates )。</p>

<h2>流模板基础</h2>

<p>举个例子，下面这个模板大致含括了 Django 模板的几个特性。</p>

<pre><code class="html">
{% load staticfiles %}
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Dear {{ person_name }},&lt;/p&gt;

    &lt;p&gt;Thanks for placing an order from {{ company }}. It's scheduled to ship on {{ ship_date|date:"F J,Y " }}.&lt;/p&gt;

    {% if ordered_warranty %}
    &lt;p&gt;Your warranty information will be included in the packaging.&lt;/p&gt;
    &lt;p&gt;Here are the items you've ordered: &lt;/p&gt;

    &lt;ul&gt;
    {% for item in item_list %}
        &lt;li&gt;
            {{ item }}
        &lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
    {% else %}
    &lt;p&gt;You didnt order a warranty, so you're on your own when the products inevitably stop working. &lt;/p&gt;
    {% endif %}

    &lt;p&gt;Sincerely,&lt;br /&gt;{{ company }}&lt;/p&gt;
    &lt;p&gt;footer&lt;/p&gt;
    {% block footer %}
    &lt;hr&gt;
    &lt;p&gt;Thanks for visiting my site.&lt;/p&gt;
    {% endblock %}
&lt;/body&gt;
&lt;/html&gt;

</code></pre>

<p>看出，模板是基于 Html 的，事实上它就是保存成一个 .html 文件，它跟我们所看到的 html 的区别就在于多了一些由 <code>{{ }}</code>括起来的变量以及由<code>{% %}</code>括起来的模板标签，此外变量还通过过滤器 <code>|</code>来对文本输出格式进行转换。</p>

<p>而这里<code>{{ }}</code>里的变量相当于一个形参，真正显示出来的是在我们渲染模板的 Python 文件里所传给它的值。</p>

<p>比如在下面的模板渲染代码里
<code>python
c = Context({'person_name':'LexusLee',
            'company': 'UESTC',
            'ship_date':datetime.date(2015,09,24),
            'ordered_warranty': False})
</code>
那么模板中的<code>person_name</code>最终显示的就是<code>LexusLee</code>。</p>

<h2>模板标签</h2>

<ol>
<li><code>{% if variable %} {% else %} {% endif %}</code>用于判断变量 variable 是否为真，为真则执行 else 标签前的内容，否则执行 else 便签内的内容，跟大部分编程语言中的条件语句用法一致。</li>
<li>同理<code>{% for %} {% endfor %}</code>的用法也和大部分编程语言中循环语句的用法一致。需要注意的是，每个 for 循环中还有一个成为<code>{% forloop %}</code>的模板变量，这个变量能提示一些循环进度信息相关的属性，关于这个变量的详细统发可以参照<a href="http://djangobook.py3k.cn/appendixF/">这一节</a>。</li>
<li><code>{% block content %} {% endblock %}</code>是用来处理<a href="http://djangobook.py3k.cn/appendixF/">模板继承</a>和重载的标签，来避免重复和冗余的代码。比如上述的实例模板( base.html )中，我希望在多个文件中都能显示 footer ，而不需要重复编码，故在该模板中写了<code>{% block footer %}</code>,而在另一个文件中只需要写
<code>html

{% extends "base.html" %}
{% block footer %}
&lt;a href="https://github.com/thehackercat"&gt;Github&lt;/a&gt;
{% endblock %}

</code>
这样所有的 footer 中都会有
<code>html
&lt;a href="https://github.com/thehackercat"&gt;Github&lt;/a&gt;
</code>
这行代码。而之前<code>{% block footer %} {% endblock %}</code>框中的代码将会被 overwrite ，也就是说<strong>对于重载模块，子模板可以重载这些部分，如果子模板不重载这些部分，则会按照默认的内容显示</strong>。</li>
</ol>


<p>4.<code>{% load staticfiles %}</code>用来加载静态资源，比如加载 CSS 、 JS 等静态文件时会用到。</p>

<p>5.<code>{# #}</code> 用于注释。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记1-- URLconf ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/14/django-learning1/"/>
    <updated>2015-11-14T20:12:37+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/14/django-learning1</id>
    <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg" alt="PRAY FOR PARIS " /></p>

<p>今天好像巴黎有点乱，希望明天太阳还会照常升起。</p>

<h2>简介</h2>

<p>Django 是一个由 Python 编写、开源并采用经典的 <a href="https://msdn.microsoft.com/en-us/library/ff649643.aspx">MVC</a> 设计模式的 Web Full Stack 应用框架。</p>

<p>在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：</p>

<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>


<p>而 Django 的编译方式比较特别，他的 MVC 控制器部分由 URLconf 来实现。</p>

<h2>URLconf</h2>

<p>当我在 Django 中编写完视图要想将其路由要页面上时，我发现了 Django 的 URLconf 路由机制，他实现了为相应的视图函数路由到相应界面的映射功能，也就是说，当用户访问了 <code>http://127.0.0.1:8000/hello/</code> 时， Django 调用了视图 views.py 中的 hello () 函数。</p>

<pre><code class="python ">from django.conf.urls import include, url
from mysite.views import hello,current_datetime,hours_ahead,letter

urlpatterns = [
url(r'^hello/$', hello),
url(r'^time/$', current_datetime),
url(r'^time/plus/(\d{1,2})/ $',hours_ahead),
]
</code></pre>

<p>可以看出， URLconf 的路由是通过正则表达式来匹配一个完整的 hello 的 URL ，这样的话就可以保证 诸如 /hello/foo/ 等 URL 不会被匹配到。
为了更深入了解 URLconf 路由的机制，我找到了类似的 <a href="https://github.com/tornadoweb/tornado">tornado</a> 框架来对比。</p>

<p>注意到在其中 web.py 文件中的第2964行开始的如下代码：</p>

<pre><code class="python ">application = tornado.web.Application([
    (r"/", MainHandler),
])
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(options.port)
tornado.ioloop.IOLoop.current( ).start( )
</code></pre>

<p>可以看出 torando 现把一个路由表作为一个参数，传给 Application 类的构造函数，接着创建了一个实例，然后再把这个实例传递给 http_server 。那么当客户端发起<code>get /</code>请求的时候, http server 接收到这个请求，在路由表中匹配 url pattern ，最后交给 MainHandler 去处理。</p>

<p>这个机制跟 Django 的 URLconf 是类似的，都是通过在 pattern 中匹配好对应的 url 接着传给处理器来负责从路由表中检索并路由。</p>

<p>这种方法<strong>松耦合</strong>了 http server 层和 web application 层，从而让开发者可以专注于 web 应用的逻辑层，很好！  ：D</p>

<h2>Django 如何处理请求</h2>

<p>所以了解过了 Django 的 URLconf 机制后，我开始思考他是如何处理请求的。</p>

<p>我开启服务器后在地址栏中输入 <code>http://127.0.0.1:8000/time/plus/20/</code></p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/urlconf1.png" alt="timeplus20" /></p>

<p>然后花现处理路线如下：</p>

<ol>
<li><p>进来的请求转入 /time/plus/20/ .</p></li>
<li><p>Django 通过在 ROOT_URLCONF 配置来决定根 URLconf .</p></li>
<li><p>Django 在 URLconf 中的所有 URL 模式中，查找第一个匹配 /time/plus/20/ 的条目。</p></li>
<li><p>如果找到匹配，将调用相应的视图函数</p></li>
<li><p>如果没找到匹配，则返回相应的 Http 状态码 (如图)</p></li>
<li><p>视图函数返回一个HttpResponse</p></li>
<li><p>Django 转换 HttpResponse 为一个适合的 HTTP response ，以 Web page 显示出来</p></li>
</ol>


<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-11-14%20%E4%B8%8B%E5%8D%889.27.45.png" alt="http_request" /></p>
]]></content>
  </entry>
  
</feed>
