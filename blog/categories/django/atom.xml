<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：django | TheHackerCat's blog]]></title>
  <link href="http://thehackercat.me/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://thehackercat.me/"/>
  <updated>2015-11-19T19:39:04+08:00</updated>
  <id>http://thehackercat.me/</id>
  <author>
    <name><![CDATA[TheHackerCat]]></name>
    <email><![CDATA[lexuscyborg103@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记2-- Templates ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/16/django-learning2/"/>
    <updated>2015-11-16T15:15:55+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/16/django-learning2</id>
    <content type="html"><![CDATA[<p>虽然 Django 中 Html 可以直接硬编码到 Python 中，但是这种行为并不利于前端开发人员进行维护。所以 Django 有了<a href="http://liquidmarkup.org/">流模板</a> ( Liquid Templates )。</p>

<h2>流模板基础</h2>

<p>举个例子，下面这个模板大致含括了 Django 模板的几个特性。</p>

<pre><code class="html">
{% load staticfiles %}
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;p&gt;Dear {{ person_name }},&lt;/p&gt;

    &lt;p&gt;Thanks for placing an order from {{ company }}. It's scheduled to ship on {{ ship_date|date:"F J,Y " }}.&lt;/p&gt;

    {% if ordered_warranty %}
    &lt;p&gt;Your warranty information will be included in the packaging.&lt;/p&gt;
    &lt;p&gt;Here are the items you've ordered: &lt;/p&gt;

    &lt;ul&gt;
    {% for item in item_list %}
        &lt;li&gt;
            {{ item }}
        &lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
    {% else %}
    &lt;p&gt;You didnt order a warranty, so you're on your own when the products inevitably stop working. &lt;/p&gt;
    {% endif %}

    &lt;p&gt;Sincerely,&lt;br /&gt;{{ company }}&lt;/p&gt;
    &lt;p&gt;footer&lt;/p&gt;
    {% block footer %}
    &lt;hr&gt;
    &lt;p&gt;Thanks for visiting my site.&lt;/p&gt;
    {% endblock %}
&lt;/body&gt;
&lt;/html&gt;

</code></pre>

<p>看出，模板是基于 Html 的，事实上它就是保存成一个 .html 文件，它跟我们所看到的 html 的区别就在于多了一些由 <code>{{ }}</code>括起来的变量以及由<code>{% %}</code>括起来的模板标签，此外变量还通过过滤器 <code>|</code>来对文本输出格式进行转换。</p>

<p>而这里<code>{{ }}</code>里的变量相当于一个形参，真正显示出来的是在我们渲染模板的 Python 文件里所传给它的值。</p>

<p>比如在下面的模板渲染代码里
<code>python
c = Context({'person_name':'LexusLee',
            'company': 'UESTC',
            'ship_date':datetime.date(2015,09,24),
            'ordered_warranty': False})
</code>
那么模板中的<code>person_name</code>最终显示的就是<code>LexusLee</code>。</p>

<h2>模板标签</h2>

<ol>
<li><code>{% if variable %} {% else %} {% endif %}</code>用于判断变量 variable 是否为真，为真则执行 else 标签前的内容，否则执行 else 便签内的内容，跟大部分编程语言中的条件语句用法一致。</li>
<li>同理<code>{% for %} {% endfor %}</code>的用法也和大部分编程语言中循环语句的用法一致。需要注意的是，每个 for 循环中还有一个成为<code>{% forloop %}</code>的模板变量，这个变量能提示一些循环进度信息相关的属性，关于这个变量的详细统发可以参照<a href="http://djangobook.py3k.cn/appendixF/">这一节</a>。</li>
<li><code>{% block content %} {% endblock %}</code>是用来处理<a href="http://djangobook.py3k.cn/appendixF/">模板继承</a>和重载的标签，来避免重复和冗余的代码。比如上述的实例模板( base.html )中，我希望在多个文件中都能显示 footer ，而不需要重复编码，故在该模板中写了<code>{% block footer %}</code>,而在另一个文件中只需要写
<code>html

{% extends "base.html" %}
{% block footer %}
&lt;a href="https://github.com/thehackercat"&gt;Github&lt;/a&gt;
{% endblock %}

</code>
这样所有的 footer 中都会有
<code>html
&lt;a href="https://github.com/thehackercat"&gt;Github&lt;/a&gt;
</code>
这行代码。而之前<code>{% block footer %} {% endblock %}</code>框中的代码将会被 overwrite ，也就是说<strong>对于重载模块，子模板可以重载这些部分，如果子模板不重载这些部分，则会按照默认的内容显示</strong>。</li>
<li><code>{% load staticfiles %}</code>用来加载静态资源，比如加载 CSS 、 JS 等静态文件时会用到。</li>
<li><code>{# #}</code> 用于注释。</li>
</ol>


<h2>如何在 Octopress 中生成包含 liquid 语句的代码</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记1-- URLconf ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/14/django-learning1/"/>
    <updated>2015-11-14T20:12:37+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/14/django-learning1</id>
    <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg" alt="PRAY FOR PARIS " /></p>

<p>今天好像巴黎有点乱，希望明天太阳还会照常升起。</p>

<h2>简介</h2>

<p>Django 是一个由 Python 编写、开源并采用经典的 <a href="https://msdn.microsoft.com/en-us/library/ff649643.aspx">MVC</a> 设计模式的 Web Full Stack 应用框架。</p>

<p>在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：</p>

<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>


<p>而 Django 的编译方式比较特别，他的 MVC 控制器部分由 URLconf 来实现。</p>

<h2>URLconf</h2>

<p>当我在 Django 中编写完视图要想将其路由要页面上时，我发现了 Django 的 URLconf 路由机制，他实现了为相应的视图函数路由到相应界面的映射功能，也就是说，当用户访问了 <code>http://127.0.0.1:8000/hello/</code> 时， Django 调用了视图 views.py 中的 hello () 函数。</p>

<pre><code class="python ">from django.conf.urls import include, url
from mysite.views import hello,current_datetime,hours_ahead,letter

urlpatterns = [
url(r'^hello/$', hello),
url(r'^time/$', current_datetime),
url(r'^time/plus/(\d{1,2})/ $',hours_ahead),
]
</code></pre>

<p>可以看出， URLconf 的路由是通过正则表达式来匹配一个完整的 hello 的 URL ，这样的话就可以保证 诸如 /hello/foo/ 等 URL 不会被匹配到。
为了更深入了解 URLconf 路由的机制，我找到了类似的 <a href="https://github.com/tornadoweb/tornado">tornado</a> 框架来对比。</p>

<p>注意到在其中 web.py 文件中的第2964行开始的如下代码：</p>

<pre><code class="python ">application = tornado.web.Application([
    (r"/", MainHandler),
])
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(options.port)
tornado.ioloop.IOLoop.current( ).start( )
</code></pre>

<p>可以看出 torando 现把一个路由表作为一个参数，传给 Application 类的构造函数，接着创建了一个实例，然后再把这个实例传递给 http_server 。那么当客户端发起<code>get /</code>请求的时候, http server 接收到这个请求，在路由表中匹配 url pattern ，最后交给 MainHandler 去处理。</p>

<p>这个机制跟 Django 的 URLconf 是类似的，都是通过在 pattern 中匹配好对应的 url 接着传给处理器来负责从路由表中检索并路由。</p>

<p>这种方法<strong>松耦合</strong>了 http server 层和 web application 层，从而让开发者可以专注于 web 应用的逻辑层，很好！  ：D</p>

<h2>Django 如何处理请求</h2>

<p>所以了解过了 Django 的 URLconf 机制后，我开始思考他是如何处理请求的。</p>

<p>我开启服务器后在地址栏中输入 <code>http://127.0.0.1:8000/time/plus/20/</code></p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/urlconf1.png" alt="timeplus20" /></p>

<p>然后花现处理路线如下：</p>

<ol>
<li><p>进来的请求转入 /time/plus/20/ .</p></li>
<li><p>Django 通过在 ROOT_URLCONF 配置来决定根 URLconf .</p></li>
<li><p>Django 在 URLconf 中的所有 URL 模式中，查找第一个匹配 /time/plus/20/ 的条目。</p></li>
<li><p>如果找到匹配，将调用相应的视图函数</p></li>
<li><p>如果没找到匹配，则返回相应的 Http 状态码 (如图)</p></li>
<li><p>视图函数返回一个HttpResponse</p></li>
<li><p>Django 转换 HttpResponse 为一个适合的 HTTP response ，以 Web page 显示出来</p></li>
</ol>


<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-11-14%20%E4%B8%8B%E5%8D%889.27.45.png" alt="http_request" /></p>
]]></content>
  </entry>
  
</feed>
