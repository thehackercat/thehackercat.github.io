<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TheHackerCat's Blog]]></title>
  <link href="http://thehackercat.me/atom.xml" rel="self"/>
  <link href="http://thehackercat.me/"/>
  <updated>2016-04-08T14:57:59+08:00</updated>
  <id>http://thehackercat.me/</id>
  <author>
    <name><![CDATA[TheHackerCat]]></name>
    <email><![CDATA[lexuscyborg103@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DRF 教程4 - 验证与授权]]></title>
    <link href="http://thehackercat.me/blog/2016/04/07/drf-tutorial4/"/>
    <updated>2016-04-07T09:52:33+08:00</updated>
    <id>http://thehackercat.me/blog/2016/04/07/drf-tutorial4</id>
    <content type="html"><![CDATA[<h2>验证与授权</h2>

<p>目前来看，我们的 API 并没有权限上的限制(即任何人都可以编辑或删除我们的 Movies )，这不是我们想要的。所以我们需要在 API 上做些限制以确保:</p>

<ul>
<li>Movies 与 Users 关联起来。</li>
<li>只有授权了的用户才能创建新的 Movies。</li>
<li>只有 Movies 的创建者才可以更新或删除它。</li>
<li>未授权的用户只能进行查看。</li>
</ul>


<!--more-->


<h3>在 models 中增加以下信息</h3>

<p>我们先把之前注释掉的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">director</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;celebrity&#39;</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;Movies&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">celebrity</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;male&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>关联导演类的注释解开，来看看多张表在生成的 api 里的关联性。</p>

<p>接着在 <code>models.py</code> 中的 Movies 类中加入以下代码来确定 Movies 的创建者:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">owner</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;auth.User&#39;</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;Movies&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后 <code>models.py</code> 代码为:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 举个栗子</span>
</span><span class='line'><span class="n">COUNTRY_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="s">&#39;US&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Asia&#39;</span><span class="p">,</span> <span class="s">&#39;Asia&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;CN&#39;</span><span class="p">,</span> <span class="s">&#39;CN&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;TW&#39;</span><span class="p">,</span> <span class="s">&#39;TW&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">TYPE_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Drama&#39;</span><span class="p">,</span> <span class="s">&#39;Drama&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Thriller&#39;</span><span class="p">,</span> <span class="s">&#39;Thriller&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Sci-Fi&#39;</span><span class="p">,</span> <span class="s">&#39;Sci-Fi&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="s">&#39;Romance&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Comedy&#39;</span><span class="p">,</span> <span class="s">&#39;Comedy&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">GENDER_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;male&#39;</span><span class="p">,</span> <span class="s">&#39;male&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;female&#39;</span><span class="p">,</span> <span class="s">&#39;female&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Movies</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">year</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 在 director 关联了 Movies 类 和 celecrity 类, 在第4章会用到 celebrity 类</span>
</span><span class='line'>    <span class="n">director</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;celebrity&#39;</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;movies&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 关联 User 类来确定 Movies 的创建者</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s">&#39;auth.User&#39;</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;movies&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">country</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">COUNTRY_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">TYPE_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">created</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ordering</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;created&#39;</span><span class="p">,)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">celebrity</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">gender</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">GENDER_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;male&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改完了模型，我们需要更新一下数据表。</p>

<p>通常来讲，我们会创建一个数据库 migration 来更新数据表，但是为了图省事儿，宝宝我索性删了整张 Movies 表直接重建！</p>

<p>在数据库中删除 douban_movies 表后在终端中执行以下命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py syncdb
</span></code></pre></td></tr></table></div></figure>


<p>接着我们可能会需要多个 User 来测试 API ，如果之前你没有创建 Django Super User 的话，用以下命令创建:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py createsuperuser
</span></code></pre></td></tr></table></div></figure>


<p>然后进入 <code>http://127.0.0.1/admin/</code> 界面，登录并找到  <code>/user/</code> 表，然后在里面手动创建 user 并赋予权限。</p>

<h3>为新增的模型增加 endpoints</h3>

<p>既然现在我们已经有了 users 模型和 celebrity 模型，那么现在需要做的就是在 <code>serializer.py</code> 中让他们在 API 中展现出来，加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">movies</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">PrimaryKeyRelatedField</span><span class="p">(</span><span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">queryset</span><span class="o">=</span><span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;username&#39;</span><span class="p">,</span> <span class="s">&#39;movies&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DirectorSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">movies</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">PrimaryKeyRelatedField</span><span class="p">(</span><span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">queryset</span><span class="o">=</span><span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">celebrity</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;name&#39;</span><span class="p">,</span> <span class="s">&#39;age&#39;</span><span class="p">,</span> <span class="s">&#39;gender&#39;</span><span class="p">,</span> <span class="s">&#39;movies&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为我们之前在 <code>models.py</code> 中添加了 <code>owner = models.ForeignKey('auth.User', related_name='movies')</code> 其中 <code>related_name</code> 设置了可以通过 User.movies 来逆向访问到 movies 表。所以在 <code>ModelSerializer</code> 类中我们需要在 fields 中添加一个 <code>movies</code> 来实现逆向访问。同理 <code>DirectorSerializer</code> 类中也进行相应修改。</p>

<p>接着，我们还需要在 <code>views.py</code> 中添加相应的视图。</p>

<p>为 User 添加只读 API ，使用 <code>ListAPIView</code> 和 <code>RetrieveAPIView</code></p>

<p>为 Director 添加读写 API ，使用 <code>ListCreateAPIView</code> 和 <code>RetrieveUpdateDestroyAPIView</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">UserList</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">ListAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">UserSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserDetail</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">RetrieveAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">UserSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DirectorList</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">ListCreateAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">celebrity</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">DirectorSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DirectorDetail</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">RetrieveUpdateDestroyAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">celebrity</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">DirectorSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，修改 <code>urls.py</code> 把视图关联起来，在 <code>urlpatterns</code> 中加入以下4个 patterns:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^users/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">UserList</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^users/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">UserDetail</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^directors/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">DirectorList</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^directors/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">DirectorDetail</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>把 Movies 和 Director 、 User 关联起来</h3>

<p>现在，如果我们新建一部 movie ，那它和 director 还有 user 是没有关联的，因为 director 和 user 信息是通过 request 接收到的，而不是通过序列器接收的，这意味着，数据库中收到 director 和 user 信息是没有(和 movies 存在)外键关系的。</p>

<p>而要让他们发生关系 ，我们的做法是在视图中重写 .perform_create() 方法。</p>

<p>.perform_create() 方法允许我们处理 request 或 requested URL 中的任何信息。</p>

<p>在 <code>MoviesList</code> 和 <code>MoviesDetail</code> 中添加以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">perform_create</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">serializer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">owner</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="p">,</span> <span class="n">director</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">celebrity</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样 <code>create()</code> 方法就能够在接收到 request.data 时将其传回给序列器里的 owner 和 director 了。</p>

<h3>更新序列器</h3>

<p>在视图中重写了 <code>.perform_create()</code> 方法后还需要更新下序列器才能实现他们之间的关联，在 <code>serializer.py</code> 中的 <code>MoviesSerializer</code> 类添加以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">owner</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ReadOnlyField</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s">&#39;owner.username&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">director</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">source</span><span class="o">=</span><span class="s">&#39;celebrity.name&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着在 <code>class Meta</code> 的 fields 中加入 owner 和 director :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>  <span class="n">model</span> <span class="o">=</span> <span class="n">Movies</span>
</span><span class='line'>    <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;director&#39;</span><span class="p">,</span> <span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">&#39;country&#39;</span><span class="p">,</span> <span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="s">&#39;rating&#39;</span><span class="p">,</span> <span class="s">&#39;owner&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>source 关键字负责控制在 fields 中展现的数据的源，它可以指向这个序列器实例的任意一个属性。</p>

<p>对 owner 属性，我们用的是 <code>ReadOnlyField</code> 在确保它始终是只读的，我们也可以用 <code>CharField(read_only=True)</code> 来等效替代，但是我嫌它太长了，其余的 Field 还有诸如 <code>CharField</code> 、 <code>BooleanField</code> 等，你可以在 <a href="http://www.django-rest-framework.org/api-guide/fields/">「这里」</a>查到。</p>

<h3>添加权限</h3>

<p>我们希望授权的用户才能新建、更新和删除 movies，所以需要添加权限管理的功能。</p>

<p>DRF 包含了一系列的 permission 类来实现权限管理，你可以在<a href="http://www.django-rest-framework.org/api-guide/permissions/">「这里」</a> 查到。</p>

<p>在这个栗子中，我们使用  <code>IsAuthenticatedOrReadOnly</code> 来确保授权的请求得到读写的权限，未授权的请求只有只读权限。</p>

<p>首先，在 <code>views.py</code> 中 import 以下模块:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">permissions</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着，在 <code>MoviesList</code> 和 <code>MoviesDetail</code> 中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">permission_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">permissions</span><span class="o">.</span><span class="n">IsAuthenticatedOrReadOnly</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>添加可浏览的授权 api</h3>

<p>如果你在浏览器中访问我们的 api Web 界面，你会发现我们没法创建新的 movies 了，因为在上一步我们设置了权限管理。</p>

<p>所以我需要在浏览器中添加用户登录来实现带界面的权限管理。(之所以说带界面是因为可以在终端中直接使用 httpie 来访问 api )</p>

<p>在 <code>restapi/urls.py</code> 中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">urlpatterns</span> <span class="o">+=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^api-auth/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;rest_framework.urls&#39;</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">namespace</span><span class="o">=</span><span class="s">&#39;rest_framework&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样通过在浏览器中访问 Web api 界面就能在右上角发现一个登录按钮，进行登录授权了。</p>

<h3>对象级权限</h3>

<p>之前提到要使 movies 可以被任何人访问，但是只能被创建者编辑，所以需要赋予其游客访问的权限以及创建者编辑权限。</p>

<p>下面我们新建一个 <code>permissions.py</code> 来详细解决这个权限问题:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">permissions</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">IsOwnerOrReadOnly</span><span class="p">(</span><span class="n">permissions</span><span class="o">.</span><span class="n">BasePermission</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    游客访问权限及创建者编辑权限</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">has_object_permission</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">view</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># 游客权限</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="ow">in</span> <span class="n">permissions</span><span class="o">.</span><span class="n">SAFE_METHODS</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># 编辑权限</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">obj</span><span class="o">.</span><span class="n">owner</span> <span class="o">==</span> <span class="n">request</span><span class="o">.</span><span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改 <code>views.py</code> 中 <code>MoviesDetail</code> 的 <code>permission_class</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">douban.permissions</span> <span class="kn">import</span> <span class="n">IsOwnerOrReadOnly</span>
</span><span class='line'>
</span><span class='line'><span class="n">permission_classes</span> <span class="o">=</span> <span class="p">(</span><span class="n">permissions</span><span class="o">.</span><span class="n">IsAuthenticatedOrReadOnly</span><span class="p">,</span>
</span><span class='line'>                      <span class="n">IsOwnerOrReadOnly</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>终于，我们完成了整个 api 授权的过程！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRF 教程3 - 基于类的视图]]></title>
    <link href="http://thehackercat.me/blog/2016/04/01/drf-tutoriaial3/"/>
    <updated>2016-04-01T16:39:23+08:00</updated>
    <id>http://thehackercat.me/blog/2016/04/01/drf-tutoriaial3</id>
    <content type="html"><![CDATA[<h2>基于类的视图</h2>

<p>基于类的视图比先前基于函数的视图的可重用性更强，可以更多快好省地 ( <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> )地写出简洁的代码。</p>

<!--more-->


<h3>把 API 用基于类的视图的方式重写</h3>

<p>编辑 <code>douban/views.py</code> 进行如下重写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">Http404</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">APIView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">status</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesList</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    罗列出所有的 Movies 或者 能新建一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_201_CREATED</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_400_BAD_REQUEST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesDetail</span><span class="p">(</span><span class="n">APIView</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    展示\更新或删除一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">Movies</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">Http404</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_400_BAD_REQUEST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>        <span class="n">movies</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_204_NO_CONTENT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>并更新 <code>douban/urls.py</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.urlpatterns</span> <span class="kn">import</span> <span class="n">format_suffix_patterns</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">MoviesList</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">MoviesDetail</span><span class="o">.</span><span class="n">as_view</span><span class="p">()),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">format_suffix_patterns</span><span class="p">(</span><span class="n">urlpatterns</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>重写完毕！</p>

<h3>使用 Mixins</h3>

<p>使用基于类的视图的一大好处是，我们可以使用各种 mixins</p>

<p>DRF 为我们提供了许多现成的 mixins ，方便我们像使用 model-backed API 一样构建 &ldquo;创建/获取/更新/删除&rdquo; API. 我们试着使用 Mixins 改写原先的 views</p>

<p>GenericAPIView 为我们提供了 views 核心的功能, 而 ListModelMixin 和 CreateModelMixin 为我们提供了 .list() 和 .create() 功能，我们将这些功能与 http 动作的 GET 和 POST 相绑定:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">mixins</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">generics</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesList</span><span class="p">(</span><span class="n">mixins</span><span class="o">.</span><span class="n">ListModelMixin</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">mixins</span><span class="o">.</span><span class="n">CreateModelMixin</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">generics</span><span class="o">.</span><span class="n">GenericAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">list</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样的, 我们使用GenericAPIView, RetrieveModelMixin, UpdateModelMixin和DestroyModelMixin改写views.py:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MoviesDetail</span><span class="p">(</span><span class="n">mixins</span><span class="o">.</span><span class="n">RetrieveModelMixin</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">mixins</span><span class="o">.</span><span class="n">UpdateModelMixin</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">mixins</span><span class="o">.</span><span class="n">DestroyModelMixin</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">generics</span><span class="o">.</span><span class="n">GenericAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">destroy</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可看出，这三个 Mixin 分别对应 GET/PUT/DELETE 动作。</p>

<h3>使用通用类视图</h3>

<p>使用 Mixin 来重写 views 减少了代码量，但是还可以更少！</p>

<p>那就是使用「通用类视图」—「generic class based views」</p>

<p>同 Django 一样，DRF为我们提供了现成的通用类视图，接下来我们使用这些通用类视图再一次修改原有的 <code>views.py</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">generics</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesList</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">ListCreateAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesDetail</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">RetrieveUpdateDestroyAPIView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MoviesSerializer</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，代码已经非常的精简了，不过坏处在于，你不知道他具体执行了什么。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRF 教程2 - 请求与相应]]></title>
    <link href="http://thehackercat.me/blog/2016/04/01/drf-tutoriaial2/"/>
    <updated>2016-04-01T16:39:18+08:00</updated>
    <id>http://thehackercat.me/blog/2016/04/01/drf-tutoriaial2</id>
    <content type="html"><![CDATA[<h2>请求与响应</h2>

<h3>请求对象</h3>

<p>DRF 提供了一个 <code>request</code> 对象，它继承自 <code>HttpRequest</code> 并且提供了更丰富的对 request 的解析处理的方法。其中最核心的是 <code>request</code> 对象的 request.data 属性，它看起来和 Django 的 request.POST 相似，但是在处理 Web API 上更强大些。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">POST</span>  <span class="c"># Only handles form data.  Only works for &#39;POST&#39; method.</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="n">data</span>  <span class="c"># Handles arbitrary data.  Works for &#39;POST&#39;, &#39;PUT&#39; and &#39;PATCH&#39; methods.</span>
</span></code></pre></td></tr></table></div></figure>


<p>request.data 相比于 request.POST 能够处理 api 中的 「POST」、「PUT」、「PATCH」等请求。</p>

<!--more-->


<h3>返回对象</h3>

<p>DRF 也提供了一个 <code>response</code> 对象，它能把未 render 的对象(数据)通过一定方式转化为正确的数据格式返回给客户端。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>  <span class="c"># Renders to content type as requested by the client.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>状态码</h3>

<p>如果单独使用 Http 状态码的话代码会很难度，比如像我这种万年记不住几个很奇怪的状态码的人，在看到它们的时候还要 google 这就很伤！所以 DRF 提供了一个可读性更好的状态码标识，比如 <code>HTTP_400_BAD_REQUEST</code>  ，是不是一下就看出来这是 bad request 了。这些状态码都封装在了 <code>status</code> 模块里，使用它们比使用纯数字的 Http 状态码更安逸。</p>

<h3>封装的 API views</h3>

<p>DRF 提供了两个封装好的 API views</p>

<ol>
<li><code>@api_view</code>  这个装饰器用于基于函数的视图</li>
<li><code>APIView</code>  这个类用于基于类的视图</li>
</ol>


<p>这两个 views 提供了一些函数如确保在视图中接收到 <code>request</code> 实例和自动在 <code>response</code> 对象中添加 context 使其能够被 render 。</p>

<h3>开始撸代码吧</h3>

<p>紧接着<a href="">上节的教程</a>我们要在 views 中添加一些新功能</p>

<p>先把 <code>JSONResponse</code> 扔掉，这东西太难用了，我们不再需要它。</p>

<p>接着在 <code>douban/views.py</code> 中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">status</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@api_view</span><span class="p">([</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="s">&#39;POST&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">movies_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    罗列出所有的 Movies 或者 能新建一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_201_CREATED</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_400_BAD_REQUEST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@api_view</span><span class="p">([</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="s">&#39;PUT&#39;</span><span class="p">,</span> <span class="s">&#39;DELETE&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">def</span> <span class="nf">movies_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    展示\更新或删除一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">Movies</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_404_NOT_FOUND</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;PUT&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_400_BAD_REQUEST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;DELETE&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="n">status</span><span class="o">.</span><span class="n">HTTP_204_NO_CONTENT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用上了 @api_view 后代码比之前更简洁了。</p>

<p>需要注意的是: 我们不再指明 request 和 response 中的内容类型。 request.DATA 即可用来处理 json 数据类型类型, 也可以处理 yaml 或其他数据类型。我们只需要在 response 中指定要返回的数据， DRF 能根据不同情况，自动在 response 中呈现正确的数据类型。</p>

<h3>在 URLs 中添加可选后缀</h3>

<p>现在我们的 response 对象不是像教程1中的对数据类型进行强制要求了。</p>

<p>并且对 url 也不是硬连接的。</p>

<p>那么就可以定制可选的 url 后缀，如:</p>

<p>通过 <a href="http://example.com/api/items/4/.json">http://example.com/api/items/4/.json</a> 来访问 Web API。</p>

<p>我们所需做的就是在 views 中添加 <code>format</code> 关键字:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">movies_list</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">movies_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">,</span> <span class="n">format</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在 <code>douban/urls.py</code> 中加入 <code>format_suffix_patterns</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.urlpatterns</span> <span class="kn">import</span> <span class="n">format_suffix_patterns</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">movies_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">movies_detail</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">format_suffix_patterns</span><span class="p">(</span><span class="n">urlpatterns</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>不过，一般情况下，我们耶不会用到那么奇葩的 url 访问方式，以上的例子只是说明了用奇葩的 url 方式也是可以访问的 ：D</p>

<h3>再测试下我们的 API</h3>

<p>在终端中输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>接着来浏览器中访问 <code>http://127.0.0.1/dbmovies/</code></p>

<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest2.png" alt="apitest2" /></p>

<p>如果出现如图所示的 api 则说明 Web api 返回成功。</p>

<p>然后我们可以在这个页面中 POST 一个新的 Movies :</p>

<p>在表单中选择 Media type 为 json 格式并输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Carol&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;year&quot;</span><span class="p">:</span> <span class="s2">&quot;2015&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;country&quot;</span><span class="p">:</span> <span class="s2">&quot;US&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Romance&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;rating&quot;</span><span class="p">:</span> <span class="s2">&quot;8.3&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest3.png" alt="apipost" /></p>

<p>如果返回如下图所示，则说明 POST 成功！</p>

<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest4.png" alt="postsuccess" /></p>

<p>你或许会注意到，每个访问这个页面的人都能 POST 一个新的 Movies ，这是不合理的，所以需要赋予权限，这个我们日后再说。</p>

<h3>可浏览性</h3>

<p>Because the API chooses the content type of the response based on the client request, it will, by default, return an HTML-formatted representation of the resource when that resource is requested by a web browser. This allows for the API to return a fully web-browsable HTML representation.</p>

<p>Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API.</p>

<p>See the <a href="http://www.django-rest-framework.org/topics/browsable-api/">browsable api</a> topic for more information about the browsable API feature and how to customize it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRF 教程1 - 序列化]]></title>
    <link href="http://thehackercat.me/blog/2016/04/01/drf-tutorial1/"/>
    <updated>2016-04-01T14:27:27+08:00</updated>
    <id>http://thehackercat.me/blog/2016/04/01/drf-tutorial1</id>
    <content type="html"><![CDATA[<h2>序列化</h2>

<h3>环境搭建</h3>

<p>首先我们先新建一个 <code>restapi</code>  项目并安装上 django-rest-framework (DRF) 环境</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install djangorestframework
</span><span class='line'><span class="nv">$ </span>python manage.py startnewproject restapi
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>restapi
</span><span class='line'><span class="nv">$ </span>python manage.py startnewapp douban
</span></code></pre></td></tr></table></div></figure>


<p>接着，我们需要在 <code>setting.py</code> 里的加入如下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;rest_framework&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;douban&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>建立模型</h3>

<p>由于我炒鸡喜欢看电影，所以仿着  <code>douban-API</code> 来做个简易的豆瓣电影的 rest-api 。</p>

<p>所以我们就用这个「仿豆瓣电影 api 」来作为栗子开始教程吧！</p>

<p>编辑 <code>douban/models.py</code> 文件并加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 举个栗子</span>
</span><span class='line'><span class="n">COUNTRY_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="s">&#39;US&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Asia&#39;</span><span class="p">,</span> <span class="s">&#39;Asia&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;CN&#39;</span><span class="p">,</span> <span class="s">&#39;CN&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;TW&#39;</span><span class="p">,</span> <span class="s">&#39;TW&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">TYPE_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Drama&#39;</span><span class="p">,</span> <span class="s">&#39;Drama&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Thriller&#39;</span><span class="p">,</span> <span class="s">&#39;Thriller&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Sci-Fi&#39;</span><span class="p">,</span> <span class="s">&#39;Sci-Fi&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="s">&#39;Romance&#39;</span> <span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;Comedy&#39;</span><span class="p">,</span> <span class="s">&#39;Comedy&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">GENDER_CHOICES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;male&#39;</span><span class="p">,</span> <span class="s">&#39;male&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;female&#39;</span><span class="p">,</span> <span class="s">&#39;female&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">movies</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">year</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># 在 director 关联了 movies 类 和 celecrity 类, 在第4章会用到 celebrity 类</span>
</span><span class='line'>    <span class="c"># director = models.ForeignKey(&#39;celebrity&#39;, related_name=&#39;movies&#39;)</span>
</span><span class='line'>    <span class="n">country</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">COUNTRY_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">TYPE_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">created</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">ordering</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;created&#39;</span><span class="p">,)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># class celebrity(models.Model):</span>
</span><span class='line'><span class="c">#     name = models.CharField(max_length=100, blank=True, default=&#39;&#39;)</span>
</span><span class='line'><span class="c">#     age = models.IntegerField()</span>
</span><span class='line'><span class="c">#     gender = models.CharField(choices=GENDER_CHOICES, default=&#39;男&#39;, max_length=20)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着在终端中运行:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py makemigrations douban
</span><span class='line'><span class="nv">$ </span>python manage.py migrate
</span><span class='line'><span class="nv">$ </span>python manage.py syncdb
</span></code></pre></td></tr></table></div></figure>


<p>来创建一个新的 migrations 并在数据库中生成表。</p>

<h3>创建序列化类</h3>

<p>在开始构建 Web API 时，我们首先要做的就是提供对 <code>movies</code> 实例的序列化和反序列化(即对序列化后的实例进行「解码」)，这样才能生成可供浏览的 <code>json</code> 格式的 api 。我们可以通过声明「序列器」(一个和 Django 表单十分类似的玩意儿)来做到这一点。</p>

<p>在 <code>restapi</code> 目录中创建一个 <code>serializer.py</code> 文件，加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">movies</span><span class="p">,</span> <span class="n">COUNTRY_CHOICES</span><span class="p">,</span> <span class="n">TYPE_CHOICES</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MoviesSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">pk</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">read_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">allow_blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">year</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">country</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">COUNTRY_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;US&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="n">TYPE_CHOICES</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;Romance&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        根据接收到的 validated_data 创建一个 movies 实例</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="o">**</span><span class="n">validated_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        根据接收到的 validated_data 更新并返回一个 movies 实例</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">year</span><span class="p">)</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">country</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">country</span><span class="p">)</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">rating</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rating&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">rating</span><span class="p">)</span>
</span><span class='line'>        <span class="n">instance</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>序列器的第一个部分定义了要进行序列化/反序列化的字段。</p>

<p>create() 和 update() 方法定义了符合规范的 movies 实例的创建和更新的方法。</p>

<p>序列器非常类似于 Django <code>Form</code> 表单，它包含了几种对字段常见的验证标识符，如 <code>required</code> 、 <code>max_length</code> 、 <code>default</code> 等。这些标识符实现的功能类似于 Django 表单，就不详细解释了。</p>

<p>所以序列器实现了以下两个功能:</p>

<ul>
<li>选择相应的模型</li>
<li>选择要展现的字段(验证后的)</li>
</ul>


<p>我们也可以通过使用 <code>ModelSerializer</code> 多快好省地的构建序列器，这个我们日后再说。</p>

<h3>开始使用序列器</h3>

<p>在开始项目之前，我们先熟悉下序列器，在终端中启动 Django shell :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py shell
</span></code></pre></td></tr></table></div></figure>


<p>输入以下代码来创建2个 Movies 实例</p>

<p>「荒野猎人」和「蝙蝠侠爱上超人」</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.renderers</span> <span class="kn">import</span> <span class="n">JSONRenderer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.parsers</span> <span class="kn">import</span> <span class="n">JSONParser</span>
</span><span class='line'>
</span><span class='line'><span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;The Revenant&#39;</span><span class="p">,</span> <span class="n">year</span><span class="o">=</span><span class="s">&#39;2015&#39;</span><span class="p">,</span> <span class="n">country</span><span class="o">=</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;Drama&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="o">=</span><span class="mf">7.9</span><span class="p">)</span>
</span><span class='line'><span class="n">movies</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="s">&#39;Batman v Superman: Dawn of Justice&#39;</span><span class="p">,</span>  <span class="n">year</span><span class="o">=</span><span class="s">&#39;2016&#39;</span><span class="p">,</span> <span class="n">country</span><span class="o">=</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="n">rating</span><span class="o">=</span><span class="mf">6.7</span><span class="p">)</span>
</span><span class='line'><span class="n">movies</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后将其中一个实例序列化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">)</span>
</span><span class='line'><span class="n">serializer</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'>
</span><span class='line'><span class="c">#{&#39;rating&#39;: u&#39;7.9&#39;, &#39;title&#39;: u&#39;The Revenant&#39;, &#39;country&#39;: &#39;US&#39;, &#39;year&#39;: u&#39;2015&#39;, &#39;pk&#39;: None, &#39;type&#39;: &#39;Drama&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着我们将以上数据转换为 JSON 格式，实现序列化</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">content</span> <span class="o">=</span> <span class="n">JSONRenderer</span><span class="p">()</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">content</span>
</span><span class='line'>
</span><span class='line'><span class="c">#{&quot;pk&quot;:null,&quot;title&quot;:&quot;The Revenant&quot;,&quot;year&quot;:&quot;2015&quot;,&quot;country&quot;:&quot;US&quot;,&quot;type&quot;:&quot;Drama&quot;,&quot;rating&quot;:&quot;7.9&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>反序列化也类似，通过解析 Python 数据流并将数据流"引入"实例中即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.utils.six</span> <span class="kn">import</span> <span class="n">BytesIO</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span> <span class="o">=</span> <span class="n">BytesIO</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="n">JSONParser</span><span class="p">()</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span><span class='line'><span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">()</span>
</span><span class='line'><span class="c"># True</span>
</span><span class='line'><span class="n">serializer</span><span class="o">.</span><span class="n">validated_data</span>
</span><span class='line'><span class="c">#OrderedDict([(u&#39;title&#39;, u&#39;The Revenant&#39;), (u&#39;year&#39;, u&#39;2015&#39;), (u&#39;country&#39;, &#39;US&#39;), (u&#39;type&#39;, &#39;Drama&#39;), (u&#39;rating&#39;, Decimal(&#39;7.9&#39;))])</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见, serializer和django form 有多么相似, 当我们写view时, 这一相似性会更加明显.</p>

<p>当我们输入参数many=True时, serializer还能序列化queryset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">(),</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">serializer</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'><span class="p">[</span><span class="n">OrderedDict</span><span class="p">([(</span><span class="s">&#39;pk&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">u&#39;Batman v Superman: Dawn of Justice&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">u&#39;2016&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">,</span> <span class="s">&#39;US&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="s">&#39;Romance&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;rating&#39;</span><span class="p">,</span> <span class="s">u&#39;6.7&#39;</span><span class="p">)]),</span> <span class="n">OrderedDict</span><span class="p">([(</span><span class="s">&#39;pk&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">u&#39;The Revenant&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">u&#39;2015&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;country&#39;</span><span class="p">,</span> <span class="s">&#39;US&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="s">&#39;Drama&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;rating&#39;</span><span class="p">,</span> <span class="s">u&#39;7.9&#39;</span><span class="p">)])]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用更高级的 ModelSerializers</h3>

<p>接着如果你按照官网的教程走下去，你会发现上面的 <code>serializer.py</code> 是个代码冗杂的序列器，这不符合 Python 的风格。</p>

<p>所以我们要做的就是简化代码。</p>

<p>DRF 提供了更为简便的 <code>ModelSerializer</code> 类可以解决这个问题。</p>

<p>所以我们修改之前的 <code>serializer.py</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MoviesSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">Movies</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="s">&#39;year&#39;</span><span class="p">,</span> <span class="s">&#39;country&#39;</span><span class="p">,</span> <span class="s">&#39;type&#39;</span><span class="p">,</span> <span class="s">&#39;rating&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种模式的序列器可以很方便地检查 fields 中的每个字段</p>

<p>然后在终端中打开 Django shell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py shell
</span></code></pre></td></tr></table></div></figure>


<p>输入以下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'><span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">serializer</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c">#MoviesSerializer():</span>
</span><span class='line'>    <span class="nb">id</span> <span class="o">=</span> <span class="n">IntegerField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&#39;ID&#39;</span><span class="p">,</span> <span class="n">read_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">CharField</span><span class="p">(</span><span class="n">allow_blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="n">year</span> <span class="o">=</span> <span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">country</span> <span class="o">=</span> <span class="n">ChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="p">((</span><span class="s">&#39;US&#39;</span><span class="p">,</span> <span class="s">&#39;US&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Asia&#39;</span><span class="p">,</span> <span class="s">&#39;Asia&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;CN&#39;</span><span class="p">,</span> <span class="s">&#39;CN&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;TW&#39;</span><span class="p">,</span> <span class="s">&#39;TW&#39;</span><span class="p">)),</span> <span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">type</span> <span class="o">=</span> <span class="n">ChoiceField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="p">((</span><span class="s">&#39;Drama&#39;</span><span class="p">,</span> <span class="s">&#39;Drama&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Thriller&#39;</span><span class="p">,</span> <span class="s">&#39;Thriller&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Sci-Fi&#39;</span><span class="p">,</span> <span class="s">&#39;Sci-Fi&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Romance&#39;</span><span class="p">,</span> <span class="s">&#39;Romance&#39;</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;Comedy&#39;</span><span class="p">,</span> <span class="s">&#39;Comedy&#39;</span><span class="p">)),</span> <span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rating</span> <span class="o">=</span> <span class="n">DecimalField</span><span class="p">(</span><span class="n">decimal_places</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">max_digits</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>注: <code>ModelSerializer</code> 类仅仅是创建 <code>serializer</code> 类的一个快捷方法，它除了实现以下两种方法外并没有其余的功能:</p>

<ul>
<li>声明需要展现的字段</li>
<li>定义  <code>create()</code> 和 <code>update()</code> 方法</li>
</ul>


<h3>使用 Django views 编写序列器视图</h3>

<p>为了更好理解序列器，我们不使用 DRF 的其他特性，仅仅用 Django views 模式来编写序列器的视图。</p>

<p>我们会创建一个 HttpResponse 的子类，这样就能将数据以 json 格式返回。</p>

<p>编辑 <code>douban/views.py</code> 加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.views.decorators.csrf</span> <span class="kn">import</span> <span class="n">csrf_exempt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.renderers</span> <span class="kn">import</span> <span class="n">JSONRenderer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.parsers</span> <span class="kn">import</span> <span class="n">JSONParser</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JSONResponse</span><span class="p">(</span><span class="n">HttpResponse</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    将数据转为 JSON 格式的 HttpResponse 子类</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=</span> <span class="n">JSONRenderer</span><span class="p">()</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;content_type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;application/json&#39;</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">JSONResponse</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>讲道理的话，我们 api 的根目录应该能罗列出所有的 Movies 或者 能新建一个 Movies</p>

<p>并且还需要一个用于展示、更新和删除 Movies 的 views</p>

<p>编辑 <code>douban/views.py</code> 加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.views.decorators.csrf</span> <span class="kn">import</span> <span class="n">csrf_exempt</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.renderers</span> <span class="kn">import</span> <span class="n">JSONRenderer</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework.parsers</span> <span class="kn">import</span> <span class="n">JSONParser</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.models</span> <span class="kn">import</span> <span class="n">Movies</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban.serializer</span> <span class="kn">import</span> <span class="n">MoviesSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JSONResponse</span><span class="p">(</span><span class="n">HttpResponse</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    将数据转为 JSON 格式的 HttpResponse 子类</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">content</span> <span class="o">=</span> <span class="n">JSONRenderer</span><span class="p">()</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;content_type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;application/json&#39;</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">JSONResponse</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">movies_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    罗列出所有的 Movies 或者 能新建一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">JSONParser</span><span class="p">()</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">201</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@csrf_exempt</span>
</span><span class='line'><span class="k">def</span> <span class="nf">movies_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    展示\更新或删除一个 Movies</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span> <span class="o">=</span> <span class="n">Movies</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">Movies</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">404</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">movies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;PUT&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">JSONParser</span><span class="p">()</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>        <span class="n">serializer</span> <span class="o">=</span> <span class="n">MoviesSerializer</span><span class="p">(</span><span class="n">snippet</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">serializer</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">JSONResponse</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elif</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;DELETE&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">movies</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">status</span><span class="o">=</span><span class="mi">204</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我不是很弄明白这里关掉 csrf 的意义，那不如直接就不用 csrf 不就好了？</p>

<p>不管了，先放着，以后回来看 ( 吐舌头</p>

<p>最后修改 <code>douban/url.py</code> 导入相应的视图</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">douban</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">movies_list</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">movies_detail</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>并在 <code>restapi/url.py</code> 中 include 一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span><span class="p">,</span> <span class="n">include</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;douban.urls&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样 url 和 views 就绑定好了。</p>

<h3>测试 Web API</h3>

<p>在终端中输入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python manage.py runserver
</span></code></pre></td></tr></table></div></figure>


<p>接着来浏览器中访问 <code>http://127.0.0.1/dbmovies/</code></p>

<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest.png" alt="apitest" /></p>

<p>如果出现如图所示的 api 则说明 Web api 返回成功。</p>

<p>(顺便安利一个 chrome 插件 — <a href="https://www.baidufe.com/fehelper">FeHelper</a> 可以自动格式化 JSON 代码)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django REST Framework 快速上手]]></title>
    <link href="http://thehackercat.me/blog/2016/03/29/django-rest-framework/"/>
    <updated>2016-03-29T15:43:36+08:00</updated>
    <id>http://thehackercat.me/blog/2016/03/29/django-rest-framework</id>
    <content type="html"><![CDATA[<h2>Django REST Framework 快速上手</h2>

<h3>背景</h3>

<p>这几天正好在研究 RESTful 的方式来写 API，然后上手 Django REST 框架。</p>

<p>Django REST Framework (以下简称 DRF )是一个轻量级的库，熟悉 Django 的话可以很容易的用它来构建 Web API。</p>

<!--more-->


<h3>安装前提</h3>

<p>Django REST Framework 安装需要以下前提:</p>

<ul>
<li>Python (2.7, 3.2, 3.3, 3.4, 3.5)</li>
<li>Django (1.7+, 1.8, 1.9)</li>
</ul>


<p>我自己的环境是:</p>

<ul>
<li>Python 2.7.10</li>
<li>Django 1.8.2

<h3>安装配置</h3>

<p>安装 DRF 需要用到 <code>pip</code> 命令</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install djangorestframework
</span><span class='line'>pip install markdown  # Markdown support for the browsable API.
</span><span class='line'>pip install django-filter # Filtering support</span></code></pre></td></tr></table></div></figure>


<p>或者在 GitHub 上 clone 它</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:tomchristie/django-rest-framework.git</span></code></pre></td></tr></table></div></figure>


<p>接着在 Django Project 根目录的 <code>setting.py</code> 文件中的 <code>INSTALLED_APPS</code> 加入 <code>'rest_framework'</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="s">&#39;rest_framework&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你要使用 DRF 的 browsable API 的话，你可能还需要添加 REST 框架的登录登出视图 ( views )，辣么需要在 <code>url.py</code> 文件中加入以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^api-auth/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;rest_framework.urls&#39;</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="s">&#39;rest_framework&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>注: 这个 URL 地址可以是任意的，但是必须 include <code>'rest_framework.urls'</code> 和 <code>namespace='rest_framework'</code> 。</p>

<h3>举个栗子</h3>

<p>现在我们来看一下一个简单的用 DRF 来构建一个模型支持较好的 API 的栗子。</p>

<p>任何一个对 REST 框架的全局设置都被放在 <code>REST_FRAMEWORK</code> 的模块内，所以你需要在 <code>settings.py</code> 文件中添加以下代码来通过 <code>REST_FRAMEWORK</code> 入口进行全局设置:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">REST_FRAMEWORK</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="c"># Use Django&#39;s standard `django.contrib.auth` permissions,</span>
</span><span class='line'>    <span class="c"># or allow read-only access for unauthenticated users.</span>
</span><span class='line'>    <span class="s">&#39;DEFAULT_PERMISSION_CLASSES&#39;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s">&#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以构建 API 了，编辑 Django 项目根目录的 <code>url.py</code> 文件:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span><span class="p">,</span> <span class="n">include</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">User</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">routers</span><span class="p">,</span> <span class="n">serializers</span><span class="p">,</span> <span class="n">viewsets</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Serializers define the API representation.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">HyperlinkedModelSerializer</span><span class="p">):</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span><span class='line'>        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
</span><span class='line'>        <span class="n">fields</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;url&#39;</span><span class="p">,</span> <span class="s">&#39;username&#39;</span><span class="p">,</span> <span class="s">&#39;email&#39;</span><span class="p">,</span> <span class="s">&#39;is_staff&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ViewSets define the view behavior.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UserViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="o">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">UserSerializer</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Routers provide an easy way of automatically determining the URL conf.</span>
</span><span class='line'><span class="n">router</span> <span class="o">=</span> <span class="n">routers</span><span class="o">.</span><span class="n">DefaultRouter</span><span class="p">()</span>
</span><span class='line'><span class="n">router</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s">r&#39;users&#39;</span><span class="p">,</span> <span class="n">UserViewSet</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wire up our API using automatic URL routing.</span>
</span><span class='line'><span class="c"># Additionally, we include login URLs for the browsable API.</span>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">router</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^api-auth/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;rest_framework.urls&#39;</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="s">&#39;rest_framework&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>解释一下，</p>

<p>每个 <code>xxxSerializer</code> 都要继承 <code>ModelSerializer</code> 来选择模型和模型字段。</p>

<p>UserSerializer 类继承了更符合 RESTful 设计的 <code>HyperlinkedModelSerializer</code> 超链接模型 Serializer 类，它和普通的 <code>ModelSerializer</code> 类有以下区别:</p>

<ul>
<li>缺省状态下不包含 pk 字段</li>
<li>具有一个 url 字段，即HyperlinkedIdentityField类型</li>
<li>用HyperlinkedRelatedField表示关系，而非PrimaryKeyRelatedField</li>
</ul>


<p>然后在 <code>class Meta</code> 中选择模型和要展现的模型元素</p>

<p><code>ViewSet</code> 用来定义 View 的行为，和 Django 的 views 类似，用来处理 API 的 read 、write、 update 等方法(而 Django views 则处理 http 的 GET 和 POST )</p>

<p>在 ViewSet 实例化之后，通过 <code>Router</code> 类，最终将 URL 和 ViewSet 方法绑定起来。</p>

<p>ok，现在你可以通过在浏览器中访问 <code>http://127.0.0.1:8000/</code> 来查看你的 &lsquo;users&rsquo; API 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Ubuntu 下搭建 uWSGI + Nginx + Django]]></title>
    <link href="http://thehackercat.me/blog/2016/02/27/nginx-uwsgi-django/"/>
    <updated>2016-02-27T21:04:07+08:00</updated>
    <id>http://thehackercat.me/blog/2016/02/27/nginx-uwsgi-django</id>
    <content type="html"><![CDATA[<h3>背景 :</h3>

<p>公司要求用 Django 做些项目，之前按网上教程搭环境的时候就遇到很多问题，感觉有些教程都是有误的，今天用 uWSGI 开多线程的时候服务器报了 HTTP 500 的错( Internal Server Error )，然后就一直连不上去了。所以按<a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html">官网的教程</a>重新配置一遍，把出现的问题记录下来。</p>

<!--more-->


<h3>准备工作</h3>

<h4>概况</h4>

<p>一个 Web 服务器能加载 ( Html , images , CSS 等静态文件)，但是它不能直接跑 Django 应用 (对于动态的请求无法处理) ，它需要某些工具来支持 Django 应用的运行，从而使 服务器能够接受客户端的请求，处理，并返回请求。s</p>

<p>这时，我们就需要一个服务器网关接口 &ndash; WSGI ! WSGI 是一种Web服务器网关接口。它是一个 Web 服务器（如 nginx）与应用服务器（如 uWSGI 服务器）通信的一种规范</p>

<p>而 uWSGI 是一个Web服务器，它实现了 WSGI 协议、 uwsgi 、 http 等协议。</p>

<p>nginx 中 <code>HttpUwsgiModule</code> 的作用是与 uWSGI 服务器进行数据交换。</p>

<p>所以这套配置的实现原理是将 nginx 作为服务器最前端，它将接收 Web 的所有请求，统一管理请求。nginx 把所有静态请求自己来处理（这是 Nginx 的强项）。然后，Nginx 将所有非静态请求通过 uwsgi 传递给 Django ，由 Django 来进行处理，从而完成一次 Web 请求。</p>

<p>配置 uWSGI + nginx + Django 即实现以下4个链接，在下文，我们会一步步进行链接。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uwsgi &lt;-&gt; Django</span></code></pre></td></tr></table></div></figure>


<h4>Python</h4>

<p>Ubuntu 14.04 自带了 Python2.7.6</p>

<p>你也可以通过</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python2.7 python2.7-dev</span></code></pre></td></tr></table></div></figure>


<p>来安装最新版本的 Python2.7.11</p>

<h4>Python-pip</h4>

<p>pip 是 Python 的包管理工具，建议 Python 的包都用  pip 进行管理。</p>

<p>通过以下命令安装  pip  :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-pip</span></code></pre></td></tr></table></div></figure>


<h4>Django</h4>

<p>通过以下命令安装 Django 并创建一个新的项目，然后进入到项目根目录 :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install Django
</span><span class='line'>django-admin.py startproject mysite
</span><span class='line'>cd mysite</span></code></pre></td></tr></table></div></figure>


<h4>关于域名和端口</h4>

<p>在这篇 blog 中，我们把调试域名定为 127.0.0.1，你可以用自己的域名或本机 ip 地址来替代它。</p>

<p>并且，我们用 8000 端口作为 web 调试地址端口，这个端口与大部分 web 服务器的端口不重叠，当然你也可以自行修改调试地址的端口。</p>

<h3>安装配置 uWSGI</h3>

<h4>安装</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo pip install uwsgi</span></code></pre></td></tr></table></div></figure>


<p>用 <code>pip</code> 安装 uwsgi 最为方便，因为如果你用 <code>apt-get install</code> 来安装 uwsgi 的话，你需要在 Python 搜索路径中添加入 uwsgi 模块。</p>

<h4>测试 uwsgi</h4>

<p>在刚刚的 mysite 目录下新建一个 Python 文件 <code>test.py</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># test.py</span>
</span><span class='line'><span class="k">def</span> <span class="nf">application</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
</span><span class='line'>    <span class="n">start_response</span><span class="p">(</span><span class="s">&#39;200 OK&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;Content-Type&#39;</span><span class="p">,</span><span class="s">&#39;text/html&#39;</span><span class="p">)])</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">b</span><span class="s">&quot;Hello World&quot;</span><span class="p">]</span> <span class="c"># python3</span>
</span><span class='line'>  <span class="c">#return [&quot;Hello World&quot;] # python2</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着运行 uWSGI 命令:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">http</span> <span class="p">:</span><span class="mi">8000</span> <span class="o">--</span><span class="n">wsgi</span><span class="o">-</span><span class="nb">file</span> <span class="n">test</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：在 <code>http</code> 与 <code>:8000</code> 之间有一个空格！</p>

<p>参数含义：</p>

<ul>
<li><code>http :8000</code>：使用 http 协议，8000端口</li>
<li><code>wsgi-file test.py</code> : 加载指定文件 test.py</li>
</ul>


<p>接着在浏览器中输入以下 url :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">8000</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果出现了 &lsquo;Hello World!&rsquo; 那说明 uWSGI 安装成功，以下链接是成功的 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">the</span> <span class="n">web</span> <span class="n">client</span> <span class="o">&lt;-&gt;</span> <span class="n">uWSGI</span> <span class="o">&lt;-&gt;</span> <span class="n">Django</span>
</span></code></pre></td></tr></table></div></figure>


<h4>测试 Django 项目</h4>

<p>现在我们用 uWSGI 来跑 Django 网站试试。</p>

<p>首先进入 Django 项目根目录，即之前的 /mysite/ 运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">runserver</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">8888</span>
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中访问该 url ，如果出现如下界面则说明你的 mysite 项目是可运行的 :</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/django_test1.png" alt="django_test" /></p>

<p>接着运行 uWSGI :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">http</span> <span class="p">:</span><span class="mi">8000</span> <span class="o">--</span><span class="n">module</span> <span class="n">mysite</span><span class="o">.</span><span class="n">wsgi</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>module mysite.wsgi</code> : 读取特定的 wsgi 模块</li>
</ul>


<p>如果出现同样的界面，说明你的 uWSGI 已经可以搭载你的 Django 应用惹，所以以下的链接是成功的 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">the</span> <span class="n">web</span> <span class="n">client</span> <span class="o">&lt;-&gt;</span> <span class="n">uWSGI</span> <span class="o">&lt;-&gt;</span> <span class="n">Django</span>
</span></code></pre></td></tr></table></div></figure>


<h3>安装配置 nginx</h3>

<h4>安装 nginx</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span><span class='line'><span class="n">sudo</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>    <span class="c"># 开启 nginx 服务</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在到浏览器中输入 <code>http://127.0.0.1</code> ，如果你看到以下信息 : “Welcome to nginx!”那么说明 nginx 服务器运行成功，以下链接成功 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">the</span> <span class="n">web</span> <span class="n">client</span> <span class="o">&lt;-&gt;</span> <span class="n">the</span> <span class="n">web</span> <span class="n">server</span>
</span></code></pre></td></tr></table></div></figure>


<h4>配置 nginx</h4>

<p>首先，你需要一个 uwsgi_params 文件。</p>

<ul>
<li>将 uwsgi_params 文件拷贝到项目文件夹下(即 /mysite/ )。uwsgi_params文件在/etc/nginx/目录下，也可以从这个<a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params">页面下载</a></li>
<li>在项目文件夹下创建文件 mysite_nginx.conf ,填入并修改下面内容：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># mysite_nginx.conf</span>
</span><span class='line'>
</span><span class='line'><span class="c"># the upstream component nginx needs to connect to</span>
</span><span class='line'><span class="n">upstream</span> <span class="n">django</span> <span class="p">{</span>
</span><span class='line'>    <span class="c"># server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span>
</span><span class='line'>    <span class="n">server</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">8001</span><span class="p">;</span> <span class="c"># for a web port socket (we&#39;ll use this first)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># configuration of the server</span>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="c"># the port your site will be served on</span>
</span><span class='line'>    <span class="n">listen</span>      <span class="mi">8000</span><span class="p">;</span>
</span><span class='line'>    <span class="c"># the domain name it will serve for</span>
</span><span class='line'>    <span class="n">server_name</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">;</span> <span class="c"># substitute your machine&#39;s IP address or FQDN</span>
</span><span class='line'>    <span class="n">charset</span>     <span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># max upload size</span>
</span><span class='line'>    <span class="n">client_max_body_size</span> <span class="mi">75</span><span class="n">M</span><span class="p">;</span>   <span class="c"># adjust to taste</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Django media</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">/</span><span class="n">media</span>  <span class="p">{</span>
</span><span class='line'>        <span class="n">alias</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">media</span><span class="p">;</span>  <span class="c"># your Django project&#39;s media files - amend as required</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">location</span> <span class="o">/</span><span class="n">static</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">alias</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">static</span><span class="p">;</span> <span class="c"># your Django project&#39;s static files - amend as required</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Finally, send all non-media requests to the Django server.</span>
</span><span class='line'>    <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">uwsgi_pass</span>  <span class="n">django</span><span class="p">;</span>
</span><span class='line'>        <span class="n">include</span>     <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">uwsgi_params</span><span class="p">;</span> <span class="c"># the uwsgi_params file you installed</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在终端中进入之前的 /mysite/ 项目文件夹，输入 ``pwd``` ，复制下该路径，将 mysite_nginx.conf 中的 /path/to/your/mysite 全部替换掉。</p>

<p>在/etc/nginx/sites-enabled目录下创建本文件的连接，使nginx能够使用它 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="o">~/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">mysite_nginx</span><span class="o">.</span><span class="n">conf</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：记得检查 /etc/nginx/sites-enabled/ 下的软链接是否成功，因为之前我就遇到了路径出错的问题。</p>

<h4>部署静态文件</h4>

<p>在运行 nginx 前，你还需要把 Django 的所有静态文件全部整理到之前的 static 文件夹里，在 /mysite/mysite/settings.py 中添加以下内容 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&quot;static/&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span> <span class="n">manage</span><span class="o">.</span><span class="n">py</span> <span class="n">collectstatic</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在你发现 Django 所有的静态文件都被整理到了 /mysite/static/ 文件夹里了。</p>

<h4>测试 nginx</h4>

<p>首先重启 ngxin 服务 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 /mysite/mysite/media/ 文件夹中添加一个 <code>media.png</code> 文件。</p>

<p>在浏览器中打开 :<code>http://127.0.0.1:8000/media/media.png</code></p>

<p>如果显示出了图片，说明 nginx 服务已经正确运行惹。</p>

<p>注意在从浏览器中请求图片信息时，在 uwsgi 里是没有输出信息的，而请求一个其他的动态网页时，则会输出类似</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="n">pid</span><span class="p">:</span> <span class="mi">1952</span><span class="o">|</span><span class="n">app</span><span class="p">:</span> <span class="mi">0</span><span class="o">|</span><span class="n">req</span><span class="p">:</span> <span class="mi">3</span><span class="o">/</span><span class="mi">3</span><span class="p">]</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span> <span class="p">()</span> <span class="p">{</span><span class="mi">36</span> <span class="nb">vars</span> <span class="ow">in</span> <span class="mi">599</span> <span class="nb">bytes</span><span class="p">}</span> <span class="p">[</span><span class="n">Wed</span> <span class="n">Mar</span> <span class="mi">18</span> <span class="mi">08</span><span class="p">:</span><span class="mi">43</span><span class="p">:</span><span class="mi">27</span> <span class="mi">2015</span><span class="p">]</span> <span class="n">GET</span> <span class="o">/</span><span class="n">time</span><span class="o">/</span> <span class="o">=&gt;</span> <span class="n">generated</span> <span class="mi">63</span> <span class="nb">bytes</span> <span class="ow">in</span> <span class="mi">1</span> <span class="n">msecs</span> <span class="p">(</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span><span class="p">)</span> <span class="mi">2</span> <span class="n">headers</span> <span class="ow">in</span> <span class="mi">88</span> <span class="nb">bytes</span> <span class="p">(</span><span class="mi">1</span> <span class="n">switches</span> <span class="n">on</span> <span class="n">core</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这样的信息。</p>

<p>也就是缩，当你在浏览器中请求 media.png 时， nginx 会检查这个地址 /media/ ，接着它会在 mysite_nginx.conf 文件中看到这段代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">location</span> <span class="o">/</span><span class="n">media</span>  <span class="p">{</span>
</span><span class='line'>        <span class="n">alias</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">thehackercat</span><span class="o">/</span><span class="n">Dev</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">media</span><span class="p">;</span>  <span class="c"># your Django project&#39;s media files - amend as required</span>
</span></code></pre></td></tr></table></div></figure>


<p>它会直接从这个路径下去寻找图片，找到了就显示粗来，没找着就报 404 错误。</p>

<h4>nginx and uWSGI and test.py</h4>

<p>现在进入 /mysite/ 文件夹 输入以下命令 ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">socket</span> <span class="p">:</span><span class="mi">8001</span> <span class="o">--</span><span class="n">wsgi</span><span class="o">-</span><span class="nb">file</span> <span class="n">test</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中访问 <code>http://127.0.0.1:8000</code> 如果出现 &lsquo;Hello World!&rsquo; 则说明以下链接是成功的 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">the</span> <span class="n">web</span> <span class="n">client</span> <span class="o">&lt;-&gt;</span> <span class="n">the</span> <span class="n">web</span> <span class="n">server</span> <span class="o">&lt;-&gt;</span> <span class="n">the</span> <span class="n">socket</span> <span class="o">&lt;-&gt;</span> <span class="n">uWSGI</span> <span class="o">&lt;-&gt;</span> <span class="n">Python</span>
</span></code></pre></td></tr></table></div></figure>


<h3>用 UNIX socket 取代 TCP port</h3>

<p>在 mysite/ 文件夹下创建一个新文件 mysite.sock （空文本文档即可）。</p>

<p>然后对 <code>mysite_nginx.conf</code> 做以下修改 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">server</span> <span class="n">unix</span><span class="p">:</span><span class="o">///</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">your</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">mysite</span><span class="o">.</span><span class="n">sock</span><span class="p">;</span> <span class="c"># for a file socket</span>
</span><span class='line'><span class="c"># server 127.0.0.1:8001; # for a web port socket (we&#39;ll use this first)</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sudo</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">init</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">socket</span> <span class="n">mysite</span><span class="o">.</span><span class="n">sock</span> <span class="o">--</span><span class="n">wsgi</span><span class="o">-</span><span class="nb">file</span> <span class="n">test</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure>


<p>打开 <code>http://127.0.0.1:8000</code> 结果报错了，出现了这个错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="n">crit</span><span class="p">]</span> <span class="mi">4133</span><span class="c">#0: *1 connect() to unix:/home/thehackercat/Dev/mysite/mysite.sock failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: 127.0.0.1, request: &quot;GET / HTTP/1.1&quot;, upstream: &quot;uwsgi://unix:/home/thehackercat/Dev/mysite/mysite.sock:&quot;, host: &quot;127.0.0.1:8000&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>发现原来是权限的问题，于是在命令中加入这一段 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">socket</span> <span class="n">mysite</span><span class="o">.</span><span class="n">sock</span> <span class="o">--</span><span class="n">wsgi</span><span class="o">-</span><span class="nb">file</span> <span class="n">test</span><span class="o">.</span><span class="n">py</span> <span class="o">--</span><span class="n">chmod</span><span class="o">-</span><span class="n">socket</span><span class="o">=</span><span class="mi">666</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就成功了！</p>

<h4>用 uswgi 和 nginx 跑 Django 应用</h4>

<p>如果上面一切都运行正常，则输入下面命令可以跑 Django 应用 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">socket</span> <span class="n">mysite</span><span class="o">.</span><span class="n">sock</span> <span class="o">--</span><span class="n">module</span> <span class="n">mysite</span><span class="o">.</span><span class="n">wsgi</span> <span class="o">--</span><span class="n">chmod</span><span class="o">-</span><span class="n">socket</span><span class="o">=</span><span class="mi">666</span>
</span></code></pre></td></tr></table></div></figure>


<h3>配置 uWSGI 便捷开启服务器</h3>

<p>如果每次都按上述命令来跑 Django 应用实在麻烦，所以使用 .ini 文件来简化工作，便捷开启服务器，方法如下 :</p>

<p>在 /mysite/ 文件夹下创建文件 mysite_uwsgi.ini ，并填写修改下面内容 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mysite_uwsgi</span><span class="o">.</span><span class="n">ini</span> <span class="nb">file</span>
</span><span class='line'><span class="p">[</span><span class="n">uwsgi</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Django-related settings</span>
</span><span class='line'><span class="c"># the base directory (full path)</span>
</span><span class='line'><span class="n">chdir</span> <span class="o">=</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">thehackercat</span><span class="o">/</span><span class="n">Dev</span><span class="o">/</span><span class="n">mysite</span>
</span><span class='line'><span class="c"># Django&#39;s wsgi file</span>
</span><span class='line'><span class="n">module</span> <span class="o">=</span> <span class="n">mysite</span><span class="o">.</span><span class="n">wsgi</span>
</span><span class='line'><span class="c"># the virtualenv (full path) 如果你没有装 virtualenv 就把下面这行用注释掉</span>
</span><span class='line'><span class="n">home</span> <span class="o">=</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">virtualenv</span>
</span><span class='line'>
</span><span class='line'><span class="c"># process-related settings</span>
</span><span class='line'><span class="c"># master</span>
</span><span class='line'><span class="n">master</span> <span class="o">=</span> <span class="n">true</span>
</span><span class='line'><span class="c"># maximum number of worker processes</span>
</span><span class='line'><span class="n">processes</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="c"># the socket (use the full path to be safe</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">thehackercat</span><span class="o">/</span><span class="n">Dev</span><span class="o">/</span><span class="n">mysite</span><span class="o">/</span><span class="n">mysite</span><span class="o">.</span><span class="n">sock</span>
</span><span class='line'><span class="c"># ... with appropriate permissions - may be needed</span>
</span><span class='line'><span class="n">chmod</span><span class="o">-</span><span class="n">socket</span> <span class="o">=</span> <span class="mi">666</span>
</span><span class='line'><span class="c"># clear environment on exit</span>
</span><span class='line'><span class="n">vacuum</span> <span class="o">=</span> <span class="n">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，只要运行以下命令，就可以跑 Django 应用了 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">uwsgi</span> <span class="o">--</span><span class="n">ini</span> <span class="n">mysite_uwsgi</span><span class="o">.</span><span class="n">ini</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里，如果你在浏览器中访问<code>http://127.0.0.1:8000</code> 可以看到正常的 Django 页面，则说明 uWSGI + nginx + Django 配置成功！</p>

<h4>参考文档</h4>

<ol>
<li><a href="http://www.jianshu.com/p/32dbe2537b78">nginx与Django不可不说的秘密</a></li>
<li><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html">Setting up Django and your web server with uWSGI and nginx</a></li>
</ol>


<p>有些同学一定会被网上各种教程的 Django 目录结构搞得头大，其实这个目录是可自定义的，下面是我的目录结构 :</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/django_test4.png" alt="django_menu" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[绿盟 Web 后端实习面试心得]]></title>
    <link href="http://thehackercat.me/blog/2015/12/23/nsfocus-interview/"/>
    <updated>2015-12-23T21:37:16+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/23/nsfocus-interview</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>12月23号下午2：00参加了绿盟的 Web 后端开发实习生的面试。考官是个胖哥哥，也是科大的，人很温柔和蔼。先问了一些数据结构与算法的问题，接着问了计算机网络的一些基础问题，最后考察了下 Web 开发的一些知识。总得来说题目不难，但是自己也发挥不好，原来以为有了几次面经，但是在现场还是紧张得不行。 (真是给自己的心理素质跪了 ：P)</p>

<!--more-->


<h2>(数据结构与算法)图的遍历</h2>

<p>我怕出错就写了5个结点的无向图，如下：
<img src="http://thehackercat-hackercat.stor.sinaapp.com/tulun.jpg" alt="undirected graph" /></p>

<p>然后写了广度优先遍历：</p>

<p>1->2->3->4->5</p>

<p>深度优先遍历：</p>

<p>1->2->5->4->3</p>

<h2>(数据结构与算法)写个排序算法求列表中倒数第二大的元素</h2>

<p>我用 Python 写了个冒泡排序来处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 冒泡排序</span>
</span><span class='line'><span class="k">def</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">passnum</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">passnum</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>              <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>(数据结构与算法)去重的优化算法</h2>

<p>接着不造为什么就谈到了之前在海豚面试的时候对算法时间复杂度进行优化的问题，然后考官问了我一个去除一个列表中重复元素的算法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 去重</span>
</span><span class='line'><span class="k">def</span> <span class="nf">induplicate</span><span class="p">(</span><span class="n">L</span><span class="p">):</span>
</span><span class='line'>  <span class="n">L1</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">[</span><span class="n">L2</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">L</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">L2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样通过增加空间复杂度来降低时间复杂度</p>

<h2>Http 状态码</h2>

<p>这个我当时说错了</p>

<p>我说的是</p>

<ul>
<li>2 开头的是成功</li>
<li>3 开头的是需要等待</li>
<li>4 开头的通常是请求出错</li>
<li>5 开头的是服务器问题</li>
</ul>


<p>后来回来查了下</p>

<ul>
<li>3 开头的标识重定向</li>
<li>5 开头的表示服务不可用</li>
</ul>


<h2>TCP 3次握手连接和4次握手断开连接的过程</h2>

<p>这个不能更经典了。</p>

<p>就不详细列出了，可以参见这个<a href="http://blog.csdn.net/zhuying_linux/article/details/7449403">详解</a></p>

<h2>设计一个产品参数配置页面布局</h2>

<p>我本来打算多扯一些的，因为最近正好在看的<a href="http://book.douban.com/subject/3323633/">《写给大家看的设计书》</a>，但是词穷了，就画了个抽屉菜单的布局,但是感觉还有很多交互设计的地方我欠考虑。</p>

<h2>Http 和 Https 的区别</h2>

<p>这个我没答出来，我只知道 Https 是经过一定手段加密使得 Http 传输的数据包中一些明文数据变得"隐晦"，但是具体的实现方法不太清楚。</p>

<p>后来我看了一篇 <a href="http://www.fenesky.com/blog/2014/07/19/how-https-works.html">Blog</a>，主要是用 SSL/TLS 来对数据包进行加密。</p>

<p>这样经过 SSL/TLS 协议加密后，当客户端收到服务器的 Https 请求后，会查询本机所支持的加密算法，并通过该算法来解密 Https 请求。</p>

<h2>总结</h2>

<p>这次面试总的来说题目相对简单。</p>

<p>面试官也教了我很多网安方面的知识，比如12306的签名协议和网关安全，虽然我是网络安全方面的小白，但是我觉得 Web 安全很炫酷。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[海豚浏览器 Python 实习面试心得]]></title>
    <link href="http://thehackercat.me/blog/2015/12/18/dolphin-interview/"/>
    <updated>2015-12-18T12:02:37+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/18/dolphin-interview</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>12月11号下午4：30参加了海豚浏览器的 Python 后台开发实习生的电面，考官一开始先问了我一些 Python 基础的问题，接着问了些计网的经典面试题，最后考了2道算法题，然后开始扯皮一些之前做过的项目中的问题等，最后总结心得如下：</p>

<!--more-->


<h2>Python 的 List 能不能作为字典的 key 传入？</h2>

<p>我回答的是不能，因为字典的 key 值必须是不变的，而 List 的值是可变的。</p>

<p>之后我上网查了下，更标准的说法是，Python Dict 的 key 值是 hashable 的，即</p>

<ul>
<li>这个 key 值在其生命周期内是不变的。</li>
<li>并且可以和其他对象进行比较。</li>
</ul>


<p>以下是官方对于 hashable 给出的解释：</p>

<blockquote><p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a hash() method), and can be compared to other objects (it needs an eq() or cmp() method). Hashable objects which compare equal must have the same hash value.</p>

<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>

<p>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is their id().</p></blockquote>

<p>所以得出，Python 中所有不变的内奸对象都是 hashable 的，所有可变的容器(比如，list or dict)都不是 hashable 的，故不能作为字典的 key。</p>

<h2>Python 装饰器是什么，有什么看法？</h2>

<p>正好之前我写了一篇深入理解 Python 装饰器的 <a href="http://thehackercat.me/blog/2015/12/07/python-decorator-learning/">blog</a></p>

<p>我就向他解释了下，装饰器是在不修改原先代码块的情况下，为其加上一些装饰。</p>

<p>然后我扯了一些装饰器所使用的 Python 语言的几个特性</p>

<ul>
<li>闭包</li>
<li>把函数作为参数传递</li>
<li>装饰器的迭代</li>
</ul>


<h2>Python 的 yield() 函数的看法？</h2>

<p>我想起来之前有看过一篇 <a href="http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html">blog</a> 正好讲过。</p>

<p>yield 函数是 Python 在进行迭代时，函数内部的代码并不立刻执行，而是返回一个 generator 对象，接着每次迭代时，再读取下一个元素。</p>

<p>这样的好处在于，不需要一次性读取全部对象，二是实时地读取生成数据，减少了内存的开支。</p>

<h2>解释下 Django 的 MVC 模式，其中那一部分充当的是 controller 的部分？</h2>

<p>我解释了下，其实 Django 是一个 MTV 模式的框架, MTV 三个部分如下，</p>

<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>


<p>而其中作为 controller 的部分是 Django 的 URLconf。</p>

<p>它获取用户在地址栏中输入的 URL 并将其路由到 views 模块对应的各个函数，并调用他们。实现了相应的视图函数路由到相应界面的映射功能。</p>

<h2>Django 中的缓存用过吗？看法是？</h2>

<p>正好之前在写一个 Django 练手的图书馆项目中试过 Django 的缓存机制，所以就以那个例子介绍了下。</p>

<p>Django 的缓存系统让开发者能够缓存某个视图的输出。这个缓存是无法在浏览器缓存中控制的，因为它并不包含在 http 头部内。</p>

<p>我用的是 Django 缓存系统的 memcached。 memcached 作为一个后台进程运行，并分配一个指定的内存量，它所实现的功能是提供一个添加、检索和删除缓存中任意数据的快速接口，所有的数据是直接存储在内存中的，所以没有用到数据库或者文件系统，减少了额外开销。</p>

<p>但是 memcached 有一个缺点是，它的缓存是完全存在内存中的，一旦服务器崩溃，辣么所有缓存的数据就丢失了。</p>

<p>其他的缓存机制偶没有用过，所以就没有谈。</p>

<h2>用户在浏览器中输入一个网址，到 Django 后台捕捉到请求其中的过程？</h2>

<p>这个我当时貌似讲偏题了，我说的是</p>

<p>用户输入一个网址后</p>

<ol>
<li>浏览器先检查缓存，如果有缓存，就从缓存中获得资源文件并加载，如果木有缓存，则执行下一步。</li>
<li>进行 DNS 域名解析，将域名解析成 ip 地址。</li>
<li>与 ip 地址对影的服务器进行 TCP 连接。</li>
<li>接着经历 TCP 3次握手过程。</li>
<li>一旦连接建立后，开始发送 Http 请求。</li>
<li>服务器获得 Http 请求后，将该请求打包成 HttpRequest 对象。</li>
<li>接着检查 Request 中是否需要 Django 中间件的方法，如果没有则执行下一步。</li>
<li>判断 Request 中的各种信息，诸如 user_agent、GET/POST 等，并在 URLconf 中进行匹配路由到对应的 views 视图函数中。</li>
<li>返回一个 Response 对象，并调用相应的 views 视图函数。</li>
<li>最后返回一个 Http 相应，并加载页面。</li>
</ol>


<h2>(数据结构与算法)获得两个列表的交集</h2>

<p>我第一次写的是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">intset</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span><span class="n">L2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">L1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">L2</span><span class="p">:</span>
</span><span class='line'>          <span class="n">L</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着考官问我，这个时间复杂度是多少，很明显是O(n<sup>2</sup>)，他又问我有没有更好的方法，</p>

<p>于是我写了第二种方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">intset2</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span><span class="n">L2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="nb">set</span><span class="p">(</span><span class="n">L1</span><span class="p">)</span><span class="o">^</span><span class="nb">set</span><span class="p">(</span><span class="n">L2</span><span class="p">)]</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样先把L1、L2列表中重复的元素删除了，接着再用异或符来取得他们的交集。</p>

<h2>(数据结构与算法)一个人一次可以爬3级或5级的台阶，请问他爬到第m层时，有n种解法，求解</h2>

<p>这个我当时没写出来，我第一眼感觉是递归的题，后来室友告诉我是线性规划的题。之后我在 leetcode 上也看到了相应的解法，真是太蠢了我！</p>

<p>leetcode 解法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param {integer} n</span>
</span><span class='line'>    <span class="c"># @return {integer}</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span><span class="o">==</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">n</span><span class="o">==</span><span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">n</span>
</span><span class='line'>        <span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">c</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span><span class="n">a</span><span class="o">=</span><span class="n">b</span><span class="p">;</span><span class="n">b</span><span class="o">=</span><span class="n">c</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>以上就是我这次 Python 实习面试的大部分考题，面试完之后感觉自己基础还是不扎实，对于性能优化的理解还有缺陷，代码写得不够漂亮，算法方面很薄弱。故决定刷一下 Python 文档和 Leetcode。</p>

<p>而且这次面试感觉要黄，因为都一星期了，HR 还是木有给我打电话 T.T</p>

<p>不过，我有了其他的考虑了，心理也安定了许多。</p>

<p>现在，我只想去睡个十除以三的懒觉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 高级 Views 和 URLconf 配置]]></title>
    <link href="http://thehackercat.me/blog/2015/12/08/django-learning-4/"/>
    <updated>2015-12-08T15:08:35+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/08/django-learning-4</id>
    <content type="html"><![CDATA[<p>由于官网教程讲得迷迷糊糊的，所以我提炼了下代码，发现便于理解很多。</p>

<h2>URLconf 技巧</h2>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 在模块开始导入关联的视图函数，直接传递函数对象</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite.views</span> <span class="kn">import</span> <span class="n">hello</span><span class="p">,</span> <span class="n">current_datetime</span><span class="p">,</span> <span class="n">hours_ahead</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="n">hello</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="n">current_datetime</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/$&#39;</span><span class="p">,</span> <span class="n">hours_ahead</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->




<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 在模块开始导入 views 模块，传递 views.视图函数</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">hello</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">current_datetime</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">hours_ahead</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 传入一个包含模块名+函数名的对象</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="s">&#39;mysite.views.hello&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="s">&#39;mysite.views.current_datetime&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/$&#39;</span><span class="p">,</span> <span class="s">&#39;mysite.views.hours_ahead&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 开启 URLconf 调试模式</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">hello</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">current_datetime</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">hours_ahead</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">:</span>
</span><span class='line'>  <span class="n">urlpatterns</span> <span class="o">+=</span> <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^debuginfo/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">debug</span><span class="p">),</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>命名组</h2>

<p>我觉得命名组的模式增加了代码冗余度，且语义化也不好。对于我这种懒人完全不需要 ：D <del>(其实就是我懒的借口)</del></p>

<p>而它的目的在于，将变量以<strong>位置参数</strong>的方式传递给视图函数变为以<strong>关键字参数</strong>的方式传递。</p>

<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 无名组，以位置参数传递变量</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^articles/(\d{4})/$&#39;</span><span class="err">，</span> <span class="n">view</span><span class="o">.</span><span class="n">year_archive</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^articles/(\d{4})/(\d{2})/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">month_archive</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>urls.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 命名组，以关键字参数传递变量</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite</span> <span class="kn">import</span> <span class="n">views</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^admin/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">site</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^articles/(?P&lt;year&gt;\d{4})/$&#39;</span><span class="err">，</span> <span class="n">view</span><span class="o">.</span><span class="n">year_archive</span><span class="p">),</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^articles/(?P&lt;year&gt;\d{4})/(?&lt;month&gt;\d{2})/$&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">month_archive</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解 Python 装饰器]]></title>
    <link href="http://thehackercat.me/blog/2015/12/07/python-decorator-learning/"/>
    <updated>2015-12-07T14:12:24+08:00</updated>
    <id>http://thehackercat.me/blog/2015/12/07/python-decorator-learning</id>
    <content type="html"><![CDATA[<p>最近在写 Python+Django 的时候发现，有时候封装 API 的时候经常会遗失一些重复的装饰信息，但是直接封装到方法里是比较差劲的写法，因为有多个模块可能同时需要这些装饰信息，所以我希望使用一种可以迭代的装饰器。于是我在 <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484">Stack Overflow</a> 上找到了相应的解答。下面以这篇解答为引写下我理解 Python decorator 的思路过程。</p>

<!--more-->


<h2>装饰器是做什么用的？</h2>

<p>装饰器实现对一个已有的模块做一些“修饰工作”，所谓修饰工作就是想给现有的模块加上一些小装饰（一些小功能，这些小功能可能好多模块都会用到），但又不让这个小装饰（小功能）侵入到原有的模块中的代码里去。</p>

<h2>装饰器的定义</h2>

<p>首先，你需要知道 <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000">Python 的闭包</a>，接着发现3点 Python 的特性在装饰器中运用：</p>

<ol>
<li>函数可以赋值给一个变量。</li>
<li>函数可以定义在另一个函数内部。</li>
<li>函数名可以作为函数返回值。
辣么，先来看一段代码:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getTalk</span><span class="p">(</span><span class="nb">type</span><span class="o">=</span><span class="s">&quot;shout&quot;</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 定义函数</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">shout</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s">&quot;yes&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span><span class="p">()</span><span class="o">+</span><span class="s">&quot;!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">whisper</span><span class="p">(</span><span class="n">word</span><span class="o">=</span><span class="s">&quot;yes&quot;</span><span class="p">)</span> <span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">+</span><span class="s">&quot;...&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 返回函数</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">type</span> <span class="o">==</span> <span class="s">&quot;shout&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># 没有使用&quot;()&quot;, 并不是要调用函数，而是要返回函数对象</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">shout</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">whisper</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 如何使用？</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 将函数返回值赋值给一个变量</span>
</span><span class='line'><span class="n">talk</span> <span class="o">=</span> <span class="n">getTalk</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 我们可以打印下这个函数对象</span>
</span><span class='line'><span class="k">print</span> <span class="n">talk</span>
</span><span class='line'><span class="c">#outputs : &lt;function shout at 0xb7ea817c&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 这个对象是函数的返回值</span>
</span><span class='line'><span class="k">print</span> <span class="n">talk</span><span class="p">()</span>
</span><span class='line'><span class="c">#outputs : Yes!</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 不仅如此，你还可以直接使用之</span>
</span><span class='line'><span class="k">print</span> <span class="n">getTalk</span><span class="p">(</span><span class="s">&quot;whisper&quot;</span><span class="p">)()</span>
</span><span class='line'><span class="c">#outputs : yes...</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然函数可以作为返回值，是不是函数也可以作为参数传递呢</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">doSomethingBefore</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;I do something before then I call the function you gave me&quot;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">doSomethingBefore</span><span class="p">(</span><span class="n">scream</span><span class="p">)</span>
</span><span class='line'><span class="c">#outputs:</span>
</span><span class='line'><span class="c">#I do something before then I call the function you gave me</span>
</span><span class='line'><span class="c">#Yes!</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以看过这两段代码，你一定明白了，装饰器的定义。</p>

<p>装饰器就是封装器，可以让你在被装饰函数之前或之后执行代码，而不必修改函数本身代码。</p>

<h2>怎么写封装器：</h2>

<p>首先，我们来手写一个封装器：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">new_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;before the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;after the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;I am a alone function&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">decorated_along_func</span> <span class="o">=</span> <span class="n">new_decorator</span><span class="p">(</span><span class="n">along_func</span><span class="p">)</span>
</span><span class='line'><span class="n">decorated_along_func</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#outputs:</span>
</span><span class='line'><span class="c">#before the function runs</span>
</span><span class='line'><span class="c">#I am a alone function</span>
</span><span class='line'><span class="c">#after the function runs</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里每次调用 decorated_along_func 函数时，都会将 along_func 函数传入到装饰函数 new_decorator 中，完成封装。</p>

<h2>怎么写装饰器：</h2>

<p>那将上例代码稍微进行修改：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">new_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;before the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;after the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@new_decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;I am a alone function&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">along_func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>就会发现会得到相同的结果，这就是装饰器！</p>

<p>那么回到我最初的问题，装饰器能否迭代呢？</p>

<p>可以！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decorator1</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;before the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;after the function runs&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decorator2</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;before the decorator1 runs&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">func</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;after the decorator1 runs&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@decorator2</span>
</span><span class='line'><span class="nd">@decorator1</span>
</span><span class='line'><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;I am a alone function&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">along_func</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">#outpus:</span>
</span><span class='line'><span class="c">#before the decorator1 runs</span>
</span><span class='line'><span class="c">#before the function runs</span>
</span><span class='line'><span class="c">#I am a alone function</span>
</span><span class='line'><span class="c">#after the function runs</span>
</span><span class='line'><span class="c">#after the decorator1 runs</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这种特性十分的便捷，但是必须注意装饰器的顺序。</p>

<p>如果上例代码写成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator1</span>
</span><span class='line'><span class="nd">@decorator2</span>
</span><span class='line'><span class="k">def</span> <span class="nf">along_func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;I am a alone function&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么结果将变为</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">before</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span>
</span><span class='line'><span class="n">before</span> <span class="n">the</span> <span class="n">decorator1</span> <span class="n">runs</span>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">a</span> <span class="n">alone</span> <span class="n">function</span>
</span><span class='line'><span class="n">after</span> <span class="n">the</span> <span class="n">decorator1</span> <span class="n">runs</span>
</span><span class='line'><span class="n">after</span> <span class="n">the</span> <span class="n">function</span> <span class="n">runs</span>
</span></code></pre></td></tr></table></div></figure>


<h2>一些迭代装饰器的用法</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># bold装饰器</span>
</span><span class='line'><span class="k">def</span> <span class="nf">makebold</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="c"># 在前后加入标签</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;b&gt;&quot;</span> <span class="o">+</span> <span class="n">fn</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;&lt;/b&gt;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="c"># italic装饰器</span>
</span><span class='line'><span class="k">def</span> <span class="nf">makeitalic</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="c"># 加入标签</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&lt;i&gt;&quot;</span> <span class="o">+</span> <span class="n">fn</span><span class="p">()</span> <span class="o">+</span> <span class="s">&quot;&lt;/i&gt;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@makebold</span>
</span><span class='line'><span class="nd">@makeitalic</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">say</span><span class="p">()</span>
</span><span class='line'><span class="c">#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 等价的代码</span>
</span><span class='line'><span class="k">def</span> <span class="nf">say</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="n">say</span> <span class="o">=</span> <span class="n">makebold</span><span class="p">(</span><span class="n">makeitalic</span><span class="p">(</span><span class="n">say</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">say</span><span class="p">()</span>
</span><span class='line'><span class="c">#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是灰常炫酷。</p>

<h2>高级用法</h2>

<p>关于更多装饰器的高级用法，你可以戳以下链接：</p>

<p><a href="https://wiki.python.org/moin/PythonDecoratorLibrary">戳我</a></p>

<p>关于 Python Decroator 的各种提案，可以参看：</p>

<p><a href="https://wiki.python.org/moin/PythonDecoratorProposals">Python Decorator Proposals</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 学习笔记3-- Models]]></title>
    <link href="http://thehackercat.me/blog/2015/11/21/django-learning3/"/>
    <updated>2015-11-21T13:17:57+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/21/django-learning3</id>
    <content type="html"><![CDATA[<h2>MTV vs MVC</h2>

<p>正如在之前<a href="http://thehackercat.me/blog/2015/11/14/django-learning1/">这篇文章</a>所提到的， 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller ( MVC )模式。 在这个模式中， Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。</p>

<p>而 Django 使用的更多的则是模型( Model )、模板( Template )和视图( Views )的软件设计模式，称为 MTV 模式。我在 Stack Overflow 的<a href="http://stackoverflow.com/questions/6621653/django-vs-model-view-controller">这个回答</a>里找到了对于 MTV vs MVC 两种设计模式间的微妙的差别。</p>

<!--more-->


<p>其中提到，不能简单的把 Django 视图认为是 MVC 控制器，把 Django 模板认为是 MVC 视图。</p>

<p>两者之间的差别在于，在 Django 中，视图( Views )不处理用户输入，而是用来选择要展示的哪些数据，而不是要如何展示数据。而 Django 模板 仅仅决定如何展现Django视图指定的数据。</p>

<p>或者说, Django 将 MVC 中的视图进一步分解为 Django 视图 和 Django 模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得 Django 的模板可以根据需要随时替换，而不仅仅限制于内置的模板。至于 MVC 控制器部分，由 Django 框架的 URLconf 来实现。</p>

<h2>模型练手</h2>

<p>为了深入了解 Django Models 对数据的操作，我写了一个简单的博客模型作为练手。</p>

<p>在新建模型时遇到了一个 App migrations 问题如下：</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/model%20error%201.png" alt="Model CommandError" /></p>

<p>后来发现是由于 Django 版本问题，在最近版本把 migrations 移出了所创建的 App 的根目录，只需要执行<code>python manage.py makemigration</code>接着再执行<code>python manage.py migrate</code>即可解决。</p>

<p>写了个简单的博客的增删改查，代码如下：</p>

<figure class='code'><figcaption><span>#view.py </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c">#-*-coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponseRedirect</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">blog.models</span> <span class="kn">import</span> <span class="n">Blog</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">blog</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">RequestContext</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">blog_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blog_list</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_list.html&quot;</span><span class="p">,{</span><span class="s">&#39;blog_list&#39;</span><span class="p">:</span><span class="n">blog_list</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">blog_form</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="n">data</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">cleaned_data</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;id&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>                <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span><span class="n">author</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;author&#39;</span><span class="p">],</span><span class="n">content</span><span class="o">=</span><span class="n">data</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">])</span>
</span><span class='line'>                <span class="n">blog</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">data</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>                <span class="n">blog</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="n">blog</span><span class="o">.</span><span class="n">author</span> <span class="o">=</span> <span class="n">date</span><span class="p">[</span><span class="s">&#39;author&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="n">blog</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">]</span>
</span><span class='line'>                <span class="n">blog</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="s">&#39;/blog/list&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_form.html&quot;</span><span class="p">,</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">blog_del</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;id&#39;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid_</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">fileter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid_</span><span class="p">)</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="s">&#39;/blog/list&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">blog_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;id&#39;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid_</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid_</span><span class="p">)</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span>
</span><span class='line'>            <span class="n">initial</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="s">&#39;title&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="s">&#39;author&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">author</span><span class="p">,</span><span class="s">&#39;content&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_form.html&quot;</span><span class="p">,{</span><span class="s">&#39;form&#39;</span><span class="p">:</span><span class="n">form</span><span class="p">},</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">errors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;参数异常请刷新后重试&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_list.html&quot;</span><span class="p">,{</span><span class="s">&#39;errors&#39;</span><span class="p">:</span><span class="n">errors</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">blog_edit</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">errors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;id&#39;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">:</span>
</span><span class='line'>        <span class="n">bid_</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">blog</span> <span class="o">=</span> <span class="n">Blog</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">bid_</span><span class="p">)</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">BlogForm</span><span class="p">(</span>
</span><span class='line'>                <span class="n">initial</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="s">&#39;title&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="s">&#39;author&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">author</span><span class="p">,</span><span class="s">&#39;content&#39;</span><span class="p">:</span><span class="n">blog</span><span class="o">.</span><span class="n">content</span><span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s">&quot;blog_form.html&quot;</span><span class="p">,{</span><span class="s">&#39;form&#39;</span><span class="p">:</span><span class="n">form</span><span class="p">},</span><span class="n">context_instance</span><span class="o">=</span><span class="n">RequestContext</span><span class="p">(</span><span class="n">request</span><span class="p">))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">errors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;参数异常请刷新后重试&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="s">&quot;blog_list.html&quot;</span><span class="p">,{</span><span class="s">&#39;errors&#39;</span><span class="p">:</span><span class="n">errors</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>#form.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c">#-*-coding:utf-8 -*-</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BlogForm</span><span class="p">(</span><span class="n">forms</span><span class="o">.</span><span class="n">Form</span><span class="p">):</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span>  <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&#39;标题&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">author</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&#39;作者&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">content</span> <span class="o">=</span> <span class="n">forms</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">label</span><span class="o">=</span><span class="s">&#39;正文&#39;</span><span class="p">,</span><span class="n">widget</span><span class="o">=</span><span class="n">forms</span><span class="o">.</span><span class="n">Textarea</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 CharField() 相当于赋予了 title 表段 varchar 的属性。</p>

<p>object.all() 相当于执行了一条<code>select * from blog</code>的 sql 语句。</p>

<p>object.get() 相当于执行了一条<code>select * from blog where id='bid_'</code>的获取单个对象的 sql 语句。</p>

<p>object.save() 相当于执行了<code>UPDATE blog SET ...</code>的 sql 语句。</p>

<p>并用 errors[] 列表来捕捉错误信息，一般防止出现错误的 sql 语句时增加了 blog 表段中的 id 号而其余属性值为空的情况。</p>

<p>感觉相比于 ThinkinPHP 操作表单 GET/POST 请求以及处理数据库方面要方便得多。</p>

<h2>疑惑</h2>

<p>MVC 框架大大缩小了开发者对数据存储的直接操作，框架自动生成 sql 语句并空值数据的存取等。以后写 sql 感觉就跟 Excel 一样了，那应该怎么优化 sql 呢。</p>

<p>顺便吐槽一下，最近 GitHub Repositorie 换新的布局，天热噜，怎么能这么丑！</p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/dontstudyCS.jpg" alt="Dont learn CS" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Octopress 中生成包含 Liquid 语句的代码]]></title>
    <link href="http://thehackercat.me/blog/2015/11/20/blog-with-liquid/"/>
    <updated>2015-11-20T16:32:12+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/20/blog-with-liquid</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>由于之前写 <a href="http://thehackercat.me/blog/2015/11/16/django-learning2/">Django &ndash; Templates</a> 篇时要用到包含 Liquid 语法的示例代码，而 Octopress (Jekyll) 在后端使用 Liquid 来处理生成 Web Pages ，对于文章内部插入的原本用来作示例的 Liquid 代码会被解析成 Web Pages 生成语句而不是原本的内容。故苦恼了我一会儿 Q.Q</p>

<p><del>不过这都不是事儿</del></p>

<h2>解决方法</h2>

<p>比如，我之前写的</p>

<!--more-->


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>{% if variable %} 
</span><span class='line'>{% else %} 
</span><span class='line'>{% endif %}
</span><span class='line'></span></code></pre></td></tr></table></div></figure>


<p>就会因为包含了 <code>{% ... %}</code>的 Liquid 语句而导致编译出错无法生成 blog 。</p>

<p>解决方法是：</p>

<p>在每一块包含 Liquid 语句的代码快前后用 <code>{% raw %} 和 {% endraw %}</code>包括起来。</p>

<p>这样就能确保示例代码不会被错误的解析成 Jekyll Web Pages 生成语句。</p>

<p>但是如果我要显示<code>{% raw %} 和 {% endraw %}</code>怎么办呢 ？</p>

<p>我试着使用使用如下方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{% raw %}
</span><span class='line'>{% raw %}
</span><span class='line'>{% endraw %}
</span><span class='line'>{% endraw %}</span></code></pre></td></tr></table></div></figure>


<p>来显示一个<code>{% raw %} 和 {% endraw %}</code>标签，结果编译出错了。原因是， Liquid 的 raw/endraw 标签在匹配时要按照就近原则。</p>

<p>后来我在 <a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags">Stack Overflow</a> 找到了一个回答：</p>

<p>使用<code>{{ "{% raw " }}%}</code>就可以得到<code>{% raw %}</code>，这种方法是正确的。</p>

<p><img src="http://ww1.sinaimg.cn/large/6aa09e8fjw1evgxf183vrj20zk12sqa3.jpg" alt="awesomesauce" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 学习笔记2-- Templates]]></title>
    <link href="http://thehackercat.me/blog/2015/11/16/django-learning2/"/>
    <updated>2015-11-16T15:15:55+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/16/django-learning2</id>
    <content type="html"><![CDATA[<p>虽然 Django 中 Html 可以直接硬编码到 Python 中，但是这种行为并不利于前端开发人员进行维护。所以 Django 有了<a href="http://liquidmarkup.org/">流模板</a> ( Liquid Templates )。</p>

<h2>流模板基础</h2>

<p>举个例子，下面这个模板大致含括了 Django 模板的几个特性。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% load staticfiles %}
</span><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>{% block title %}{% endblock %}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Dear {{ person_name }},<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Thanks for placing an order from {{ company }}. It&#39;s scheduled to ship on {{ ship_date|date:&quot;F J,Y &quot; }}.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% if ordered_warranty %}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Your warranty information will be included in the packaging.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Here are the items you&#39;ve ordered: <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {% for item in item_list %}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            {{ item }}
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {% endfor %}
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    {% else %}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>You didnt order a warranty, so you&#39;re on your own when the products inevitably stop working. <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% endif %}
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Sincerely,<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>{{ company }}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>footer<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% block footer %}
</span><span class='line'>    <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>Thanks for visiting my site.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    {% endblock %}
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>看出，模板是基于 Html 的，事实上它就是保存成一个 .html 文件，它跟我们所看到的 html 的区别就在于多了一些由 <code>{{ }}</code>括起来的变量以及由<code>{% %}</code>括起来的模板标签，此外变量还通过过滤器 <code>|</code>来对文本输出格式进行转换。</p>

<p>而这里<code>{{ }}</code>里的变量相当于一个形参，真正显示出来的是在我们渲染模板的 Python 文件里所传给它的值。</p>

<p>比如在下面的模板渲染代码里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="n">Context</span><span class="p">({</span><span class="s">&#39;person_name&#39;</span><span class="p">:</span><span class="s">&#39;LexusLee&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&#39;company&#39;</span><span class="p">:</span> <span class="s">&#39;UESTC&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s">&#39;ship_date&#39;</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2015</span><span class="p">,</span><span class="mi">09</span><span class="p">,</span><span class="mi">24</span><span class="p">),</span>
</span><span class='line'>          <span class="s">&#39;ordered_warranty&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么模板中的<code>person_name</code>最终显示的就是<code>LexusLee</code>。</p>

<h2>模板标签</h2>

<ol>
<li><code>{% if variable %} {% else %} {% endif %}</code>用于判断变量 variable 是否为真，为真则执行 else 标签前的内容，否则执行 else 便签内的内容，跟大部分编程语言中的条件语句用法一致。</li>
<li>同理<code>{% for %} {% endfor %}</code>的用法也和大部分编程语言中循环语句的用法一致。需要注意的是，每个 for 循环中还有一个成为<code>{% forloop %}</code>的模板变量，这个变量能提示一些循环进度信息相关的属性，关于这个变量的详细统发可以参照<a href="http://djangobook.py3k.cn/appendixF/">这一节</a>。</li>
<li><code>{% block content %} {% endblock %}</code>是用来处理<a href="http://djangobook.py3k.cn/appendixF/">模板继承</a>和重载的标签，来避免重复和冗余的代码。比如上述的实例模板( base.html )中，我希望在多个文件中都能显示 footer ，而不需要重复编码，故在该模板中写了<code>{% block footer %}</code>,而在另一个文件中只需要写</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'>{% extends &quot;base.html&quot; %}
</span><span class='line'>{% block footer %}
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/thehackercat&quot;</span><span class="nt">&gt;</span>Github<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>这样所有的 footer 中都会有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/thehackercat&quot;</span><span class="nt">&gt;</span>Github<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这行代码。而之前<code>{% block footer %} {% endblock %}</code>框中的代码将会被 overwrite ，也就是说<strong>对于重载模块，子模板可以重载这些部分，如果子模板不重载这些部分，则会按照默认的内容显示</strong>。</p>

<p>4.<code>{% load staticfiles %}</code>用来加载静态资源，比如加载 CSS 、 JS 等静态文件时会用到。</p>

<p>5.<code>{# #}</code> 用于注释。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 学习笔记1-- URLconf]]></title>
    <link href="http://thehackercat.me/blog/2015/11/14/django-learning1/"/>
    <updated>2015-11-14T20:12:37+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/14/django-learning1</id>
    <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg" alt="PRAY FOR PARIS " /></p>

<p>今天好像巴黎有点乱，希望明天太阳还会照常升起。</p>

<h2>简介</h2>

<p>Django 是一个由 Python 编写、开源并采用经典的 <a href="https://msdn.microsoft.com/en-us/library/ff649643.aspx">MVC</a> 设计模式的 Web Full Stack 应用框架。</p>

<p>在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：</p>

<!--more-->


<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>


<p>而 Django 的编译方式比较特别，他的 MVC 控制器部分由 URLconf 来实现。</p>

<h2>URLconf</h2>

<p>当我在 Django 中编写完视图要想将其路由要页面上时，我发现了 Django 的 URLconf 路由机制，他实现了为相应的视图函数路由到相应界面的映射功能，也就是说，当用户访问了 <code>http://127.0.0.1:8000/hello/</code> 时， Django 调用了视图 views.py 中的 hello () 函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite.views</span> <span class="kn">import</span> <span class="n">hello</span><span class="p">,</span><span class="n">current_datetime</span><span class="p">,</span><span class="n">hours_ahead</span><span class="p">,</span><span class="n">letter</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="n">hello</span><span class="p">),</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="n">current_datetime</span><span class="p">),</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/ $&#39;</span><span class="p">,</span><span class="n">hours_ahead</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看出， URLconf 的路由是通过正则表达式来匹配一个完整的 hello 的 URL ，这样的话就可以保证 诸如 /hello/foo/ 等 URL 不会被匹配到。
为了更深入了解 URLconf 路由的机制，我找到了类似的 <a href="https://github.com/tornadoweb/tornado">tornado</a> 框架来对比。</p>

<p>注意到在其中 web.py 文件中的第2964行开始的如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">([</span>
</span><span class='line'>  <span class="p">(</span><span class="s">r&quot;/&quot;</span><span class="p">,</span> <span class="n">MainHandler</span><span class="p">),</span>
</span><span class='line'><span class="p">])</span>
</span><span class='line'><span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
</span><span class='line'><span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">current</span><span class="p">(</span> <span class="p">)</span><span class="o">.</span><span class="n">start</span><span class="p">(</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看出 torando 现把一个路由表作为一个参数，传给 Application 类的构造函数，接着创建了一个实例，然后再把这个实例传递给 http_server 。那么当客户端发起<code>get /</code>请求的时候, http server 接收到这个请求，在路由表中匹配 url pattern ，最后交给 MainHandler 去处理。</p>

<p>这个机制跟 Django 的 URLconf 是类似的，都是通过在 pattern 中匹配好对应的 url 接着传给处理器来负责从路由表中检索并路由。</p>

<p>这种方法<strong>松耦合</strong>了 http server 层和 web application 层，从而让开发者可以专注于 web 应用的逻辑层，很好！  ：D</p>

<h2>Django 如何处理请求</h2>

<p>所以了解过了 Django 的 URLconf 机制后，我开始思考他是如何处理请求的。</p>

<p>我开启服务器后在地址栏中输入 <code>http://127.0.0.1:8000/time/plus/20/</code></p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/urlconf1.png" alt="timeplus20" /></p>

<p>然后花现处理路线如下：</p>

<ol>
<li><p>进来的请求转入 /time/plus/20/ .</p></li>
<li><p>Django 通过在 ROOT_URLCONF 配置来决定根 URLconf .</p></li>
<li><p>Django 在 URLconf 中的所有 URL 模式中，查找第一个匹配 /time/plus/20/ 的条目。</p></li>
<li><p>如果找到匹配，将调用相应的视图函数</p></li>
<li><p>如果没找到匹配，则返回相应的 Http 状态码 (如图)</p></li>
<li><p>视图函数返回一个HttpResponse</p></li>
<li><p>Django 转换 HttpResponse 为一个适合的 HTTP response ，以 Web page 显示出来</p></li>
</ol>


<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-11-14%20%E4%B8%8B%E5%8D%889.27.45.png" alt="http_request" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建静态博客]]></title>
    <link href="http://thehackercat.me/blog/2015/11/09/fix-the-datetime-bug/"/>
    <updated>2015-11-09T11:25:00+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/09/fix-the-datetime-bug</id>
    <content type="html"><![CDATA[<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/spiderman.jpg" alt="Spiderman" /></p>

<p>最近把个人博客搭好了，用了<a href="https://github.com/octopress/octopress">Octopress</a>,一个基于 Jekyll 的集成开发工具。</p>

<p>原来 CSDN 的那个『骇客猫』弃坑了。</p>

<h2>安装和配置.</h2>

<p>Octopress 的安装配置比较简单，是需要按照官网或者网上一些<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">教程</a>一步步走即可。</p>

<p>由于我在2015年10月1日更新了 OS X EI Capitan，新系统在权限设置上增加了 <a href="http://www.macworld.com/article/2948140/os-x/private-i-el-capitans-system-integrity-protection-will-shift-utilities-functions.html">System Integrity Protection</a> (SIP) 来提高系统安全性并且在 System Library 的路径上作了修改，导致了一些安装 Jekyll 时出现的异常，罗列如下：</p>

<!--more-->


<ol>
<li><p>如果你使用命令行 <code>$ gem install jekyll</code> 安装 Jekyll 时 遇到了如下问题：</p>

<pre><code> ERROR:  While executing gem ... (Errno::EPERM) 
 Operation not permitted - /usr/bin/jekyll
</code></pre>

<p>辣么尝试使用 <code>$ sudo gem install -n /usr/local/bin/ jekyll</code> 从而有效地避开 EI Captian 中 rootless 用户的权限问题。
或者有更彻底的办法，在终端输入</p>

<pre><code>  $ export PATH=/usr/local/bin:$PATH
</code></pre>

<p>这样会将原来 /usr/bin 的路径更改为 /usr/local/bin ，然后再进行安装，一劳永逸，但我不建议这么做。</p></li>
<li><p>如果你在进行上述操作时遇见了如下问题：</p>

<pre><code> ERROR: Error installing jekyll:
 ERROR: Failed to build gem native extension.  
</code></pre>

<p>辣么你应该没有安装 OS X developer tools ，安装后才能编译一些 ruby 的原生的拓展插件。
在命令行中输入</p>

<pre><code>  $ xcode-select --install
</code></pre>

<p>就口以安装了。</p></li>
<li><p>如果你遇到了任何 Permission denied 的问题：</p>

<pre><code> ERROR:  While executing gem ... (Errno::EACCES)
 Permission denied
</code></pre>

<p>辣么在命令行之前加上 <code>$ sudo</code> 。</p></li>
</ol>


<h2>个性化修改</h2>

<p>对于我的博客的个性化修改我主要做了以下三个：</p>

<ul>
<li>第三方主题：Octopress有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>安装也很便捷。</li>
<li>插件安装：可以在 <code>/plugins</code> 目录下安装一些第三方插件，诸如 Disqus 评论系统、 Twitter 的时间线等。</li>
<li>样式修改：我在 <code>/sass/custom/_styles.scss</code> 中修改了字体、 blog 的行间距以及一些边边角角的地方。</li>
</ul>


<p>我使用了<strong>第三方主题</strong> cleanpress 她极简的风格很吸引我，但是这个主题有蛮多 bug 的。</p>

<p>比如，在首页会遇见一个博客的 post 时间无法显示导致日历图标和目录图标重合的问题，如下所示：</p>

<p><img src="https://cloud.githubusercontent.com/assets/190438/8529829/37c7bc80-23d2-11e5-896b-61a6cd0fc590.png" alt="Date_format_bug" /></p>

<p>经过一上午的 debug ，我发现了在 <code>/source/_includes/post/date.html</code> 第11行
<code>date_formatted</code> 是没有声明 formatted 的格式的从而导致了无法显示。
故我将其替换成了 <code>date | date: "%b %e, %Y"</code> 然后就可以显示出 format 后的时间了。</p>

<p><img src="https://cloud.githubusercontent.com/assets/10649416/11036546/3078799a-8734-11e5-80c6-8460962bd945.png" alt="Date_format_bug_fixed" /></p>

<p>还有在发布超过20字的标题的博客时，首页的相应博客处会出现样式错误， date_line 会与标题重叠在一起。
这两个 bug 我都已修复并提交了，在<a href="https://github.com/macjasp/cleanpress/pull/23">这里</a>可以查看并修改。</p>

<p>我使用了<strong>第三方插件</strong> <a href="https://disqus.com/">Disqus</a> 非常棒的评论系统，以及 <a href="https://dev.twitter.com/web/embedded-timelines">Twitter Timeline</a> 也是非常棒的时光机插件。根据官网的教程很容易安装并使用。</p>

<p>接着我还修改了<strong>样式</strong>，其中把全局字体改成了谷歌和 Adobe 联合发布的 <strong>思源黑体</strong> ，漂亮得不像实力派。修改过程主要参考了<a href="http://www.uisdc.com/source-han-sans-webfont">这篇文章</a>。其中每个不同的 Adobe 账户需要插入的是不同的 Typekit 代码( Adobe 会帮你自动生成代码)。但需要注意的是 Adobe Typekit 虽然不是免费服务，但也有免费方案可以选择，注册后有每月 25,000 次的浏览次数额度，对于一般个人 blog 或小型网站来说其实还算充裕（当然你也可以考虑付费升级，价格并不高 ：P ）。</p>

<h2>为什么是蜘蛛侠 ？</h2>

<p>嗷，其实是这样的，熟悉我的人就知道，我个人是漫威巨粉，而先前我看到 cleanpress 的 demo 页是酱的图片我很喜欢，并且想起来<a href="http://marvel.com/news/movies/24062/sony_pictures_entertainment_brings_marvel_studios_into_the_amazing_world_of_spider-man">蜘蛛侠要回归漫威了</a>, <del>再看绿箭我就节食5分钟！</del> 这就像苯宝宝又要回归已经弃坑的绿箭侠一样鸡冻。</p>

<p><img src="http://1.im.guokr.com/DQq0wz6RNDAcEszKLQI4xJXatRcJXp-327H-__RyrwToAQAAlQEAAEpQ.jpg" alt="苯宝宝只想安静地装醇" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[长颈鹿侠]]></title>
    <link href="http://thehackercat.me/blog/2015/05/16/giraffe-man/"/>
    <updated>2015-05-16T02:01:33+08:00</updated>
    <id>http://thehackercat.me/blog/2015/05/16/giraffe-man</id>
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/e05ea78cjw1es5gp39wftj20jg0ri75b.jpg" alt="fly to the moon" />
<strong>从小，我就想做英雄大侠。</strong></p>

<p><strong>长着翅膀，穿梭云雾间如探囊取物的那种。</strong></p>

<p>我幻想着，</p>

<p>有一天我能够被基因拼接后的老鹰咬一口，</p>

<p>白天老老实实上班，</p>

<p>晚上却化身老鹰侠。</p>

<p>戴上面具，</p>

<p>展开翅膀，</p>

<p>去消灭世界上所有的坏蛋。</p>

<p>于是老鹰侠兴高采烈地跑去告诉老爸这个想法。</p>

<p>老爸沉默了好久，才如梦初醒，</p>

<p>终于做出了回应。</p>

<p>他十分激动地顺手拿起了手边的书，</p>

<p>劈头盖脸地向老鹰侠打去，</p>

<p>边打还边说：</p>

<p>&ldquo;你爹我文曲星转世，学没富五车，富辆皮卡还是有的，
靠着这张嘴打架也没输过谁，上能识天象闻天下，下能解鸡兔同笼奥数题，
不说是什么千秋万代的伟人，好歹也是黑夜中最耀眼的那颗星。
你老子我尚且不能当什么大侠，你小子跟我装什么逼！&rdquo;</p>

<p>老爸一套招式行云流水不带喘精准无误地命中了我瘦弱的身躯。</p>

<p>当时我就懵逼了。</p>

<p>&ldquo;你儿子我一颗红心向祖国，先不说牺牲了写作业的时间去打坏蛋，好歹也是单纯地希望着这个世界好人能得到褒
赏，坏人能受到仲裁。法律做不到的我来做。这种跨时代的vigilante思想，却受到了守旧派文曲星转世的打
压。悲哀！
哼╭(╯^╰)╮&rdquo;</p>

<p>当然了，想归想。</p>

<p>在强权面前，</p>

<p>羁傲不逊的老鹰侠还是选择了低头。</p>

<p>带着书卷气的这顿揍最终还是抑制住了大脑的气血上涌。</p>

<p>然而这种气血上涌，</p>

<p>随着我年龄渐长，</p>

<p>越发演绎到极致。</p>

<p>我开始怀疑，</p>

<p>为什么有人会利用人类的善良来作为谋利的工具。</p>

<p>为什么有人会去折磨一些比自己弱小的生灵。</p>

<p>为什么有人能从看着别人受难中取乐。</p>

<p>我很不开心。</p>

<p>为什么善良的人应该承受比他人更多的痛楚，</p>

<p>而邪恶的人却可以嚣张跋扈逍遥自得。</p>

<p>我学会暴怒。</p>

<p>眼眶发红，咬牙切齿。</p>

<p>我想把坏人们都撕碎。</p>

<p>我要他们都知道痛苦总是平等传递的，</p>

<p>欺负任何生命都是不被允许的。</p>

<p>至少，</p>

<p>不被我允许！</p>

<p>我还是长大了啊。</p>

<p>我开始明白，做个基因拼接的超人，是比较不现实的 T.T</p>

<p>我开始偷偷学电工，画铠甲，</p>

<p>试图做个像钢铁侠那样的英雄。（是的，在我还不认识Tony Stark的时候，我就先有了做钢铁侠的想法了。）</p>

<p>刀枪不入，所向披靡。</p>

<p>任何装备的坏人都妄想阻止神装的我。</p>

<p>然而很不辛，</p>

<p>我的手稿最终还是被名侦探文曲星转世找着了。</p>

<p>我爸很快就明白了我的意图，</p>

<p>而我也直言不讳，</p>

<p>&ldquo;我想制造个世界，那里只有好人活着，大家见面时点头微笑，不用武装，不用伪装。而我可以从人们清澈的眼神里看到折射的太阳光。他们偶尔抬头，发现这个世界依旧温软善良。&rdquo;</p>

<p>我估计当时我爸听完肠子都悔青了，</p>

<p>&ldquo;完了完了，一世英名就要毁在这臭小子手里了。&rdquo;</p>

<p>因为当时老爸并没有再沉默，</p>

<p>他直接用数学卷抽了我一耳光。</p>

<p>&ldquo;作业写完了吗？没写完画什么鸟人！&rdquo;</p>

<p>我想，大概是他把我精心设计的</p>

<p><em>「宇宙无敌钛合金钢铁老鹰侠小虚大魔王一号」</em></p>

<p>当做了鸟人吧。</p>

<p>羞辱！大大的羞辱！</p>

<p>不能忍了！</p>

<p>于是，我奋起反抗，</p>

<p>强烈谴责老爸侮辱艺术，侮辱科技，侮辱未来。</p>

<p>而我老爸也是个精干的人，不逼逼，直接劈头盖脸一顿揍。</p>

<p>&ldquo;你小子数学考成这样，你跟我谈科技，跟我谈教育面向现代化，面向世界，面向未来？！&rdquo;</p>

<p>那一刻，</p>

<p>我突然获得了一种神祗般的平静。</p>

<p>我明白自己太弱了，</p>

<p>这个世界过分强势得太多了，</p>

<p>聪明人不该反复迎头而上。</p>

<p>至少，</p>

<p>不该再挨第三顿揍了。</p>

<p>所以，</p>

<p>我尝试慢慢把愤怒变为理解。</p>

<p>我理解这个世界，</p>

<p>理解一切循规蹈矩和荒腔走板，</p>

<p>一切汲汲营营和独辟蹊径。</p>

<p>如果可以的话，</p>

<p>也想跟他们称兄道弟，</p>

<p>这是最敏感的人的生存方式，</p>

<p>我知道它想要什么，</p>

<p>它想要一个识时务的俊杰，</p>

<p>可是我真的不想做。</p>

<p>我想做一个大侠，</p>

<p>像一阵风一样的大侠。</p>

<blockquote><p>我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。
                                                                               ——哈维尔</p></blockquote>

<p>这个答案在<a href="http://zhi.hu/THas">知乎</a>上</p>

<p>获得了6928个赞。</p>

<p>而我曾经给这个回答点了个向下的箭头。</p>

<p>大概是我曾觉得，</p>

<p>有时候最能解决问题的方法，</p>

<p>不一定是对的，却是最有效的。</p>

<p>Vigilante 是不对的，但可能是最有效的。</p>

<p><strong>如果能做一个绝望但细润无声的生命体，</strong></p>

<p><strong>那我愿意接盘背锅。</strong></p>

<p>我想，大概是因为</p>

<p>我是一个间距很大的人，</p>

<p>永远无法在生活的漫漫长河里筛出那些温情闪光的瞬间来普渡众人。</p>

<p>我更像是行走的钢丝，</p>

<p>所到之处都是血案。</p>

<p>这种偏执一直持续到我前几天看了一个视频。</p>

<p>有那么一刻，</p>

<p>从一个男人的角度。</p>

<p>我觉得这个人帅毙了。</p>

<p>比蝙蝠侠，钢铁侠，蜘蛛侠，绿箭侠，老鹰侠都帅！</p>

<p>我突然找到了一种，</p>

<p>作为一个全然的自己，</p>

<p>去和这个世界平等的相处。</p>

<p>我既不能仲裁别人的生死，</p>

<p>别人也不能干扰我的心境。</p>

<p>我要像这个男人一样，</p>

<p>我暂时不想去当什么英雄大侠了。</p>

<p>我只想做个「鹿尤」一样的长颈鹿侠。</p>

<p>把阳光，微笑和温柔善良带给身边的人。</p>

<p>蝙蝠侠，钢铁侠，蜘蛛侠，绿箭侠，老鹰侠</p>

<p>他们也许能穿梭云雾间，</p>

<p>窥探云层中的奥秘。</p>

<p>他们有自己黑暗骑士的信条，</p>

<p>而我也有自己的理解和克制。</p>

<p>人们会欢呼于他们的招招致命的凌厉，轰隆作响的正义。</p>

<p>我却折服于他们对生命的谦卑的那一瞬。</p>

<p>他们公演一个神话，</p>

<p>而我，书写一个笑话，</p>

<p>奢求这个世界的微笑。</p>

<p>挺好。</p>

<p><img src="http://tc.sinaimg.cn/maxwidth.2048/tc.service.weibo.com/p/mmbiz_qlogo_cn/0c1b9fafeb853fdd5871eb86c4b02347.jpg" alt="鹿尤" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小王子与春天的熊]]></title>
    <link href="http://thehackercat.me/blog/2015/04/02/little-prince-and-bear/"/>
    <updated>2015-04-02T01:40:54+08:00</updated>
    <id>http://thehackercat.me/blog/2015/04/02/little-prince-and-bear</id>
    <content type="html"><![CDATA[<p><img src="http://jokerwang-blogpic.stor.sinaapp.com/original/f777064f36fd2b901fadbed0d3e9efab.jpg" alt="Litte prince" /></p>

<p>小王子的星球上忽然绽放了一朵娇艳的玫瑰花。</p>

<p>在我没长牙前，我就知道，草是绿的，花是红的，眼泪是咸的，口水是黏的，漂亮阿姨上厕所是不能偷看的。</p>

<p>在我长牙约莫拾几朵玫瑰花之后，我开始明白，玫瑰是不能摘的，春天是追不到的。</p>

<p>只能追，不能到！</p>

<!--more-->


<p>成都的春天鲜艳得很。</p>

<p>仿佛向整个天空泼上绿色的漆。</p>

<p>这也使玫瑰显得更加耀眼。</p>

<p>所以，小王子爱上这朵玫瑰，细心地呵护它。他以为，这是一朵唯一的花，只有他的星球上才有，其他的地方都不存在。</p>

<p>然而，玫瑰有刺，香水有毒。</p>

<p>当所有的女青年们一层腻子再一层粉盖住玻尿酸和肉毒杆菌微雕后的粉脸，闷几行code，写几首诗，拜读下冯
唐，再上微博刷个韩寒。</p>

<p>我开始发现，原来世界上有数百万朵这么完全一样的花儿。</p>

<p>这时，他才知道，他有的只是一朵普通的花。</p>

<p>然而，小王子并没有停止浇灌他的玫瑰花。</p>

<p>因为他知道，他星球上的那朵，仍然是独一无二的，他浇灌过它，用屏风保护过它，还倾听过它的哀怨自诩、它的孤单寂寞。</p>

<blockquote><p>It is the time you have wasted for your rose that makes your rose so important.  <br/>
&mdash;- 小王子。</p></blockquote>

<p>小王子注定不是个沾满胭脂味的人。</p>

<p>我也不是。</p>

<p>因为我还要纠结<code>preg_match_all($rose，$spring,$you);</code> 会不会报错。</p>

<p>//『从 &lsquo;春天&rsquo; 里抓取 一朵'玫瑰'，传回给 &lsquo;你'；』</p>

<p>我还要担心明天自己能否调整呼吸气定神闲地跟食堂阿姨要个豆浆鸡蛋饼。</p>

<p>然后默默保佑自己 听到闹钟就起床，上课不睡觉，代码一遍过，不得颈椎病。</p>

<p>我远不如小王子那样潇洒，</p>

<blockquote><p>如果不能活得洒脱，那我选择活得机灵。                                                                                                                                                               <br/>
&mdash;- 小虚大魔王。</p>

<p>If I cant be dissolute, I prefer to die.                                                                                                                                                     <br/>
&mdash;- 不要碧莲的小虚大魔王。</p></blockquote>

<p>所以我想到多年前认识的一个机灵的朋友。</p>

<p>他是一只熊。</p>

<p>一只春天里的熊。</p>

<pre><code>“最最喜欢你，绿子。”
“什么程度？”
“像喜欢春天的熊一样。”
“春天的熊？什么春天的熊？”
“春天的原野里，你，一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。
它这么对你说道:
‘你好，小姐，和我一块儿打滚玩好么？’
接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜噜滚下来，整整玩了一大天，你说棒不棒？”
“太棒了！”
“我就是这么喜欢你！”
</code></pre>

<p>春天的熊哥注定是个极讨女孩子欢心的熊。</p>

<p>我却不是。</p>

<p>因为我既没有他那绒厚的脂肪来缓冲从山顶滚到山脚的摩擦，也没有他那清澈的晶状体房水来倒映出整个湛蓝的天。</p>

<p>然而，我还是很高兴能结识他们两个碧池碧莲。</p>

<p>他们鲜衣怒马，少年才俊。</p>

<p>他们就是牛逼，</p>

<p>新鲜的牛逼。</p>

<p>有空时，</p>

<p>我们聊聊教育面向现代化面向世界面向未来，</p>

<p>再吹逼一下世界霍乱时我们如何去拯救别人的爱情。</p>

<p>最后总结一下把整个春天都拥入怀里的250种方法。</p>

<p>看来所有不要脸的人都注定要相遇的。</p>

<p>成都的春天真绿啊。</p>

<p>阳光透过叶的缝隙小孔成像。</p>

<p>不规则地映射了一个季节。</p>

<p>不知道厦门的太阳是否温软？</p>

<p>不知道可否有一天，我能够像小王子和春天的熊一样，</p>

<p>以真正牛逼的姿态再次相见。</p>

<p>大言不惭地说自己已经足够帅气足够有钱任性，</p>

<p>能依然对汲汲营营的名誉、条条框框的规则、战战兢兢的人情 不屑一顾，</p>

<p>对嘲讽和贬低的声音置之不理，保有与物质世界隔开距离的独到审美，</p>

<p>把所有的目光都留给美好、聪明、温柔的所在。</p>

<p>毕竟，</p>

<p>这才是我们和这个世界结交的缘由。</p>

<p>小王子走近这朵不期而至的玫瑰花。</p>

<p>风却把这朵玫瑰吹散。</p>

<p>花瓣迎着风，</p>

<p>在最高点乘着叶片向前飞。</p>

<p>小王子也迎着风向前追。</p>

<p>然而，扬起的风反而使玫瑰渐行渐远。</p>

<p><strong>如果我不能像一阵风，</strong></p>

<p><strong>那么，</strong></p>

<p><strong>请让我追逐你风中飘忽不定的脸。</strong></p>
]]></content>
  </entry>
  
</feed>
