<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LexusLee&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lexuslee.me/"/>
  <updated>2016-12-08T09:31:06.000Z</updated>
  <id>http://lexuslee.me/</id>
  
  <author>
    <name>LexusLee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何大脑有一套日志系统就好了</title>
    <link href="http://lexuslee.me/2016/07/16/%E5%A6%82%E6%9E%9C%E5%A4%A7%E8%84%91%E6%9C%89%E4%B8%80%E5%A5%97%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E5%B0%B1%E5%A5%BD%E4%BA%86/"/>
    <id>http://lexuslee.me/2016/07/16/如果大脑有一套日志系统就好了/</id>
    <published>2016-07-16T08:33:33.000Z</published>
    <updated>2016-12-08T09:31:06.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如果大脑有一套日志系统就好了&quot;&gt;&lt;a href=&quot;#如果大脑有一套日志系统就好了&quot; class=&quot;headerlink&quot; title=&quot;如果大脑有一套日志系统就好了&quot;&gt;&lt;/a&gt;如果大脑有一套日志系统就好了&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://img31.mtime.cn/pi/2016/07/08/101238.71445696_1000X1000.jpg&quot; alt=&quot;大鱼海棠&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=28285910&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/center&gt;

&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近很健忘，今天下午撸代码的时候，基本上每执行一个模块就要将调用函数、执行结果、友好信息等记录到日志系统里。&lt;/p&gt;
&lt;p&gt;然后我突然想到，如果生物的大脑有一套日志系统就好了!&lt;/p&gt;
    
    </summary>
    
      <category term="gossip" scheme="http://lexuslee.me/categories/gossip/"/>
    
    
  </entry>
  
  <entry>
    <title>Twisted+gevent 异步+协程服务器开发</title>
    <link href="http://lexuslee.me/2016/07/04/2016-07-01-rpc-server/"/>
    <id>http://lexuslee.me/2016/07/04/2016-07-01-rpc-server/</id>
    <published>2016-07-03T20:01:33.000Z</published>
    <updated>2016-12-06T13:54:29.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近接触到用 Twisted 来写个 RPC 服务器，对高并发、性能和大量长连接时的稳定性方面有要求，所以应该在 Twisted 的基础上再造些轮子，最后考虑用 Twisted + gevent 来实现 「异步+协程」的部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lexuslee.me/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 5-关联性和超链接</title>
    <link href="http://lexuslee.me/2016/04/06/2016-04-06-DRF-tutorial-5-relations/"/>
    <id>http://lexuslee.me/2016/04/06/2016-04-06-DRF-tutorial-5-relations/</id>
    <published>2016-04-05T18:01:33.000Z</published>
    <updated>2016-12-06T13:47:40.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关联性和超链接&quot;&gt;&lt;a href=&quot;#关联性和超链接&quot; class=&quot;headerlink&quot; title=&quot;关联性和超链接&quot;&gt;&lt;/a&gt;关联性和超链接&lt;/h2&gt;&lt;p&gt;之前我们的 api 都是用外键关联，然而实际上用超链接的方式更符合 RESTful 的思想。&lt;/p&gt;
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 4-验证和授权</title>
    <link href="http://lexuslee.me/2016/04/04/2016-04-04-DRF-tutorial-4-authentication/"/>
    <id>http://lexuslee.me/2016/04/04/2016-04-04-DRF-tutorial-4-authentication/</id>
    <published>2016-04-03T18:01:33.000Z</published>
    <updated>2016-12-06T13:47:33.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;验证与授权&quot;&gt;&lt;a href=&quot;#验证与授权&quot; class=&quot;headerlink&quot; title=&quot;验证与授权&quot;&gt;&lt;/a&gt;验证与授权&lt;/h2&gt;&lt;p&gt;目前来看，我们的 API 并没有权限上的限制(即任何人都可以编辑或删除我们的 Movies )，这不是我们想要的。所
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 3-基于类的视图</title>
    <link href="http://lexuslee.me/2016/04/03/2016-04-03-DRF-tutorial-3-class-based-views/"/>
    <id>http://lexuslee.me/2016/04/03/2016-04-03-DRF-tutorial-3-class-based-views/</id>
    <published>2016-04-02T18:01:33.000Z</published>
    <updated>2016-12-06T13:47:22.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基于类的视图&quot;&gt;&lt;a href=&quot;#基于类的视图&quot; class=&quot;headerlink&quot; title=&quot;基于类的视图&quot;&gt;&lt;/a&gt;基于类的视图&lt;/h2&gt;&lt;p&gt;基于类的视图比先前基于函数的视图的可重用性更强，可以更多快好省地 ( &lt;a href=&quot;http://en.
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 2-请求和响应</title>
    <link href="http://lexuslee.me/2016/04/02/2016-04-02-DRF-tutorial-2-request-and-response/"/>
    <id>http://lexuslee.me/2016/04/02/2016-04-02-DRF-tutorial-2-request-and-response/</id>
    <published>2016-04-01T18:01:33.000Z</published>
    <updated>2016-12-06T13:47:15.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;请求与响应&quot;&gt;&lt;a href=&quot;#请求与响应&quot; class=&quot;headerlink&quot; title=&quot;请求与响应&quot;&gt;&lt;/a&gt;请求与响应&lt;/h2&gt;&lt;h3 id=&quot;请求对象&quot;&gt;&lt;a href=&quot;#请求对象&quot; class=&quot;headerlink&quot; title=&quot;请求对象&quot;
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 1-序列化</title>
    <link href="http://lexuslee.me/2016/04/01/2016-04-01-DRF-tutorial-1-serialization/"/>
    <id>http://lexuslee.me/2016/04/01/2016-04-01-DRF-tutorial-1-serialization/</id>
    <published>2016-03-31T18:01:33.000Z</published>
    <updated>2016-12-06T13:47:07.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h2&gt;&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Django REST Framework 快速上手</title>
    <link href="http://lexuslee.me/2016/03/29/2016-03-29-django-rest-framework/"/>
    <id>http://lexuslee.me/2016/03/29/2016-03-29-django-rest-framework/</id>
    <published>2016-03-29T07:43:36.000Z</published>
    <updated>2016-12-06T13:31:04.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Django-REST-Framework-快速上手&quot;&gt;&lt;a href=&quot;#Django-REST-Framework-快速上手&quot; class=&quot;headerlink&quot; title=&quot;Django REST Framework 快速上手&quot;&gt;&lt;/a&gt;Django REST Framework 快速上手&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;这几天正好在研究 RESTful 的方式来写 API，然后上手 Django REST 框架。&lt;/p&gt;
&lt;p&gt;Django REST Framework (以下简称 DRF )是一个轻量级的库，熟悉 Django 的话可以很容易的用它来构建 Web API。&lt;br&gt;
    
    </summary>
    
      <category term="Django-REST-Framework" scheme="http://lexuslee.me/categories/Django-REST-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 下搭建 uWSGI + nginx + Django</title>
    <link href="http://lexuslee.me/2016/02/27/2016-02-27-nginx-uwsgi-django/"/>
    <id>http://lexuslee.me/2016/02/27/2016-02-27-nginx-uwsgi-django/</id>
    <published>2016-02-27T13:04:07.000Z</published>
    <updated>2016-03-29T03:36:07.000Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景 :&quot;&gt;&lt;/a&gt;背景 :&lt;/h3&gt;&lt;p&gt;公司要求用 Django 做些项目，之前按网上教程搭环境的时候就遇到很多问题，感觉有些教程都是有误的，今天用 uWSGI 开多线程的时候服务器报了 HTTP 500 的错( Internal Server Error )，然后就一直连不上去了。所以按&lt;a href=&quot;http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html&quot;&gt;官网的教程&lt;/a&gt;重新配置一遍，把出现的问题记录下来。&lt;br&gt;
    
    </summary>
    
      <category term="Django" scheme="http://lexuslee.me/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>绿盟 Web 后端实习面试心得</title>
    <link href="http://lexuslee.me/2015/12/23/2015-12-23-nsfocus-interview/"/>
    <id>http://lexuslee.me/2015/12/23/2015-12-23-nsfocus-interview/</id>
    <published>2015-12-23T13:37:16.000Z</published>
    <updated>2016-12-06T13:36:16.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;12月23号下午2：00参加了绿盟的 Web 后端开发实习生的面试。考官是个胖哥哥，也是科大的，人很温柔和蔼。先问了一些数据结构与算法的问题，接着问了计算机网络的一些基础问题，最后考察了下 Web 开发的一些知识。总得来说题目不难，但是自己也发挥不好，原来以为有了几次面经，但是在现场还是紧张得不行。 (真是给自己的心理素质跪了 ：P)&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://lexuslee.me/categories/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>海豚浏览器 Python 实习面试心得</title>
    <link href="http://lexuslee.me/2015/12/18/2015-12-18-dolphin-interview/"/>
    <id>http://lexuslee.me/2015/12/18/2015-12-18-dolphin-interview/</id>
    <published>2015-12-18T04:02:37.000Z</published>
    <updated>2016-12-06T13:35:54.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;12月11号下午4：30参加了海豚浏览器的 Python 后台开发实习生的电面，考官一开始先问了我一些 Python 基础的问题，接着问了些计网的经典面试题，最后考了2道算法题，然后开始扯皮一些之前做过的项目中的问题等，最后总结心得如下：&lt;br&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://lexuslee.me/categories/Interview/"/>
    
    
  </entry>
  
  <entry>
    <title>Django 高级 views 和 URLconf 配置</title>
    <link href="http://lexuslee.me/2015/12/08/2015-12-08-django-learning-4/"/>
    <id>http://lexuslee.me/2015/12/08/2015-12-08-django-learning-4/</id>
    <published>2015-12-08T07:08:35.000Z</published>
    <updated>2016-03-29T03:28:01.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于官网教程讲得迷迷糊糊的，所以我提炼了下代码，发现便于理解很多。&lt;/p&gt;
&lt;h2 id=&quot;URLconf-技巧&quot;&gt;&lt;a href=&quot;#URLconf-技巧&quot; class=&quot;headerlink&quot; title=&quot;URLconf 技巧&quot;&gt;&lt;/a&gt;URLconf 技巧&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;urls.py&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在模块开始导入关联的视图函数，直接传递函数对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.conf.urls &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; include, url&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.contrib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; admin&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mysite.views &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; hello, current_datetime, hours_ahead&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;urlpatterns = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^admin/&#39;&lt;/span&gt;, include(admin.site.urls)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^hello/$&#39;&lt;/span&gt;, hello),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^time/$&#39;&lt;/span&gt;, current_datetime),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    url(&lt;span class=&quot;string&quot;&gt;r&#39;^time/plus/(\d&amp;#123;1,2&amp;#125;)/$&#39;&lt;/span&gt;, hours_ahead),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Django" scheme="http://lexuslee.me/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解 Python 装饰器</title>
    <link href="http://lexuslee.me/2015/12/07/2015-12-07-python-decorator-learning/"/>
    <id>http://lexuslee.me/2015/12/07/2015-12-07-python-decorator-learning/</id>
    <published>2015-12-07T06:12:24.000Z</published>
    <updated>2016-12-06T13:51:19.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在写 Python+Django 的时候发现，有时候封装 API 的时候经常会遗失一些重复的装饰信息，但是直接封装到方法里是比较差劲的写法，因为有多个模块可能同时需要这些装饰信息，所以我希望使用一种可以迭代的装饰器。于是我在 &lt;a href=&quot;http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484&quot;&gt;Stack Overflow&lt;/a&gt; 上找到了相应的解答。下面以这篇解答为引写下我理解 Python decorator 的思路过程。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://lexuslee.me/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title> Django 学习笔记3-- Models </title>
    <link href="http://lexuslee.me/2015/11/21/2015-11-21-django-learning3/"/>
    <id>http://lexuslee.me/2015/11/21/2015-11-21-django-learning3/</id>
    <published>2015-11-21T05:17:57.000Z</published>
    <updated>2016-12-06T13:26:56.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MTV-vs-MVC&quot;&gt;&lt;a href=&quot;#MTV-vs-MVC&quot; class=&quot;headerlink&quot; title=&quot;MTV vs MVC&quot;&gt;&lt;/a&gt;MTV vs MVC&lt;/h2&gt;&lt;p&gt;正如在之前&lt;a href=&quot;http://thehackercat.me/blog/2015/11/14/django-learning1/&quot;&gt;这篇文章&lt;/a&gt;所提到的， 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller ( MVC )模式。 在这个模式中， Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Django" scheme="http://lexuslee.me/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Octopress 中生成包含 liquid 语句的代码</title>
    <link href="http://lexuslee.me/2015/11/20/2015-11-20-blog-with-liquid/"/>
    <id>http://lexuslee.me/2015/11/20/2015-11-20-blog-with-liquid/</id>
    <published>2015-11-20T08:32:12.000Z</published>
    <updated>2016-12-06T13:25:45.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于之前写 &lt;a href=&quot;http://thehackercat.me/blog/2015/11/16/django-learning2/&quot;&gt;Django – Templates&lt;/a&gt; 篇时要用到包含 Liquid 语法的示例代码，而 Octopress (Jekyll) 在后端使用 Liquid 来处理生成 Web Pages ，对于文章内部插入的原本用来作示例的 Liquid 代码会被解析成 Web Pages 生成语句而不是原本的内容。故苦恼了我一会儿 Q.Q &lt;/p&gt;
&lt;p&gt;&lt;del&gt;不过这都不是事儿&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;比如，我之前写的&lt;br&gt;
    
    </summary>
    
      <category term="Octopress" scheme="http://lexuslee.me/categories/Octopress/"/>
    
    
  </entry>
  
  <entry>
    <title> Django 学习笔记2-- Templates </title>
    <link href="http://lexuslee.me/2015/11/16/2015-11-16-django-learning2/"/>
    <id>http://lexuslee.me/2015/11/16/2015-11-16-django-learning2/</id>
    <published>2015-11-16T07:15:55.000Z</published>
    <updated>2016-12-06T10:43:06.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;虽然 Django 中 Html 可以直接硬编码到 Python 中，但是这种行为并不利于前端开发人员进行维护。所以 Django 有了&lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;流模板&lt;/a&gt; ( Liquid Templates )。&lt;/p&gt;
&lt;h2 id=&quot;流模板基础&quot;&gt;&lt;a href=&quot;#流模板基础&quot; class=&quot;headerlink&quot; title=&quot;流模板基础&quot;&gt;&lt;/a&gt;流模板基础&lt;/h2&gt;&lt;p&gt;举个例子，下面这个模板大致含括了 Django 模板的几个特性。&lt;br&gt;
    
    </summary>
    
      <category term="Django" scheme="http://lexuslee.me/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title> Django 学习笔记1-- URLconf </title>
    <link href="http://lexuslee.me/2015/11/14/2015-11-14-django-learning1/"/>
    <id>http://lexuslee.me/2015/11/14/2015-11-14-django-learning1/</id>
    <published>2015-11-14T12:12:37.000Z</published>
    <updated>2016-12-06T10:22:34.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg&quot; alt=&quot;PRAY FOR PARIS &quot;&gt;&lt;/p&gt;
&lt;p&gt;今天好像巴黎有点乱，希望明天太阳还会照常升起。&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Django 是一个由 Python 编写、开源并采用经典的 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ff649643.aspx&quot;&gt;MVC&lt;/a&gt; 设计模式的 Web Full Stack 应用框架。&lt;/p&gt;
&lt;p&gt;在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：&lt;br&gt;
    
    </summary>
    
      <category term="Django" scheme="http://lexuslee.me/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Octopress搭建静态博客</title>
    <link href="http://lexuslee.me/2015/11/09/2015-11-09-fix-the-datetime-bug/"/>
    <id>http://lexuslee.me/2015/11/09/2015-11-09-fix-the-datetime-bug/</id>
    <published>2015-11-08T19:25:00.000Z</published>
    <updated>2016-12-06T10:36:47.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xse6j.com1.z0.glb.clouddn.com/spiderman.jpg&quot; alt=&quot;Spiderman&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近把个人博客搭好了，用了&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress&lt;/a&gt;,一个基于 Jekyll 的集成开发工具。&lt;/p&gt;
&lt;p&gt;原来 CSDN 的那个『骇客猫』弃坑了。&lt;/p&gt;
&lt;h2 id=&quot;安装和配置&quot;&gt;&lt;a href=&quot;#安装和配置&quot; class=&quot;headerlink&quot; title=&quot;安装和配置.&quot;&gt;&lt;/a&gt;安装和配置.&lt;/h2&gt;&lt;p&gt;Octopress 的安装配置比较简单，是需要按照官网或者网上一些&lt;a href=&quot;http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/&quot;&gt;教程&lt;/a&gt;一步步走即可。&lt;br&gt;
    
    </summary>
    
      <category term="Octopress" scheme="http://lexuslee.me/categories/Octopress/"/>
    
    
  </entry>
  
  <entry>
    <title>长颈鹿侠</title>
    <link href="http://lexuslee.me/2015/05/16/2015-05-16-giraffe-man/"/>
    <id>http://lexuslee.me/2015/05/16/2015-05-16-giraffe-man/</id>
    <published>2015-05-15T18:01:33.000Z</published>
    <updated>2016-12-08T09:33:44.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/e05ea78cjw1es5gp39wftj20jg0ri75b.jpg&quot; alt=&quot;fly to the moon&quot;&gt;&lt;br&gt;&lt;strong&gt;从小，我就想做英雄大侠。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;长着翅膀，穿梭云雾间如探囊取物的那种。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="gossip" scheme="http://lexuslee.me/categories/gossip/"/>
    
    
  </entry>
  
  <entry>
    <title>小王子与春天的熊</title>
    <link href="http://lexuslee.me/2015/04/02/2015-11-23-little-prince-and-bear/"/>
    <id>http://lexuslee.me/2015/04/02/2015-11-23-little-prince-and-bear/</id>
    <published>2015-04-01T17:40:54.000Z</published>
    <updated>2016-12-08T09:31:25.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jokerwang-blogpic.stor.sinaapp.com/original/f777064f36fd2b901fadbed0d3e9efab.jpg&quot; alt=&quot;Litte prince&quot;&gt;&lt;/p&gt;
&lt;p&gt;小王子的星球上忽然绽放了一朵娇艳的玫瑰花。&lt;/p&gt;
&lt;p&gt;在我没长牙前，我就知道，草是绿的，花是红的，眼泪是咸的，口水是黏的，漂亮阿姨上厕所是不能偷看的。&lt;/p&gt;
&lt;p&gt;在我长牙约莫拾几朵玫瑰花之后，我开始明白，玫瑰是不能摘的，春天是追不到的。&lt;/p&gt;
&lt;p&gt;只能追，不能到！&lt;br&gt;
    
    </summary>
    
      <category term="gossip" scheme="http://lexuslee.me/categories/gossip/"/>
    
    
  </entry>
  
</feed>
