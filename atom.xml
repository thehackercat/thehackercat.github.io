<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TheHackerCat's blog]]></title>
  <link href="http://thehackercat.me/atom.xml" rel="self"/>
  <link href="http://thehackercat.me/"/>
  <updated>2015-11-15T16:52:29+08:00</updated>
  <id>http://thehackercat.me/</id>
  <author>
    <name><![CDATA[TheHackerCat]]></name>
    <email><![CDATA[lexuscyborg103@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ Django 学习笔记1-- URLconf ]]></title>
    <link href="http://thehackercat.me/blog/2015/11/14/django-learning1/"/>
    <updated>2015-11-14T20:12:37+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/14/django-learning1</id>
    <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg" alt="PRAY FOR PARIS " /></p>

<p>今天好像巴黎有点乱，希望明天太阳还会照常升起。</p>

<h2>简介</h2>

<p>Django 是一个由 Python 编写、开源并采用经典的 <a href="https://msdn.microsoft.com/en-us/library/ff649643.aspx">MVC</a> 设计模式的 Web Full Stack 应用框架。</p>

<p>在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：</p>

<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>


<p>而 Django 的编译方式比较特别，他的 MVC 控制器部分由 URLconf 来实现。</p>

<h2>URLconf</h2>

<p>当我在 Django 中编写完视图要想将其路由要页面上时，我发现了 Django 的 URLconf 路由机制，他实现了为相应的视图函数路由到相应界面的映射功能，也就是说，当用户访问了 <code>http://127.0.0.1:8000/hello/</code> 时， Django 调用了视图 views.py 中的 hello () 函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">mysite.views</span> <span class="kn">import</span> <span class="n">hello</span><span class="p">,</span><span class="n">current_datetime</span><span class="p">,</span><span class="n">hours_ahead</span><span class="p">,</span><span class="n">letter</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^hello/$&#39;</span><span class="p">,</span> <span class="n">hello</span><span class="p">),</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/$&#39;</span><span class="p">,</span> <span class="n">current_datetime</span><span class="p">),</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;^time/plus/(\d{1,2})/ $&#39;</span><span class="p">,</span><span class="n">hours_ahead</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看出， URLconf 的路由是通过正则表达式来匹配一个完整的 hello 的 URL ，这样的话就可以保证 诸如 /hello/foo/ 等 URL 不会被匹配到。
为了更深入了解 URLconf 路由的机制，我找到了类似的 <a href="https://github.com/tornadoweb/tornado">tornado</a> 框架来对比。</p>

<p>注意到在其中 web.py 文件中的第2964行开始的如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">application</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">([</span>
</span><span class='line'>  <span class="p">(</span><span class="s">r&quot;/&quot;</span><span class="p">,</span> <span class="n">MainHandler</span><span class="p">),</span>
</span><span class='line'><span class="p">])</span>
</span><span class='line'><span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">application</span><span class="p">)</span>
</span><span class='line'><span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">current</span><span class="p">(</span> <span class="p">)</span><span class="o">.</span><span class="n">start</span><span class="p">(</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以看出 torando 现把一个路由表作为一个参数，传给 Application 类的构造函数，接着创建了一个实例，然后再把这个实例传递给 http_server 。那么当客户端发起<code>get /</code>请求的时候, http server 接收到这个请求，在路由表中匹配 url pattern ，最后交给 MainHandler 去处理。</p>

<p>这个机制跟 Django 的 URLconf 是类似的，都是通过在 pattern 中匹配好对应的 url 接着传给处理器来负责从路由表中检索并路由。</p>

<p>这种方法<strong>松耦合</strong>了 http server 层和 web application 层，从而让开发者可以专注于 web 应用的逻辑层，很好！  ：D</p>

<h2>Django 如何处理请求</h2>

<p>所以了解过了 Django 的 URLconf 机制后，我开始思考他是如何处理请求的。</p>

<p>我开启服务器后在地址栏中输入 <code>http://127.0.0.1:8000/time/plus/20/</code></p>

<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/urlconf1.png" alt="timeplus20" /></p>

<p>然后花现处理路线如下：</p>

<ol>
<li><p>进来的请求转入 /time/plus/20/ .</p></li>
<li><p>Django 通过在 ROOT_URLCONF 配置来决定根 URLconf .</p></li>
<li><p>Django 在 URLconf 中的所有 URL 模式中，查找第一个匹配 /time/plus/20/ 的条目。</p></li>
<li><p>如果找到匹配，将调用相应的视图函数</p></li>
<li><p>如果没找到匹配，则返回相应的 Http 状态码 (如图)</p></li>
<li><p>视图函数返回一个HttpResponse</p></li>
<li><p>Django 转换 HttpResponse 为一个适合的 HTTP response ，以 Web page 显示出来</p></li>
</ol>


<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-11-14%20%E4%B8%8B%E5%8D%889.27.45.png" alt="http_request" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建静态博客]]></title>
    <link href="http://thehackercat.me/blog/2015/11/09/fix-the-datetime-bug/"/>
    <updated>2015-11-09T11:25:00+08:00</updated>
    <id>http://thehackercat.me/blog/2015/11/09/fix-the-datetime-bug</id>
    <content type="html"><![CDATA[<p><img src="http://farm4.staticflickr.com/3749/9616934444_2b0616cc59_b.jpg" alt="Spiderman" /></p>

<p>最近把个人博客搭好了，用了<a href="https://github.com/octopress/octopress">Octopress</a>,一个基于 Jekyll 的集成开发工具。</p>

<p>原来 CSDN 的那个『骇客猫』弃坑了。</p>

<h2>安装和配置.</h2>

<p>Octopress 的安装配置比较简单，是需要按照官网或者网上一些<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/">教程</a>一步步走即可。</p>

<p>由于我在2015年10月1日更新了 OS X EI Capitan，新系统在权限设置上增加了 <a href="http://www.macworld.com/article/2948140/os-x/private-i-el-capitans-system-integrity-protection-will-shift-utilities-functions.html">System Integrity Protection</a> (SIP) 来提高系统安全性并且在 System Library 的路径上作了修改，导致了一些安装 Jekyll 时出现的异常，罗列如下：</p>

<ol>
<li><p>如果你使用命令行 <code>$ gem install jekyll</code> 安装 Jekyll 时 遇到了如下问题：</p>

<pre><code> ERROR:  While executing gem ... (Errno::EPERM) 
 Operation not permitted - /usr/bin/jekyll
</code></pre>

<p>辣么尝试使用 <code>$ sudo gem install -n /usr/local/bin/ jekyll</code> 从而有效地避开 EI Captian 中 rootless 用户的权限问题。
或者有更彻底的办法，在终端输入</p>

<pre><code>  $ export PATH=/usr/local/bin:$PATH
</code></pre>

<p>这样会将原来 /usr/bin 的路径更改为 /usr/local/bin ，然后再进行安装，一劳永逸，但我不建议这么做。</p></li>
<li><p>如果你在进行上述操作时遇见了如下问题：</p>

<pre><code> ERROR: Error installing jekyll:
 ERROR: Failed to build gem native extension.  
</code></pre>

<p>辣么你应该没有安装 OS X developer tools ，安装后才能编译一些 ruby 的原生的拓展插件。
在命令行中输入</p>

<pre><code>  $ xcode-select --install
</code></pre>

<p>就口以安装了。</p></li>
<li><p>如果你遇到了任何 Permission denied 的问题：</p>

<pre><code> ERROR:  While executing gem ... (Errno::EACCES)
 Permission denied
</code></pre>

<p>辣么在命令行之前加上 <code>$ sudo</code> 。</p></li>
</ol>


<h2>个性化修改</h2>

<p>对于我的博客的个性化修改我主要做了以下三个：</p>

<ul>
<li>第三方主题：Octopress有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">第三方主题</a>安装也很便捷。</li>
<li>插件安装：可以在 <code>/plugins</code> 目录下安装一些第三方插件，诸如 Disqus 评论系统、 Twitter 的时间线等。</li>
<li>样式修改：我在 <code>/sass/custom/_styles.scss</code> 中修改了字体、 blog 的行间距以及一些边边角角的地方。</li>
</ul>


<p>我使用了<strong>第三方主题</strong> cleanpress 她极简的风格很吸引我，但是这个主题有蛮多 bug 的。</p>

<p>比如，在首页会遇见一个博客的 post 时间无法显示导致日历图标和目录图标重合的问题，如下所示：</p>

<p><img src="https://cloud.githubusercontent.com/assets/190438/8529829/37c7bc80-23d2-11e5-896b-61a6cd0fc590.png" alt="Date_format_bug" /></p>

<p>经过一上午的 debug ，我发现了在 <code>/source/_includes/post/date.html</code> 第11行
<code>date_formatted</code> 是没有声明 formatted 的格式的从而导致了无法显示。
故我将其替换成了 <code>date | date: "%b %e, %Y"</code> 然后就可以显示出 format 后的时间了。</p>

<p><img src="https://cloud.githubusercontent.com/assets/10649416/11036546/3078799a-8734-11e5-80c6-8460962bd945.png" alt="Date_format_bug_fixed" /></p>

<p>还有在发布超过20字的标题的博客时，首页的相应博客处会出现样式错误， date_line 会与标题重叠在一起。
这两个 bug 我都已修复并提交了，在<a href="https://github.com/macjasp/cleanpress/pull/23">这里</a>可以查看并修改。</p>

<p>我使用了<strong>第三方插件</strong> <a href="https://disqus.com/">Disqus</a> 非常棒的评论系统，以及 <a href="https://dev.twitter.com/web/embedded-timelines">Twitter Timeline</a> 也是非常棒的时光机插件。根据官网的教程很容易安装并使用。</p>

<p>接着我还修改了<strong>样式</strong>，其中把全局字体改成了谷歌和 Adobe 联合发布的 <strong>思源黑体</strong> ，漂亮得不像实力派。修改过程主要参考了<a href="http://www.uisdc.com/source-han-sans-webfont">这篇文章</a>。其中每个不同的 Adobe 账户需要插入的是不同的 Typekit 代码( Adobe 会帮你自动生成代码)。但需要注意的是 Adobe Typekit 虽然不是免费服务，但也有免费方案可以选择，注册后有每月 25,000 次的浏览次数额度，对于一般个人 blog 或小型网站来说其实还算充裕（当然你也可以考虑付费升级，价格并不高 ：P ）。</p>

<h2>为什么是蜘蛛侠 ？</h2>

<p>嗷，其实是这样的，熟悉我的人就知道，我个人是漫威巨粉，而先前我看到 cleanpress 的 demo 页是酱的图片我很喜欢，并且想起来<a href="http://marvel.com/news/movies/24062/sony_pictures_entertainment_brings_marvel_studios_into_the_amazing_world_of_spider-man">蜘蛛侠要回归漫威了</a>, <del>再看绿箭我就节食5分钟！</del> 这就像苯宝宝又要回归已经弃坑的绿箭侠一样鸡冻。</p>

<p><img src="http://1.im.guokr.com/DQq0wz6RNDAcEszKLQI4xJXatRcJXp-327H-__RyrwToAQAAlQEAAEpQ.jpg" alt="苯宝宝只想安静地装醇" /></p>
]]></content>
  </entry>
  
</feed>
